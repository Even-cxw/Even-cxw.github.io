{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/blob.png","path":"images/blob.png","modified":0,"renderable":0},{"_id":"source/images/ic_voice.png","path":"images/ic_voice.png","modified":0,"renderable":0},{"_id":"source/images/library.jpg","path":"images/library.jpg","modified":0,"renderable":0},{"_id":"source/images/origin01.png","path":"images/origin01.png","modified":0,"renderable":0},{"_id":"source/images/origin02.png","path":"images/origin02.png","modified":0,"renderable":0},{"_id":"source/images/vscode.png","path":"images/vscode.png","modified":0,"renderable":0},{"_id":"source/images/download/download01.png","path":"images/download/download01.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/download.md","hash":"4deea64843429b0631b4826aa4df53ea08e834d1","modified":1647744014337},{"_id":"source/_posts/diary.txt","hash":"42b9e198b79cfcd6741bd9522838b0e94b9a70b7","modified":1647744014337},{"_id":"source/.DS_Store","hash":"9352391a35ecb0d062dcdd904da5214a8aa90b86","modified":1637889287821},{"_id":"source/_posts/eval_Function.md","hash":"a892d2a6413742377abb7c0f461a06845624874a","modified":1647744014338},{"_id":"source/_posts/js_animation.md","hash":"10179e069e79f8dde6a06ebc2f3502b09563f001","modified":1647744014338},{"_id":"source/_posts/mac.md","hash":"d81dcff948cfdca6ab59a86ef58c26ac55db4c74","modified":1647744014338},{"_id":"source/_posts/md.md","hash":"85ded4646062e1fff51cc2c314423b21d4a982a5","modified":1647744014338},{"_id":"source/_posts/node.md","hash":"037b32ae1cc0c140cb5d89027e039b23860f697c","modified":1647744014338},{"_id":"source/_posts/study.md","hash":"93b0139447e8ec74ed6406f38eded56262e09be3","modified":1647744014339},{"_id":"source/_posts/typescript-webpack.md","hash":"7d05e76ce4702d8390643d2695dbdedfc0306a01","modified":1647744014340},{"_id":"source/_posts/type.md","hash":"535d5215d9f370a9b5eed231e35b8dc5089eefdd","modified":1647744014339},{"_id":"source/_posts/vue.md","hash":"249a2a986152490acf90b37d5715cb6053d881e5","modified":1647744014340},{"_id":"source/_posts/vscode.md","hash":"e6d021ccd67eb489b76c65f6aa1bde74f0cb9b1e","modified":1637895244461},{"_id":"source/categories/index.md","hash":"420dbb7f5703c8d70d73d6a1e3e8d50f934c08fd","modified":1647744014341},{"_id":"source/_posts/webpack.md","hash":"0f78870a9dbadb38bc3ea4c12921cf3901490d85","modified":1647744014340},{"_id":"source/404/index.md","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1647744014336},{"_id":"source/document/index.md","hash":"9a2be26833abd2a2dfad089d5253babd5b85b96c","modified":1647744014341},{"_id":"source/images/ic_voice.png","hash":"bca1b47763ed7a2f05afef8b621f1381b40b56d4","modified":1637735806741},{"_id":"source/images/origin01.png","hash":"2b023ab9010675c3a604a18b129527187455d69a","modified":1638776629401},{"_id":"source/images/origin02.png","hash":"ae8043782f11663604f58af7bca7d8bca79f74ae","modified":1638777016297},{"_id":"source/_posts/document.md","hash":"2ca02eb0be049042f0ac7b5c947a6c5f9cb53477","modified":1650778742840},{"_id":"source/images/blob.png","hash":"7e46bd8bc21831d12735290cb9a08a053463181b","modified":1637723538119},{"_id":"source/tags/index.md","hash":"bbe87904c1a4f33ce97b404708cdefe1de141f83","modified":1647744014347},{"_id":"source/images/vscode.png","hash":"6ecfe3eba450515cfce9a8438a794faed14f237c","modified":1637049629250},{"_id":"source/_posts/canvas.md","hash":"1fbac7f6d7c5910e5affea6930db8102450387f3","modified":1647744014337},{"_id":"source/images/download/download01.png","hash":"7ac6d1c186f67b2cd9b0363bcfb08d5eee556ca2","modified":1637233979943},{"_id":"source/images/library.jpg","hash":"625f1634cb782721c10575be86724a3f74bf29fe","modified":1640939094349},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1647744014352},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1647744014348},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1647744014348},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1647744014352},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1647744014348},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1647744014352},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1647744014353},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1647744014353},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1647744014380},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1647744014352},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1647744014359},{"_id":"themes/next/_config.yml","hash":"4c67c326fcead9fcf463e07e2b7881d221e1954e","modified":1647744014353},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1647744014349},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1647744014350},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1647744014350},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1647744014349},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1647744014351},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1647744014351},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1647744014351},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1647744014351},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1647744014351},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1647744014352},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1647744014352},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1647744014354},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1647744014354},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1647744014354},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1647744014354},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1647744014355},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1647744014355},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1647744014355},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1647744014355},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1647744014355},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1647744014359},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1647744014360},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1647744014360},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1647744014360},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1647744014359},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1647744014361},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1647744014360},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1647744014361},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1647744014361},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1647744014361},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1647744014361},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1647744014361},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1647744014362},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1647744014362},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1647744014362},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1647744014362},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1647744014363},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1647744014363},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1647744014363},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1647744014364},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1647744014364},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1647744014363},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1647744014379},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1647744014379},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1647744014379},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1647744014379},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1647744014379},{"_id":"themes/next/languages/zh-CN.yml","hash":"b56c016dc93917ad8661fcf86e84065cc45d4bf3","modified":1647744014363},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1647744014379},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1647744014384},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1647744014349},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1647744014350},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1647744014350},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1647744014350},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1647744014356},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1647744014357},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1647744014357},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1647744014356},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1647744014357},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1647744014357},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1647744014357},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1647744014358},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1647744014358},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1647744014358},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1647744014358},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1647744014359},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1647744014359},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1647744014364},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1647744014364},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1647744014365},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1647744014365},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1647744014365},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1647744014367},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1647744014367},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1647744014370},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1647744014370},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1647744014371},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1647744014372},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1647744014372},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1647744014374},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1647744014376},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1647744014376},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1647744014380},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1647744014376},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1647744014382},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1647744014382},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1647744014383},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1647744014383},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1647744014383},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1647744014383},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1647744014384},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1647744014384},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1647744014384},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1647744014386},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1647744014398},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1647744014404},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1647744014404},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1647744014404},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1647744014405},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1647744014405},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1647744014405},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1647744014405},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1647744014406},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1647744014371},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1627608806000},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1647744014384},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1627608806000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1647744014406},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1647744014385},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1647744014385},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1647744014385},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1647744014385},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1647744014385},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1647744014385},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1647744014385},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1647744014386},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1647744014386},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1647744014406},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1647744014407},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1647744014407},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1647744014407},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1647744014407},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1647744014408},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1647744014408},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1647744014365},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1647744014365},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1647744014366},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1647744014407},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1647744014366},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1647744014366},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1647744014366},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1647744014367},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1647744014367},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1647744014367},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1647744014367},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1647744014368},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1647744014369},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1647744014368},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1647744014369},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1647744014369},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1647744014369},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1647744014370},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1647744014370},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1647744014371},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1647744014371},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1647744014372},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1647744014372},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1647744014372},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1647744014373},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1647744014373},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1647744014373},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1647744014374},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1647744014373},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1647744014374},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1647744014375},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1647744014374},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1647744014375},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1647744014375},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1647744014375},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1647744014375},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1647744014376},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1647744014376},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1647744014376},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1647744014377},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1647744014377},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1647744014377},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1647744014377},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1647744014377},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1647744014378},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1647744014378},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1647744014378},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1647744014378},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1647744014378},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1647744014380},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1647744014380},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1647744014380},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1647744014403},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1647744014403},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1647744014403},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1647744014403},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1647744014403},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1647744014381},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1647744014381},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1647744014381},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1647744014382},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1647744014381},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1647744014382},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1647744014382},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1647744014382},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1647744014408},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1647744014411},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1647744014408},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1647744014411},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1647744014387},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1647744014393},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1647744014393},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1647744014387},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1647744014386},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"efdd2b16a908a909b337d013bb3820587595a88c","modified":1647744014395},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1647744014390},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1647744014395},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1647744014395},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1647744014396},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1647744014396},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1647744014396},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1647744014396},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1647744014398},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1647744014398},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1647744014399},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1647744014399},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1647744014399},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1647744014399},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1647744014399},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1647744014400},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1647744014400},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1647744014400},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1647744014401},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1647744014401},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1647744014401},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1647744014401},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1647744014402},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1647744014402},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1647744014402},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1647744014402},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1647744014399},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1647744014409},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1647744014391},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1647744014392},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1647744014392},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1647744014392},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1647744014392},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1647744014392},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1647744014392},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1647744014387},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1647744014387},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ce7fbc8791f676acc53f556c59ef55a13fdf5f66","modified":1647744014387},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1647744014392},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1647744014388},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1647744014388},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1647744014393},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1647744014393},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1647744014393},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1647744014393},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1647744014394},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1647744014394},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1647744014394},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1647744014394},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1647744014394},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1647744014394},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1647744014390},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1647744014390},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1647744014391},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1647744014391},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1647744014391},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1647744014388},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1647744014388},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1647744014388},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1647744014388},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1647744014389},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1647744014389},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1647744014389},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1647744014389},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1647744014389},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1647744014389},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1647744014390},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1647744014390},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1647744014390},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1647744014397},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1647744014397},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1647744014397},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1647744014397},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1647744014398},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1647744014398},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1647744014397},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1647744014395},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1647744014395},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1647744014396},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1647744014396},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1627608806000},{"_id":"public/categories/index.html","hash":"a5830225e740c482e42ec45ff7ded6d27b3d2b65","modified":1646789713155},{"_id":"public/404/index.html","hash":"d4eb8b17be876c6a7810ca03610bcf2c61d87a1f","modified":1646789713155},{"_id":"public/tags/index.html","hash":"f6cbccf0a2fa7780eb56575db52cfd17312ad116","modified":1646789713155},{"_id":"public/2022/01/27/node/index.html","hash":"cbbed615ec6ccfc9498822b7048f271a47805980","modified":1646789713155},{"_id":"public/2021/11/16/vscode/index.html","hash":"97ce8471ab7e906584a63a84ac2ac168e766cfe5","modified":1646789713155},{"_id":"public/2019/11/17/mac/index.html","hash":"e857f6698b71697953746cc5d9e40a967de85e70","modified":1646789713155},{"_id":"public/archives/index.html","hash":"161ad0a19394f341a82245d39b82282225ec79ac","modified":1646789713155},{"_id":"public/archives/page/2/index.html","hash":"fadab013aebd76830dacde05e954f5d97a665dbe","modified":1646789713155},{"_id":"public/archives/2018/index.html","hash":"3eec406ceac986bf4c4f7be813781f2be663a4f0","modified":1646789713155},{"_id":"public/archives/2018/11/index.html","hash":"68b826b8a575a42c95b9c7bf80eb315319df3b4d","modified":1646789713155},{"_id":"public/archives/2019/index.html","hash":"0d19d9e4c42fbf9b642f7e91ced69152488382a0","modified":1646789713155},{"_id":"public/archives/2019/11/index.html","hash":"4f1899adbbb81b1fdec7decb49e018bb913cb203","modified":1646789713155},{"_id":"public/document/index.html","hash":"f71589c3411f8a503c0068aead6226c7ffba23e4","modified":1646789713155},{"_id":"public/2021/12/20/webpack/index.html","hash":"298317887d33c8ee5d338b4b1bc77efc57f4e3d1","modified":1646789713155},{"_id":"public/2021/12/06/canvas/index.html","hash":"304a7356796feb1eac7f0ce87a4c31982bd8b33e","modified":1646789713155},{"_id":"public/2021/12/02/eval-Function/index.html","hash":"d6d8fda2ba86398d89b8286c5f97bd2a4e18be11","modified":1646789713155},{"_id":"public/2021/11/30/type/index.html","hash":"74b97f355922637ff377a789031377e8f79dbd2d","modified":1646789713155},{"_id":"public/2021/11/26/js-animation/index.html","hash":"7b0175376da11cd36cec49f30a77f562b3200de9","modified":1646789713155},{"_id":"public/2021/11/22/download/index.html","hash":"aa12e05db3f83a3d5ace93a802f407b96990991e","modified":1646789713155},{"_id":"public/2021/11/17/typescript-webpack/index.html","hash":"8303b08ea86499d7ccffce2b0c73fc5630b4a446","modified":1646789713155},{"_id":"public/2021/11/16/md/index.html","hash":"7d87df4312a3bc49aa29f0ddd8d0d3d401d4d75e","modified":1646789713155},{"_id":"public/2020/01/25/vue/index.html","hash":"5061ff4dd8529349d0be83a4c4ea42345e453224","modified":1646789713155},{"_id":"public/2018/11/16/document/index.html","hash":"4bc606942a50f7976c9d484d26ab916055bb0fba","modified":1646789713155},{"_id":"public/archives/2020/index.html","hash":"d584be71147e5f6d3d6948f4521506ecca352409","modified":1646789713155},{"_id":"public/archives/2020/01/index.html","hash":"3fc8540ea1fa0eb7156f547595355e4bd6a183db","modified":1646789713155},{"_id":"public/archives/2021/index.html","hash":"55a08f09f68b5c349e8e7948687eed46326fdc49","modified":1646789713155},{"_id":"public/archives/2021/11/index.html","hash":"4d710f717f3ee5344bea35bc0d07d6adbe4dc2dc","modified":1646789713155},{"_id":"public/archives/2021/12/index.html","hash":"15b780223f7f914a7262612f9610e1e5ecafa9bf","modified":1646789713155},{"_id":"public/archives/2022/index.html","hash":"b62459a13fa5c2fcf8650629668241495ee0e87a","modified":1646789713155},{"_id":"public/archives/2022/01/index.html","hash":"9be8b4eccfe0625e6c3296af268cd649934d8efd","modified":1646789713155},{"_id":"public/categories/文档/index.html","hash":"c564e7370705947b5a34cdd1103137dbb7744d07","modified":1646789713155},{"_id":"public/categories/javascript/index.html","hash":"f31235b43663e6913950ae4538beb7a29b2e49a9","modified":1646789713155},{"_id":"public/categories/Mac/index.html","hash":"79ee04dcefdc1a27f4f49f3ed8a68d4c6cb17130","modified":1646789713155},{"_id":"public/categories/md/index.html","hash":"92853aef79fefdbb5607c52ce2a2301a10ce3b5c","modified":1646789713155},{"_id":"public/categories/node/index.html","hash":"797627b641047a9025bf3819af0c0521e45911c2","modified":1646789713155},{"_id":"public/categories/typescript/index.html","hash":"fa9dd0da5a598d77577ecdb4ca28fc160e14be91","modified":1646789713155},{"_id":"public/categories/vscode/index.html","hash":"f5d258adc3899b7515f26b2e0b12f79c0b6aef14","modified":1646789713155},{"_id":"public/categories/vue/index.html","hash":"ccc3207e2d6f66b78a2469ebb8582930662dd668","modified":1646789713155},{"_id":"public/categories/webpack/index.html","hash":"3dca72dd547d651543c67f844bce11441d72982b","modified":1646789713155},{"_id":"public/categories/canvas/index.html","hash":"6ff4c3c3d88c4592d5f2266b1152f4f6d0dcd5d1","modified":1646789713155},{"_id":"public/tags/文档/index.html","hash":"909bd1ceed31c90c5364c053d078ac9828b00edf","modified":1646789713155},{"_id":"public/tags/javascript/index.html","hash":"53e123f68652b27e36fea4dee7ae2e05aaf2a357","modified":1646789713155},{"_id":"public/tags/Mac/index.html","hash":"e56386ab257e7da573c131bd33a7782c7c231f73","modified":1646789713155},{"_id":"public/tags/md/index.html","hash":"03eee6ed19e991738b25afa114f895a293d4ccb8","modified":1646789713155},{"_id":"public/tags/node/index.html","hash":"495de6ecf074afae8547f0177e6f699d46761898","modified":1646789713155},{"_id":"public/tags/typescript/index.html","hash":"01b9f101f510f5c3866823e48ffacecdb851ff22","modified":1646789713155},{"_id":"public/tags/webpack/index.html","hash":"e84411a404b6d358f712f1b28e005e83d6ba015a","modified":1646789713155},{"_id":"public/tags/vscode/index.html","hash":"443dd5784a76f3cb175131f74e01eb0a3f913bbd","modified":1646789713155},{"_id":"public/tags/vue/index.html","hash":"5b2536768e088fb7283be390550345c178a2ef56","modified":1646789713155},{"_id":"public/tags/canvas/index.html","hash":"0e85b1144609465078ad5fb1b57f8a7c49526298","modified":1646789713155},{"_id":"public/index.html","hash":"aec6fc602e8013d599f2bbf1ecfb9b8387c3b256","modified":1646789713155},{"_id":"public/page/2/index.html","hash":"b192a8577d7a80a9acfea5db7ec44d915e97a5a8","modified":1646789713155},{"_id":"public/images/ic_voice.png","hash":"bca1b47763ed7a2f05afef8b621f1381b40b56d4","modified":1646789713155},{"_id":"public/images/blob.png","hash":"7e46bd8bc21831d12735290cb9a08a053463181b","modified":1646789713155},{"_id":"public/images/origin01.png","hash":"2b023ab9010675c3a604a18b129527187455d69a","modified":1646789713155},{"_id":"public/images/origin02.png","hash":"ae8043782f11663604f58af7bca7d8bca79f74ae","modified":1646789713155},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1646789713155},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1646789713155},{"_id":"public/images/vscode.png","hash":"6ecfe3eba450515cfce9a8438a794faed14f237c","modified":1646789713155},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646789713155},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1646789713155},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1646789713155},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1646789713155},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1646789713155},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1646789713155},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1646789713155},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646789713155},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1646789713155},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1646789713155},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646789713155},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1646789713155},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1646789713155},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1646789713155},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1646789713155},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1646789713155},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1646789713155},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1646789713155},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1646789713155},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1646789713155},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1646789713155},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1646789713155},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1646789713155},{"_id":"public/css/main.css","hash":"ba8cf1a00d2766b1c905e40597585235b9fc98b8","modified":1646789713155},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1646789713155},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1646789713155},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1646789713155},{"_id":"public/images/download/download01.png","hash":"7ac6d1c186f67b2cd9b0363bcfb08d5eee556ca2","modified":1646789713155},{"_id":"public/images/library.jpg","hash":"625f1634cb782721c10575be86724a3f74bf29fe","modified":1646789713155},{"_id":"source/_posts/react.md","hash":"659b78ae86eac2de8b8f881c6357ddffc9c2d7e6","modified":1649660668979},{"_id":"source/_posts/tool.md","hash":"e6ce4f635999a50dc1772989eacc4258f225349d","modified":1650530755326},{"_id":"source/_posts/handle_url.md","hash":"0af7625fd4cef38c927fccdae249787015661942","modified":1649749968708},{"_id":"source/_posts/typescript.md","hash":"cc1cdc7053025027728bc1d00fffbe5669e85b6e","modified":1650784297256}],"Category":[{"name":"文档","_id":"cl0iw2rd40004itozbg2z2rge"},{"name":"javascript","_id":"cl0iw2rd9000bitoze7w356wf"},{"name":"Mac","_id":"cl0iw2rdl000uitoz7doq7d9w"},{"name":"md","_id":"cl0iw2rdn0011itoz8zn1fmdz"},{"name":"node","_id":"cl0iw2rdo0015itoz7mesged4"},{"name":"typescript","_id":"cl0iw2rdo0019itoz9cm2gmyh"},{"name":"vscode","_id":"cl0iw2rdr001ditoz8y0l5z6j"},{"name":"vue","_id":"cl0iw2rds001gitozfbd91g9d"},{"name":"webpack","_id":"cl0iw2rds001litozbpb3dcm7"},{"name":"canvas","_id":"cl0iw2rdw001pitoz3ool74o5"},{"name":"react","_id":"cl1vuhkzz000568vchtczgayd"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404/index.md","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2022-03-20T02:40:14.336Z","updated":"2022-03-20T02:40:14.336Z","path":"404/index.html","_id":"cl0iw2rcw0000itozhaik9xih","title":"","comments":1,"layout":"page","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"分类","date":"2021-11-15T08:47:17.000Z","type":"categories","_content":"## 内容一\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-11-15 16:47:17\ntype: \"categories\"\n---\n## 内容一\n","updated":"2022-03-20T02:40:14.341Z","path":"categories/index.html","_id":"cl0iw2rd20002itozfy4peso5","comments":1,"layout":"page","content":"<h2 id=\"内容一\"><a href=\"#内容一\" class=\"headerlink\" title=\"内容一\"></a>内容一</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内容一\"><a href=\"#内容一\" class=\"headerlink\" title=\"内容一\"></a>内容一</h2>"},{"title":"文档","date":"2021-11-10T08:47:17.000Z","updated":"2021-11-15T08:47:18.000Z","categories":"工具","_content":"\n\n#### 官方文档\n- [TS文档](https://www.tslang.cn/docs/handbook/basic-types.html)\n- [TS英文版文档](https://www.typescriptlang.org/docs/)\n- [axios文档](http://www.axios-js.com/zh-cn/docs/)\n- [fly文档](https://wendux.github.io/dist/#/doc/flyio/engine)\n- [postcss文档](https://postcss.org/)\n- [npm文档](https://docs.npmjs.com/)\n- [moment时间文档](http://momentjs.cn/docs/#/manipulating/)\n- [MDN手册](https://developer.mozilla.org/zh-CN/)\n- [lodash.js操作文档](https://www.lodashjs.com/)\n- [高德地图文档](https://lbs.amap.com/api/javascript-api/reference/map/)\n- [postcss文档](https://postcss.org/)\n- [mongodb文档](https://www.mongodb.org.cn/)\n- [node-fetch文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n- [koa文档](https://koa.bootcss.com/#introduction)\n- [typescript文档](https://github.com/zhongsp/TypeScript)\n- [高德地图文档](https://lbs.amap.com/api/amap-mobile/gettingstarted)\n- [nginx文档](https://www.nginx.cn/doc/index.html)\n- [A-fram VR体验文档](https://www.techbrood.com/aframe)\n- [桌面端electron-文档](http://www.electronjs.org/docs/tutorial/macos-dock)\n- [linux命令大全-文档](https://www.linuxcool.com/cat)\n- [正则表达测-文档](https://regexper.com/)\n- [微前端-文档](https://qiankun.umijs.org/zh/cookbook)\n- [bootcdn网址](https://www.bootcdn.cn/)\n- [webpack文档](https://webpack.docschina.org/)\n- [node](http://nodejs.cn/api/)\n- [react](https://reactjs.org/)\n- [schema](https://schema.org.cn/)\n- [个人博客](https://even-cxw.github.io/)\n- [nexT主题](https://theme-next.iissnan.com/getting-started.html)\n- [nexT操作文档](https://hexo.io/zh-cn/docs/)\n- [nexT操作文档-个人01](https://www.jianshu.com/p/f054333ac9e6)\n- [nexT操作文档-个人02](https://neveryu.github.io/2016/09/30/hexo-next-two/)\n- [jszip-utils](http://stuk.github.io/jszip-utils/) \n- [jsZip文档](https://stuk.github.io/jszip/documentation/examples.html)\n- [fontawesome图标库-英文版](https://fontawesome.com/)\n\n#### 微信文档\n- [微信公众号订阅](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23)\n- [微信jssdk开发文档](http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html)\n\n\n#### vue文档\n- [vue-element-admin-在线观看](https://panjiachen.github.io/vue-element-admin/#/dashboard)\n- [vue拖拽](http://www.itxst.com/vue-draggable/imj6nvze.html)\n- [vue-cli配置文档](https://cli.vuejs.org/zh/config/) \n- [vue文档](https://cn.vuejs.org/)\n- [vue3文档](https://vue3js.cn/docs/zh/guide/migration/introduction.html)\n- [vuex文档](https://vuex.vuejs.org/zh/)\n- [vue Cli](https://cli.vuejs.org/zh/guide/webpack.html)\n\n#### UI文档\n- [vant-ui](https://youzan.github.io/vant/#/zh-CN/quickstart)   \n- [element-ui](https://element.eleme.cn/#/zh-CN/component/layout)\n- [mui-ui](https://dev.dcloud.net.cn/mui/)\n- [cube-ui](https://didi.github.io/cube-ui/#/zh-CN)\n- [ant-Desing-ui](https://ant.design/components/rate-cn/)\n- [lay-ui](https://www.layui.com/doc/)\n- [vite-ui](https://vite.wiki/zh/introduction/)\n\n#### 他人博客\n- [阮一峰flex布局](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n- [axios博客](https://segmentfault.com/a/1190000008470355)\n- [tweenmax博客](https://segmentfault.com/a/1190000007496078)\n- [weui博客](https://blog.csdn.net/gegephp/article/details/88869255)\n- [nginx-缓存设置](https://www.layui.com/)\n- [SVN使用手册](https://blog.csdn.net/sinat_37812785/article/details/80243207)\n- [字符串的方法](https://www.cnblogs.com/zhangxin2540/p/7054835.html)\n- [正则表达式菜鸟文档](https://www.runoob.com/regexp/regexp-syntax.html)\n- [正则表达测试工具网址](https://c.runoob.com/front-end/854)\n- [koa的学习教程](https://chenshenhai.github.io/koa2-note/note/static/server.html)\n- [滚动元素图解](https://www.jianshu.com/p/d267456ebc0d)\n\n#### 插件文档\n- [tweenmax插件文档](https://www.tweenmax.com.cn/api/timelinemax/) \n- [简单日历开发-插件](https://github.com/zwhGithub/vue-calendar)\n- [日历开发文档](https://github.com/Hzy0913/mpvue-calendar)\n\n\n\n#### 工具\n- [正则表达式图解工具](https://regexper.com/)\n- [阿里巴巴失量图](https://www.iconfont.cn/search/indextag=)\n- [eruda.js调试博客1](https://www.jianshu.com/p/b95227a22745)\n- [eruda.js调试博客2](https://www.cnblogs.com/aisiqi-love/p/11764627.html)\n- [PDF转word](https://app.xunjiepdf.com/)\n- [easy-mock模拟数据工具](https://easy-mock.com/login)\n- [vorlonjs混合开发调试工具](http://www.vorlonjs.com/)\n- [修改host网址](https://zhuanlan.zhihu.com/p/107334179)\n- [npm环境变量配置](https://www.cnblogs.com/coder-lzh/p/9232192.html)\n- [Bulletproof background images](https://backgrounds.cm/)\n- [mac外接显示器设置](https://zhuanlan.zhihu.com/p/161631562)\n- [vscode安装加速](https://blog.csdn.net/m0_55548148/article/details/115587339)\n```\n外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n替换连接：vscode.cdn.azure.cn\n```\n\n#### 学习\n- [单元测试](https://segmentfault.com/a/1190000013470485)\n- [前端地图线路图](https://www.mscto.com/html5/30073)\n- [乾坤-微前端-git项目](https://github.com/umijs/qiankun)\n- [移动端字体放大问题](https://juejin.cn/post/6844903507061932040)\n- [clientX,pageX,offsetX 图解](https://www.cnblogs.com/skylar/p/4121508.html)\n- [节流防抖](https://www.jianshu.com/p/566c66aafa22)\n- [慕课网](https://www.imooc.com/)\n- [51CTO企业版](https://b.51cto.com/index)\n- [手写vue-MVVM](https://github.com/DMQ/mvvm)\n#### 软件下载\n- [罗技鼠标软件下载](https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html)\n\n#### bug文档\n- [返回不刷新问题](https://juejin.cn/post/6844903818191175687)\n","source":"document/index.md","raw":"---\ntitle: 文档\ndate: 2021-11-10 16:47:17\nupdated: 2021-11-15 16:47:18\ncategories: 工具\n---\n\n\n#### 官方文档\n- [TS文档](https://www.tslang.cn/docs/handbook/basic-types.html)\n- [TS英文版文档](https://www.typescriptlang.org/docs/)\n- [axios文档](http://www.axios-js.com/zh-cn/docs/)\n- [fly文档](https://wendux.github.io/dist/#/doc/flyio/engine)\n- [postcss文档](https://postcss.org/)\n- [npm文档](https://docs.npmjs.com/)\n- [moment时间文档](http://momentjs.cn/docs/#/manipulating/)\n- [MDN手册](https://developer.mozilla.org/zh-CN/)\n- [lodash.js操作文档](https://www.lodashjs.com/)\n- [高德地图文档](https://lbs.amap.com/api/javascript-api/reference/map/)\n- [postcss文档](https://postcss.org/)\n- [mongodb文档](https://www.mongodb.org.cn/)\n- [node-fetch文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n- [koa文档](https://koa.bootcss.com/#introduction)\n- [typescript文档](https://github.com/zhongsp/TypeScript)\n- [高德地图文档](https://lbs.amap.com/api/amap-mobile/gettingstarted)\n- [nginx文档](https://www.nginx.cn/doc/index.html)\n- [A-fram VR体验文档](https://www.techbrood.com/aframe)\n- [桌面端electron-文档](http://www.electronjs.org/docs/tutorial/macos-dock)\n- [linux命令大全-文档](https://www.linuxcool.com/cat)\n- [正则表达测-文档](https://regexper.com/)\n- [微前端-文档](https://qiankun.umijs.org/zh/cookbook)\n- [bootcdn网址](https://www.bootcdn.cn/)\n- [webpack文档](https://webpack.docschina.org/)\n- [node](http://nodejs.cn/api/)\n- [react](https://reactjs.org/)\n- [schema](https://schema.org.cn/)\n- [个人博客](https://even-cxw.github.io/)\n- [nexT主题](https://theme-next.iissnan.com/getting-started.html)\n- [nexT操作文档](https://hexo.io/zh-cn/docs/)\n- [nexT操作文档-个人01](https://www.jianshu.com/p/f054333ac9e6)\n- [nexT操作文档-个人02](https://neveryu.github.io/2016/09/30/hexo-next-two/)\n- [jszip-utils](http://stuk.github.io/jszip-utils/) \n- [jsZip文档](https://stuk.github.io/jszip/documentation/examples.html)\n- [fontawesome图标库-英文版](https://fontawesome.com/)\n\n#### 微信文档\n- [微信公众号订阅](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23)\n- [微信jssdk开发文档](http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html)\n\n\n#### vue文档\n- [vue-element-admin-在线观看](https://panjiachen.github.io/vue-element-admin/#/dashboard)\n- [vue拖拽](http://www.itxst.com/vue-draggable/imj6nvze.html)\n- [vue-cli配置文档](https://cli.vuejs.org/zh/config/) \n- [vue文档](https://cn.vuejs.org/)\n- [vue3文档](https://vue3js.cn/docs/zh/guide/migration/introduction.html)\n- [vuex文档](https://vuex.vuejs.org/zh/)\n- [vue Cli](https://cli.vuejs.org/zh/guide/webpack.html)\n\n#### UI文档\n- [vant-ui](https://youzan.github.io/vant/#/zh-CN/quickstart)   \n- [element-ui](https://element.eleme.cn/#/zh-CN/component/layout)\n- [mui-ui](https://dev.dcloud.net.cn/mui/)\n- [cube-ui](https://didi.github.io/cube-ui/#/zh-CN)\n- [ant-Desing-ui](https://ant.design/components/rate-cn/)\n- [lay-ui](https://www.layui.com/doc/)\n- [vite-ui](https://vite.wiki/zh/introduction/)\n\n#### 他人博客\n- [阮一峰flex布局](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n- [axios博客](https://segmentfault.com/a/1190000008470355)\n- [tweenmax博客](https://segmentfault.com/a/1190000007496078)\n- [weui博客](https://blog.csdn.net/gegephp/article/details/88869255)\n- [nginx-缓存设置](https://www.layui.com/)\n- [SVN使用手册](https://blog.csdn.net/sinat_37812785/article/details/80243207)\n- [字符串的方法](https://www.cnblogs.com/zhangxin2540/p/7054835.html)\n- [正则表达式菜鸟文档](https://www.runoob.com/regexp/regexp-syntax.html)\n- [正则表达测试工具网址](https://c.runoob.com/front-end/854)\n- [koa的学习教程](https://chenshenhai.github.io/koa2-note/note/static/server.html)\n- [滚动元素图解](https://www.jianshu.com/p/d267456ebc0d)\n\n#### 插件文档\n- [tweenmax插件文档](https://www.tweenmax.com.cn/api/timelinemax/) \n- [简单日历开发-插件](https://github.com/zwhGithub/vue-calendar)\n- [日历开发文档](https://github.com/Hzy0913/mpvue-calendar)\n\n\n\n#### 工具\n- [正则表达式图解工具](https://regexper.com/)\n- [阿里巴巴失量图](https://www.iconfont.cn/search/indextag=)\n- [eruda.js调试博客1](https://www.jianshu.com/p/b95227a22745)\n- [eruda.js调试博客2](https://www.cnblogs.com/aisiqi-love/p/11764627.html)\n- [PDF转word](https://app.xunjiepdf.com/)\n- [easy-mock模拟数据工具](https://easy-mock.com/login)\n- [vorlonjs混合开发调试工具](http://www.vorlonjs.com/)\n- [修改host网址](https://zhuanlan.zhihu.com/p/107334179)\n- [npm环境变量配置](https://www.cnblogs.com/coder-lzh/p/9232192.html)\n- [Bulletproof background images](https://backgrounds.cm/)\n- [mac外接显示器设置](https://zhuanlan.zhihu.com/p/161631562)\n- [vscode安装加速](https://blog.csdn.net/m0_55548148/article/details/115587339)\n```\n外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n替换连接：vscode.cdn.azure.cn\n```\n\n#### 学习\n- [单元测试](https://segmentfault.com/a/1190000013470485)\n- [前端地图线路图](https://www.mscto.com/html5/30073)\n- [乾坤-微前端-git项目](https://github.com/umijs/qiankun)\n- [移动端字体放大问题](https://juejin.cn/post/6844903507061932040)\n- [clientX,pageX,offsetX 图解](https://www.cnblogs.com/skylar/p/4121508.html)\n- [节流防抖](https://www.jianshu.com/p/566c66aafa22)\n- [慕课网](https://www.imooc.com/)\n- [51CTO企业版](https://b.51cto.com/index)\n- [手写vue-MVVM](https://github.com/DMQ/mvvm)\n#### 软件下载\n- [罗技鼠标软件下载](https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html)\n\n#### bug文档\n- [返回不刷新问题](https://juejin.cn/post/6844903818191175687)\n","path":"document/index.html","_id":"cl0iw2rd60006itozevdr35oc","comments":1,"layout":"page","content":"<h4 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h4><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">TS文档</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/\">TS英文版文档</a></li>\n<li><a href=\"http://www.axios-js.com/zh-cn/docs/\">axios文档</a></li>\n<li><a href=\"https://wendux.github.io/dist/#/doc/flyio/engine\">fly文档</a></li>\n<li><a href=\"https://postcss.org/\">postcss文档</a></li>\n<li><a href=\"https://docs.npmjs.com/\">npm文档</a></li>\n<li><a href=\"http://momentjs.cn/docs/#/manipulating/\">moment时间文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\">MDN手册</a></li>\n<li><a href=\"https://www.lodashjs.com/\">lodash.js操作文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/javascript-api/reference/map/\">高德地图文档</a></li>\n<li><a href=\"https://postcss.org/\">postcss文档</a></li>\n<li><a href=\"https://www.mongodb.org.cn/\">mongodb文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">node-fetch文档</a></li>\n<li><a href=\"https://koa.bootcss.com/#introduction\">koa文档</a></li>\n<li><a href=\"https://github.com/zhongsp/TypeScript\">typescript文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/amap-mobile/gettingstarted\">高德地图文档</a></li>\n<li><a href=\"https://www.nginx.cn/doc/index.html\">nginx文档</a></li>\n<li><a href=\"https://www.techbrood.com/aframe\">A-fram VR体验文档</a></li>\n<li><a href=\"http://www.electronjs.org/docs/tutorial/macos-dock\">桌面端electron-文档</a></li>\n<li><a href=\"https://www.linuxcool.com/cat\">linux命令大全-文档</a></li>\n<li><a href=\"https://regexper.com/\">正则表达测-文档</a></li>\n<li><a href=\"https://qiankun.umijs.org/zh/cookbook\">微前端-文档</a></li>\n<li><a href=\"https://www.bootcdn.cn/\">bootcdn网址</a></li>\n<li><a href=\"https://webpack.docschina.org/\">webpack文档</a></li>\n<li><a href=\"http://nodejs.cn/api/\">node</a></li>\n<li><a href=\"https://reactjs.org/\">react</a></li>\n<li><a href=\"https://schema.org.cn/\">schema</a></li>\n<li><a href=\"https://even-cxw.github.io/\">个人博客</a></li>\n<li><a href=\"https://theme-next.iissnan.com/getting-started.html\">nexT主题</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\">nexT操作文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/f054333ac9e6\">nexT操作文档-个人01</a></li>\n<li><a href=\"https://neveryu.github.io/2016/09/30/hexo-next-two/\">nexT操作文档-个人02</a></li>\n<li><a href=\"http://stuk.github.io/jszip-utils/\">jszip-utils</a> </li>\n<li><a href=\"https://stuk.github.io/jszip/documentation/examples.html\">jsZip文档</a></li>\n<li><a href=\"https://fontawesome.com/\">fontawesome图标库-英文版</a></li>\n</ul>\n<h4 id=\"微信文档\"><a href=\"#微信文档\" class=\"headerlink\" title=\"微信文档\"></a>微信文档</h4><ul>\n<li><a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23\">微信公众号订阅</a></li>\n<li><a href=\"http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html\">微信jssdk开发文档</a></li>\n</ul>\n<h4 id=\"vue文档\"><a href=\"#vue文档\" class=\"headerlink\" title=\"vue文档\"></a>vue文档</h4><ul>\n<li><a href=\"https://panjiachen.github.io/vue-element-admin/#/dashboard\">vue-element-admin-在线观看</a></li>\n<li><a href=\"http://www.itxst.com/vue-draggable/imj6nvze.html\">vue拖拽</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/config/\">vue-cli配置文档</a> </li>\n<li><a href=\"https://cn.vuejs.org/\">vue文档</a></li>\n<li><a href=\"https://vue3js.cn/docs/zh/guide/migration/introduction.html\">vue3文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/\">vuex文档</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/guide/webpack.html\">vue Cli</a></li>\n</ul>\n<h4 id=\"UI文档\"><a href=\"#UI文档\" class=\"headerlink\" title=\"UI文档\"></a>UI文档</h4><ul>\n<li><a href=\"https://youzan.github.io/vant/#/zh-CN/quickstart\">vant-ui</a>   </li>\n<li><a href=\"https://element.eleme.cn/#/zh-CN/component/layout\">element-ui</a></li>\n<li><a href=\"https://dev.dcloud.net.cn/mui/\">mui-ui</a></li>\n<li><a href=\"https://didi.github.io/cube-ui/#/zh-CN\">cube-ui</a></li>\n<li><a href=\"https://ant.design/components/rate-cn/\">ant-Desing-ui</a></li>\n<li><a href=\"https://www.layui.com/doc/\">lay-ui</a></li>\n<li><a href=\"https://vite.wiki/zh/introduction/\">vite-ui</a></li>\n</ul>\n<h4 id=\"他人博客\"><a href=\"#他人博客\" class=\"headerlink\" title=\"他人博客\"></a>他人博客</h4><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">阮一峰flex布局</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008470355\">axios博客</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000007496078\">tweenmax博客</a></li>\n<li><a href=\"https://blog.csdn.net/gegephp/article/details/88869255\">weui博客</a></li>\n<li><a href=\"https://www.layui.com/\">nginx-缓存设置</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_37812785/article/details/80243207\">SVN使用手册</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangxin2540/p/7054835.html\">字符串的方法</a></li>\n<li><a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">正则表达式菜鸟文档</a></li>\n<li><a href=\"https://c.runoob.com/front-end/854\">正则表达测试工具网址</a></li>\n<li><a href=\"https://chenshenhai.github.io/koa2-note/note/static/server.html\">koa的学习教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/d267456ebc0d\">滚动元素图解</a></li>\n</ul>\n<h4 id=\"插件文档\"><a href=\"#插件文档\" class=\"headerlink\" title=\"插件文档\"></a>插件文档</h4><ul>\n<li><a href=\"https://www.tweenmax.com.cn/api/timelinemax/\">tweenmax插件文档</a> </li>\n<li><a href=\"https://github.com/zwhGithub/vue-calendar\">简单日历开发-插件</a></li>\n<li><a href=\"https://github.com/Hzy0913/mpvue-calendar\">日历开发文档</a></li>\n</ul>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><a href=\"https://regexper.com/\">正则表达式图解工具</a></li>\n<li><a href=\"https://www.iconfont.cn/search/indextag=\">阿里巴巴失量图</a></li>\n<li><a href=\"https://www.jianshu.com/p/b95227a22745\">eruda.js调试博客1</a></li>\n<li><a href=\"https://www.cnblogs.com/aisiqi-love/p/11764627.html\">eruda.js调试博客2</a></li>\n<li><a href=\"https://app.xunjiepdf.com/\">PDF转word</a></li>\n<li><a href=\"https://easy-mock.com/login\">easy-mock模拟数据工具</a></li>\n<li><a href=\"http://www.vorlonjs.com/\">vorlonjs混合开发调试工具</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/107334179\">修改host网址</a></li>\n<li><a href=\"https://www.cnblogs.com/coder-lzh/p/9232192.html\">npm环境变量配置</a></li>\n<li><a href=\"https://backgrounds.cm/\">Bulletproof background images</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/161631562\">mac外接显示器设置</a></li>\n<li><a href=\"https://blog.csdn.net/m0_55548148/article/details/115587339\">vscode安装加速</a><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span><br><span class=\"line\">内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span><br><span class=\"line\">替换连接：vscode.cdn.azure.cn</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li><a href=\"https://segmentfault.com/a/1190000013470485\">单元测试</a></li>\n<li><a href=\"https://www.mscto.com/html5/30073\">前端地图线路图</a></li>\n<li><a href=\"https://github.com/umijs/qiankun\">乾坤-微前端-git项目</a></li>\n<li><a href=\"https://juejin.cn/post/6844903507061932040\">移动端字体放大问题</a></li>\n<li><a href=\"https://www.cnblogs.com/skylar/p/4121508.html\">clientX,pageX,offsetX 图解</a></li>\n<li><a href=\"https://www.jianshu.com/p/566c66aafa22\">节流防抖</a></li>\n<li><a href=\"https://www.imooc.com/\">慕课网</a></li>\n<li><a href=\"https://b.51cto.com/index\">51CTO企业版</a></li>\n<li><a href=\"https://github.com/DMQ/mvvm\">手写vue-MVVM</a><h4 id=\"软件下载\"><a href=\"#软件下载\" class=\"headerlink\" title=\"软件下载\"></a>软件下载</h4></li>\n<li><a href=\"https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html\">罗技鼠标软件下载</a></li>\n</ul>\n<h4 id=\"bug文档\"><a href=\"#bug文档\" class=\"headerlink\" title=\"bug文档\"></a>bug文档</h4><ul>\n<li><a href=\"https://juejin.cn/post/6844903818191175687\">返回不刷新问题</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h4><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">TS文档</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/\">TS英文版文档</a></li>\n<li><a href=\"http://www.axios-js.com/zh-cn/docs/\">axios文档</a></li>\n<li><a href=\"https://wendux.github.io/dist/#/doc/flyio/engine\">fly文档</a></li>\n<li><a href=\"https://postcss.org/\">postcss文档</a></li>\n<li><a href=\"https://docs.npmjs.com/\">npm文档</a></li>\n<li><a href=\"http://momentjs.cn/docs/#/manipulating/\">moment时间文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\">MDN手册</a></li>\n<li><a href=\"https://www.lodashjs.com/\">lodash.js操作文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/javascript-api/reference/map/\">高德地图文档</a></li>\n<li><a href=\"https://postcss.org/\">postcss文档</a></li>\n<li><a href=\"https://www.mongodb.org.cn/\">mongodb文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">node-fetch文档</a></li>\n<li><a href=\"https://koa.bootcss.com/#introduction\">koa文档</a></li>\n<li><a href=\"https://github.com/zhongsp/TypeScript\">typescript文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/amap-mobile/gettingstarted\">高德地图文档</a></li>\n<li><a href=\"https://www.nginx.cn/doc/index.html\">nginx文档</a></li>\n<li><a href=\"https://www.techbrood.com/aframe\">A-fram VR体验文档</a></li>\n<li><a href=\"http://www.electronjs.org/docs/tutorial/macos-dock\">桌面端electron-文档</a></li>\n<li><a href=\"https://www.linuxcool.com/cat\">linux命令大全-文档</a></li>\n<li><a href=\"https://regexper.com/\">正则表达测-文档</a></li>\n<li><a href=\"https://qiankun.umijs.org/zh/cookbook\">微前端-文档</a></li>\n<li><a href=\"https://www.bootcdn.cn/\">bootcdn网址</a></li>\n<li><a href=\"https://webpack.docschina.org/\">webpack文档</a></li>\n<li><a href=\"http://nodejs.cn/api/\">node</a></li>\n<li><a href=\"https://reactjs.org/\">react</a></li>\n<li><a href=\"https://schema.org.cn/\">schema</a></li>\n<li><a href=\"https://even-cxw.github.io/\">个人博客</a></li>\n<li><a href=\"https://theme-next.iissnan.com/getting-started.html\">nexT主题</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\">nexT操作文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/f054333ac9e6\">nexT操作文档-个人01</a></li>\n<li><a href=\"https://neveryu.github.io/2016/09/30/hexo-next-two/\">nexT操作文档-个人02</a></li>\n<li><a href=\"http://stuk.github.io/jszip-utils/\">jszip-utils</a> </li>\n<li><a href=\"https://stuk.github.io/jszip/documentation/examples.html\">jsZip文档</a></li>\n<li><a href=\"https://fontawesome.com/\">fontawesome图标库-英文版</a></li>\n</ul>\n<h4 id=\"微信文档\"><a href=\"#微信文档\" class=\"headerlink\" title=\"微信文档\"></a>微信文档</h4><ul>\n<li><a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23\">微信公众号订阅</a></li>\n<li><a href=\"http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html\">微信jssdk开发文档</a></li>\n</ul>\n<h4 id=\"vue文档\"><a href=\"#vue文档\" class=\"headerlink\" title=\"vue文档\"></a>vue文档</h4><ul>\n<li><a href=\"https://panjiachen.github.io/vue-element-admin/#/dashboard\">vue-element-admin-在线观看</a></li>\n<li><a href=\"http://www.itxst.com/vue-draggable/imj6nvze.html\">vue拖拽</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/config/\">vue-cli配置文档</a> </li>\n<li><a href=\"https://cn.vuejs.org/\">vue文档</a></li>\n<li><a href=\"https://vue3js.cn/docs/zh/guide/migration/introduction.html\">vue3文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/\">vuex文档</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/guide/webpack.html\">vue Cli</a></li>\n</ul>\n<h4 id=\"UI文档\"><a href=\"#UI文档\" class=\"headerlink\" title=\"UI文档\"></a>UI文档</h4><ul>\n<li><a href=\"https://youzan.github.io/vant/#/zh-CN/quickstart\">vant-ui</a>   </li>\n<li><a href=\"https://element.eleme.cn/#/zh-CN/component/layout\">element-ui</a></li>\n<li><a href=\"https://dev.dcloud.net.cn/mui/\">mui-ui</a></li>\n<li><a href=\"https://didi.github.io/cube-ui/#/zh-CN\">cube-ui</a></li>\n<li><a href=\"https://ant.design/components/rate-cn/\">ant-Desing-ui</a></li>\n<li><a href=\"https://www.layui.com/doc/\">lay-ui</a></li>\n<li><a href=\"https://vite.wiki/zh/introduction/\">vite-ui</a></li>\n</ul>\n<h4 id=\"他人博客\"><a href=\"#他人博客\" class=\"headerlink\" title=\"他人博客\"></a>他人博客</h4><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">阮一峰flex布局</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008470355\">axios博客</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000007496078\">tweenmax博客</a></li>\n<li><a href=\"https://blog.csdn.net/gegephp/article/details/88869255\">weui博客</a></li>\n<li><a href=\"https://www.layui.com/\">nginx-缓存设置</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_37812785/article/details/80243207\">SVN使用手册</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangxin2540/p/7054835.html\">字符串的方法</a></li>\n<li><a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">正则表达式菜鸟文档</a></li>\n<li><a href=\"https://c.runoob.com/front-end/854\">正则表达测试工具网址</a></li>\n<li><a href=\"https://chenshenhai.github.io/koa2-note/note/static/server.html\">koa的学习教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/d267456ebc0d\">滚动元素图解</a></li>\n</ul>\n<h4 id=\"插件文档\"><a href=\"#插件文档\" class=\"headerlink\" title=\"插件文档\"></a>插件文档</h4><ul>\n<li><a href=\"https://www.tweenmax.com.cn/api/timelinemax/\">tweenmax插件文档</a> </li>\n<li><a href=\"https://github.com/zwhGithub/vue-calendar\">简单日历开发-插件</a></li>\n<li><a href=\"https://github.com/Hzy0913/mpvue-calendar\">日历开发文档</a></li>\n</ul>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><a href=\"https://regexper.com/\">正则表达式图解工具</a></li>\n<li><a href=\"https://www.iconfont.cn/search/indextag=\">阿里巴巴失量图</a></li>\n<li><a href=\"https://www.jianshu.com/p/b95227a22745\">eruda.js调试博客1</a></li>\n<li><a href=\"https://www.cnblogs.com/aisiqi-love/p/11764627.html\">eruda.js调试博客2</a></li>\n<li><a href=\"https://app.xunjiepdf.com/\">PDF转word</a></li>\n<li><a href=\"https://easy-mock.com/login\">easy-mock模拟数据工具</a></li>\n<li><a href=\"http://www.vorlonjs.com/\">vorlonjs混合开发调试工具</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/107334179\">修改host网址</a></li>\n<li><a href=\"https://www.cnblogs.com/coder-lzh/p/9232192.html\">npm环境变量配置</a></li>\n<li><a href=\"https://backgrounds.cm/\">Bulletproof background images</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/161631562\">mac外接显示器设置</a></li>\n<li><a href=\"https://blog.csdn.net/m0_55548148/article/details/115587339\">vscode安装加速</a><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span><br><span class=\"line\">内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span><br><span class=\"line\">替换连接：vscode.cdn.azure.cn</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li><a href=\"https://segmentfault.com/a/1190000013470485\">单元测试</a></li>\n<li><a href=\"https://www.mscto.com/html5/30073\">前端地图线路图</a></li>\n<li><a href=\"https://github.com/umijs/qiankun\">乾坤-微前端-git项目</a></li>\n<li><a href=\"https://juejin.cn/post/6844903507061932040\">移动端字体放大问题</a></li>\n<li><a href=\"https://www.cnblogs.com/skylar/p/4121508.html\">clientX,pageX,offsetX 图解</a></li>\n<li><a href=\"https://www.jianshu.com/p/566c66aafa22\">节流防抖</a></li>\n<li><a href=\"https://www.imooc.com/\">慕课网</a></li>\n<li><a href=\"https://b.51cto.com/index\">51CTO企业版</a></li>\n<li><a href=\"https://github.com/DMQ/mvvm\">手写vue-MVVM</a><h4 id=\"软件下载\"><a href=\"#软件下载\" class=\"headerlink\" title=\"软件下载\"></a>软件下载</h4></li>\n<li><a href=\"https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html\">罗技鼠标软件下载</a></li>\n</ul>\n<h4 id=\"bug文档\"><a href=\"#bug文档\" class=\"headerlink\" title=\"bug文档\"></a>bug文档</h4><ul>\n<li><a href=\"https://juejin.cn/post/6844903818191175687\">返回不刷新问题</a></li>\n</ul>\n"},{"title":"标签一","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签一\ntype: \"tags\"\n---","date":"2022-03-20T02:40:14.347Z","updated":"2022-03-20T02:40:14.347Z","path":"tags/index.html","_id":"cl0iw2rd70008itozalekbjmb","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"文档","date":"2018-11-16T06:30:24.000Z","comments":0,"_content":"\n#### 官方文档\n- [TS文档](https://www.tslang.cn/docs/handbook/basic-types.html)\n- [TS英文版文档](https://www.typescriptlang.org/docs/)\n- [axios文档](http://www.axios-js.com/zh-cn/docs/)\n- [fly文档](https://wendux.github.io/dist/#/doc/flyio/engine)\n- [postcss文档](https://postcss.org/)\n- [npm文档](https://docs.npmjs.com/)\n- [moment时间文档](http://momentjs.cn/docs/#/manipulating/)\n- [MDN手册](https://developer.mozilla.org/zh-CN/)\n- [lodash.js操作文档](https://www.lodashjs.com/)\n- [高德地图文档](https://lbs.amap.com/api/javascript-api/reference/map/)\n\n<!-- more -->  \n\n- [mongodb文档](https://www.mongodb.org.cn/)\n- [node-fetch文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n- [koa文档](https://koa.bootcss.com/#introduction)\n- [typescript文档](https://github.com/zhongsp/TypeScript)\n- [高德地图文档](https://lbs.amap.com/api/amap-mobile/gettingstarted)\n- [A-fram VR体验文档](https://www.techbrood.com/aframe)\n- [桌面端electron-文档](http://www.electronjs.org/docs/tutorial/macos-dock)\n- [linux命令大全-文档](https://www.linuxcool.com/cat)\n- [正则表达测-文档](https://regexper.com/)\n- [微前端-文档](https://qiankun.umijs.org/zh/cookbook)\n- [bootcdn网址](https://www.bootcdn.cn/)\n- [webpack文档](https://webpack.docschina.org/)\n- [webpack-loader文档](https://www.webpackjs.com/loaders/url-loader/)\n- [node](http://nodejs.cn/api/)\n- [react](https://reactjs.org/)\n- [schema](https://schema.org.cn/)\n- [Even博客](https://even-cxw.github.io/)\n- [nexT主题](https://theme-next.iissnan.com/getting-started.html)\n- [nexT操作文档](https://hexo.io/zh-cn/docs/)\n- [nexT操作文档-个人01](https://www.jianshu.com/p/f054333ac9e6)\n- [nexT操作文档-个人02](https://neveryu.github.io/2016/09/30/hexo-next-two/)\n- [jszip-utils](http://stuk.github.io/jszip-utils/) \n- [jsZip文档](https://stuk.github.io/jszip/documentation/examples.html)\n- [fontawesome图标库-英文版](https://fontawesome.com/)\n- [gulp官方文档](https://www.gulpjs.com.cn/docs/getting-started/quick-start/)\n- [gulp中文文档](https://github.com/nimoc/gulp-book/blob/master/chapter2.md)\n- [AnnieJS-github](https://github.com/flash2x/AnnieJS)\n- [babel中文官网](https://babel.docschina.org/)\n- [canvas-MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n- [canvas-MDN-content](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/getContext)\n- [vue-ssr官方文档](https://ssr.vuejs.org/zh/)\n- [ssr-框架](http://doc.ssr-fc.com/docs/features$started)\n- [vue-router官网](https://router.vuejs.org/zh/api/)\n- [阿里画图库](https://antv.vision/zh/)\n- [esLint官网](https://eslint.bootcss.com/docs/user-guide/configuring)\n- [antd官网](https://ant.design/index-cn)\n- [antd-git-地址](https://github.com/ant-design/ant-design/issues/19191)\n- [react-router](http://uprogrammer.cn/react-router-cn/index.html)\n- [react-router-dom个人博客](https://segmentfault.com/a/1190000039190541)\n- [react-router-dom官网]https://v5.reactrouter.com/web/api/BrowserRouter/basename-string)\n- [react-router-dom-v6版本](https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md)\n- [腾讯云文档](https://cloud.tencent.com/document/product/213/44971)\n- [百度富文本编辑器UEditor](http://fex.baidu.com/ueditor/#start-start)\n- [styled-components英文版](https://styled-components.com/docs/advanced#theming)\n- [掘金网](https://juejin.cn/)\n- [江南大学](http://wj.cmjnu.com.cn/)\n\n## 架构之路\n- [vue-loader起步](https://vue-loader.vuejs.org/zh/)\n\n#### 微信文档\n- [微信公众号订阅](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23)\n- [微信jssdk开发文档](http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html)\n- [微信签名校验地址](https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign)\n\n\n#### vue文档\n- [vue-element-admin-在线观看](https://panjiachen.github.io/vue-element-admin/#/dashboard)\n- [vue拖拽](http://www.itxst.com/vue-draggable/imj6nvze.html)\n- [vue-cli配置文档](https://cli.vuejs.org/zh/config/) \n- [vue文档](https://cn.vuejs.org/)\n- [vue3文档](https://vue3js.cn/docs/zh/guide/migration/introduction.html)\n- [vuex文档](https://vuex.vuejs.org/zh/)\n- [vue Cli](https://cli.vuejs.org/zh/guide/webpack.html)\n- [vite](https://vitejs.cn/guide/)\n\n#### UI文档\n- [vant-ui](https://youzan.github.io/vant/#/zh-CN/quickstart)   \n- [element-ui](https://element.eleme.cn/#/zh-CN/component/layout)\n- [mui-ui](https://dev.dcloud.net.cn/mui/)\n- [cube-ui](https://didi.github.io/cube-ui/#/zh-CN)\n- [ant-Desing-ui](https://ant.design/components/rate-cn/)\n- [lay-ui](https://www.layui.com/doc/)\n- [vite-ui](https://vite.wiki/zh/introduction/)\n\n#### 他人博客\n- [阮一峰flex布局](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n- [axios博客](https://segmentfault.com/a/1190000008470355)\n- [tweenmax博客](https://segmentfault.com/a/1190000007496078)\n- [weui博客](https://blog.csdn.net/gegephp/article/details/88869255)\n- [nginx-缓存设置](https://www.layui.com/)\n- [nginx文档](https://www.nginx.cn/doc/index.html)\n- [nginx-下载地址](http://nginx.org/en/download.html)\n- [SVN使用手册](https://blog.csdn.net/sinat_37812785/article/details/80243207)\n- [字符串的方法](https://www.cnblogs.com/zhangxin2540/p/7054835.html)\n- [正则表达式菜鸟文档](https://www.runoob.com/regexp/regexp-syntax.html)\n- [正则表达测试工具网址](https://c.runoob.com/front-end/854)\n- [koa的学习教程](https://chenshenhai.github.io/koa2-note/note/static/server.html)\n- [滚动元素图解](https://www.jianshu.com/p/d267456ebc0d)\n\n#### 插件文档\n- [tweenmax插件文档](https://www.tweenmax.com.cn/api/timelinemax/) \n- [简单日历开发-插件](https://github.com/zwhGithub/vue-calendar)\n- [日历开发文档](https://github.com/Hzy0913/mpvue-calendar)\n\n\n\n#### 工具\n- [正则表达式图解工具](https://regexper.com/)\n- [阿里巴巴失量图](https://www.iconfont.cn/search/indextag=)\n- [eruda.js调试博客1](https://www.jianshu.com/p/b95227a22745)\n- [eruda.js调试博客2](https://www.cnblogs.com/aisiqi-love/p/11764627.html)\n- [PDF转word](https://app.xunjiepdf.com/)\n- [easy-mock模拟数据工具](https://easy-mock.com/login)\n- [fastmock模拟数据](https://www.fastmock.site/#/projects)\n- [vorlonjs混合开发调试工具](http://www.vorlonjs.com/)\n- [修改host网址](https://zhuanlan.zhihu.com/p/107334179)\n- [npm环境变量配置](https://www.cnblogs.com/coder-lzh/p/9232192.html)\n- [Bulletproof background images](https://backgrounds.cm/)\n- [mac外接显示器设置](https://zhuanlan.zhihu.com/p/161631562)\n- [生成精灵图JSON网址](https://www.leshylabs.com/apps/sstool/)\n\n#### 学习\n- [单元测试](https://segmentfault.com/a/1190000013470485)\n- [前端地图线路图](https://www.mscto.com/html5/30073)\n- [乾坤-微前端-git项目](https://github.com/umijs/qiankun)\n- [移动端字体放大问题](https://juejin.cn/post/6844903507061932040)\n- [clientX,pageX,offsetX 图解](https://www.cnblogs.com/skylar/p/4121508.html)\n- [节流防抖](https://www.jianshu.com/p/566c66aafa22)\n- [慕课网](https://www.imooc.com/)\n- [51CTO企业版](https://b.51cto.com/index)\n- [手写vue-MVVM](https://github.com/DMQ/mvvm)\n- [计算机基础](http://www.weixueyuan.net/a/9.html)\n#### 软件下载\n- [罗技鼠标软件下载](https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html)\n\n#### bug文档\n- [返回不刷新问题](https://juejin.cn/post/6844903818191175687)\n","source":"_posts/document.md","raw":"---\ntitle: 文档\ndate: 2018-11-16 14:30:24\ncategories: 文档\ntags: [文档]\ncomments: false\n---\n\n#### 官方文档\n- [TS文档](https://www.tslang.cn/docs/handbook/basic-types.html)\n- [TS英文版文档](https://www.typescriptlang.org/docs/)\n- [axios文档](http://www.axios-js.com/zh-cn/docs/)\n- [fly文档](https://wendux.github.io/dist/#/doc/flyio/engine)\n- [postcss文档](https://postcss.org/)\n- [npm文档](https://docs.npmjs.com/)\n- [moment时间文档](http://momentjs.cn/docs/#/manipulating/)\n- [MDN手册](https://developer.mozilla.org/zh-CN/)\n- [lodash.js操作文档](https://www.lodashjs.com/)\n- [高德地图文档](https://lbs.amap.com/api/javascript-api/reference/map/)\n\n<!-- more -->  \n\n- [mongodb文档](https://www.mongodb.org.cn/)\n- [node-fetch文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n- [koa文档](https://koa.bootcss.com/#introduction)\n- [typescript文档](https://github.com/zhongsp/TypeScript)\n- [高德地图文档](https://lbs.amap.com/api/amap-mobile/gettingstarted)\n- [A-fram VR体验文档](https://www.techbrood.com/aframe)\n- [桌面端electron-文档](http://www.electronjs.org/docs/tutorial/macos-dock)\n- [linux命令大全-文档](https://www.linuxcool.com/cat)\n- [正则表达测-文档](https://regexper.com/)\n- [微前端-文档](https://qiankun.umijs.org/zh/cookbook)\n- [bootcdn网址](https://www.bootcdn.cn/)\n- [webpack文档](https://webpack.docschina.org/)\n- [webpack-loader文档](https://www.webpackjs.com/loaders/url-loader/)\n- [node](http://nodejs.cn/api/)\n- [react](https://reactjs.org/)\n- [schema](https://schema.org.cn/)\n- [Even博客](https://even-cxw.github.io/)\n- [nexT主题](https://theme-next.iissnan.com/getting-started.html)\n- [nexT操作文档](https://hexo.io/zh-cn/docs/)\n- [nexT操作文档-个人01](https://www.jianshu.com/p/f054333ac9e6)\n- [nexT操作文档-个人02](https://neveryu.github.io/2016/09/30/hexo-next-two/)\n- [jszip-utils](http://stuk.github.io/jszip-utils/) \n- [jsZip文档](https://stuk.github.io/jszip/documentation/examples.html)\n- [fontawesome图标库-英文版](https://fontawesome.com/)\n- [gulp官方文档](https://www.gulpjs.com.cn/docs/getting-started/quick-start/)\n- [gulp中文文档](https://github.com/nimoc/gulp-book/blob/master/chapter2.md)\n- [AnnieJS-github](https://github.com/flash2x/AnnieJS)\n- [babel中文官网](https://babel.docschina.org/)\n- [canvas-MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n- [canvas-MDN-content](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/getContext)\n- [vue-ssr官方文档](https://ssr.vuejs.org/zh/)\n- [ssr-框架](http://doc.ssr-fc.com/docs/features$started)\n- [vue-router官网](https://router.vuejs.org/zh/api/)\n- [阿里画图库](https://antv.vision/zh/)\n- [esLint官网](https://eslint.bootcss.com/docs/user-guide/configuring)\n- [antd官网](https://ant.design/index-cn)\n- [antd-git-地址](https://github.com/ant-design/ant-design/issues/19191)\n- [react-router](http://uprogrammer.cn/react-router-cn/index.html)\n- [react-router-dom个人博客](https://segmentfault.com/a/1190000039190541)\n- [react-router-dom官网]https://v5.reactrouter.com/web/api/BrowserRouter/basename-string)\n- [react-router-dom-v6版本](https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md)\n- [腾讯云文档](https://cloud.tencent.com/document/product/213/44971)\n- [百度富文本编辑器UEditor](http://fex.baidu.com/ueditor/#start-start)\n- [styled-components英文版](https://styled-components.com/docs/advanced#theming)\n- [掘金网](https://juejin.cn/)\n- [江南大学](http://wj.cmjnu.com.cn/)\n\n## 架构之路\n- [vue-loader起步](https://vue-loader.vuejs.org/zh/)\n\n#### 微信文档\n- [微信公众号订阅](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23)\n- [微信jssdk开发文档](http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html)\n- [微信签名校验地址](https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign)\n\n\n#### vue文档\n- [vue-element-admin-在线观看](https://panjiachen.github.io/vue-element-admin/#/dashboard)\n- [vue拖拽](http://www.itxst.com/vue-draggable/imj6nvze.html)\n- [vue-cli配置文档](https://cli.vuejs.org/zh/config/) \n- [vue文档](https://cn.vuejs.org/)\n- [vue3文档](https://vue3js.cn/docs/zh/guide/migration/introduction.html)\n- [vuex文档](https://vuex.vuejs.org/zh/)\n- [vue Cli](https://cli.vuejs.org/zh/guide/webpack.html)\n- [vite](https://vitejs.cn/guide/)\n\n#### UI文档\n- [vant-ui](https://youzan.github.io/vant/#/zh-CN/quickstart)   \n- [element-ui](https://element.eleme.cn/#/zh-CN/component/layout)\n- [mui-ui](https://dev.dcloud.net.cn/mui/)\n- [cube-ui](https://didi.github.io/cube-ui/#/zh-CN)\n- [ant-Desing-ui](https://ant.design/components/rate-cn/)\n- [lay-ui](https://www.layui.com/doc/)\n- [vite-ui](https://vite.wiki/zh/introduction/)\n\n#### 他人博客\n- [阮一峰flex布局](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n- [axios博客](https://segmentfault.com/a/1190000008470355)\n- [tweenmax博客](https://segmentfault.com/a/1190000007496078)\n- [weui博客](https://blog.csdn.net/gegephp/article/details/88869255)\n- [nginx-缓存设置](https://www.layui.com/)\n- [nginx文档](https://www.nginx.cn/doc/index.html)\n- [nginx-下载地址](http://nginx.org/en/download.html)\n- [SVN使用手册](https://blog.csdn.net/sinat_37812785/article/details/80243207)\n- [字符串的方法](https://www.cnblogs.com/zhangxin2540/p/7054835.html)\n- [正则表达式菜鸟文档](https://www.runoob.com/regexp/regexp-syntax.html)\n- [正则表达测试工具网址](https://c.runoob.com/front-end/854)\n- [koa的学习教程](https://chenshenhai.github.io/koa2-note/note/static/server.html)\n- [滚动元素图解](https://www.jianshu.com/p/d267456ebc0d)\n\n#### 插件文档\n- [tweenmax插件文档](https://www.tweenmax.com.cn/api/timelinemax/) \n- [简单日历开发-插件](https://github.com/zwhGithub/vue-calendar)\n- [日历开发文档](https://github.com/Hzy0913/mpvue-calendar)\n\n\n\n#### 工具\n- [正则表达式图解工具](https://regexper.com/)\n- [阿里巴巴失量图](https://www.iconfont.cn/search/indextag=)\n- [eruda.js调试博客1](https://www.jianshu.com/p/b95227a22745)\n- [eruda.js调试博客2](https://www.cnblogs.com/aisiqi-love/p/11764627.html)\n- [PDF转word](https://app.xunjiepdf.com/)\n- [easy-mock模拟数据工具](https://easy-mock.com/login)\n- [fastmock模拟数据](https://www.fastmock.site/#/projects)\n- [vorlonjs混合开发调试工具](http://www.vorlonjs.com/)\n- [修改host网址](https://zhuanlan.zhihu.com/p/107334179)\n- [npm环境变量配置](https://www.cnblogs.com/coder-lzh/p/9232192.html)\n- [Bulletproof background images](https://backgrounds.cm/)\n- [mac外接显示器设置](https://zhuanlan.zhihu.com/p/161631562)\n- [生成精灵图JSON网址](https://www.leshylabs.com/apps/sstool/)\n\n#### 学习\n- [单元测试](https://segmentfault.com/a/1190000013470485)\n- [前端地图线路图](https://www.mscto.com/html5/30073)\n- [乾坤-微前端-git项目](https://github.com/umijs/qiankun)\n- [移动端字体放大问题](https://juejin.cn/post/6844903507061932040)\n- [clientX,pageX,offsetX 图解](https://www.cnblogs.com/skylar/p/4121508.html)\n- [节流防抖](https://www.jianshu.com/p/566c66aafa22)\n- [慕课网](https://www.imooc.com/)\n- [51CTO企业版](https://b.51cto.com/index)\n- [手写vue-MVVM](https://github.com/DMQ/mvvm)\n- [计算机基础](http://www.weixueyuan.net/a/9.html)\n#### 软件下载\n- [罗技鼠标软件下载](https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html)\n\n#### bug文档\n- [返回不刷新问题](https://juejin.cn/post/6844903818191175687)\n","slug":"document","published":1,"updated":"2022-04-24T05:39:02.840Z","_id":"cl0iw2rcz0001itoz903m28ox","layout":"post","photos":[],"link":"","content":"<h4 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h4><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">TS文档</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/\">TS英文版文档</a></li>\n<li><a href=\"http://www.axios-js.com/zh-cn/docs/\">axios文档</a></li>\n<li><a href=\"https://wendux.github.io/dist/#/doc/flyio/engine\">fly文档</a></li>\n<li><a href=\"https://postcss.org/\">postcss文档</a></li>\n<li><a href=\"https://docs.npmjs.com/\">npm文档</a></li>\n<li><a href=\"http://momentjs.cn/docs/#/manipulating/\">moment时间文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\">MDN手册</a></li>\n<li><a href=\"https://www.lodashjs.com/\">lodash.js操作文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/javascript-api/reference/map/\">高德地图文档</a></li>\n</ul>\n<span id=\"more\"></span>  \n\n<ul>\n<li><a href=\"https://www.mongodb.org.cn/\">mongodb文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">node-fetch文档</a></li>\n<li><a href=\"https://koa.bootcss.com/#introduction\">koa文档</a></li>\n<li><a href=\"https://github.com/zhongsp/TypeScript\">typescript文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/amap-mobile/gettingstarted\">高德地图文档</a></li>\n<li><a href=\"https://www.techbrood.com/aframe\">A-fram VR体验文档</a></li>\n<li><a href=\"http://www.electronjs.org/docs/tutorial/macos-dock\">桌面端electron-文档</a></li>\n<li><a href=\"https://www.linuxcool.com/cat\">linux命令大全-文档</a></li>\n<li><a href=\"https://regexper.com/\">正则表达测-文档</a></li>\n<li><a href=\"https://qiankun.umijs.org/zh/cookbook\">微前端-文档</a></li>\n<li><a href=\"https://www.bootcdn.cn/\">bootcdn网址</a></li>\n<li><a href=\"https://webpack.docschina.org/\">webpack文档</a></li>\n<li><a href=\"https://www.webpackjs.com/loaders/url-loader/\">webpack-loader文档</a></li>\n<li><a href=\"http://nodejs.cn/api/\">node</a></li>\n<li><a href=\"https://reactjs.org/\">react</a></li>\n<li><a href=\"https://schema.org.cn/\">schema</a></li>\n<li><a href=\"https://even-cxw.github.io/\">Even博客</a></li>\n<li><a href=\"https://theme-next.iissnan.com/getting-started.html\">nexT主题</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\">nexT操作文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/f054333ac9e6\">nexT操作文档-个人01</a></li>\n<li><a href=\"https://neveryu.github.io/2016/09/30/hexo-next-two/\">nexT操作文档-个人02</a></li>\n<li><a href=\"http://stuk.github.io/jszip-utils/\">jszip-utils</a> </li>\n<li><a href=\"https://stuk.github.io/jszip/documentation/examples.html\">jsZip文档</a></li>\n<li><a href=\"https://fontawesome.com/\">fontawesome图标库-英文版</a></li>\n<li><a href=\"https://www.gulpjs.com.cn/docs/getting-started/quick-start/\">gulp官方文档</a></li>\n<li><a href=\"https://github.com/nimoc/gulp-book/blob/master/chapter2.md\">gulp中文文档</a></li>\n<li><a href=\"https://github.com/flash2x/AnnieJS\">AnnieJS-github</a></li>\n<li><a href=\"https://babel.docschina.org/\">babel中文官网</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">canvas-MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/getContext\">canvas-MDN-content</a></li>\n<li><a href=\"https://ssr.vuejs.org/zh/\">vue-ssr官方文档</a></li>\n<li><a href=\"http://doc.ssr-fc.com/docs/features$started\">ssr-框架</a></li>\n<li><a href=\"https://router.vuejs.org/zh/api/\">vue-router官网</a></li>\n<li><a href=\"https://antv.vision/zh/\">阿里画图库</a></li>\n<li><a href=\"https://eslint.bootcss.com/docs/user-guide/configuring\">esLint官网</a></li>\n<li><a href=\"https://ant.design/index-cn\">antd官网</a></li>\n<li><a href=\"https://github.com/ant-design/ant-design/issues/19191\">antd-git-地址</a></li>\n<li><a href=\"http://uprogrammer.cn/react-router-cn/index.html\">react-router</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000039190541\">react-router-dom个人博客</a></li>\n<li>[react-router-dom官网]<a href=\"https://v5.reactrouter.com/web/api/BrowserRouter/basename-string\">https://v5.reactrouter.com/web/api/BrowserRouter/basename-string</a>)</li>\n<li><a href=\"https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md\">react-router-dom-v6版本</a></li>\n<li><a href=\"https://cloud.tencent.com/document/product/213/44971\">腾讯云文档</a></li>\n<li><a href=\"http://fex.baidu.com/ueditor/#start-start\">百度富文本编辑器UEditor</a></li>\n<li><a href=\"https://styled-components.com/docs/advanced#theming\">styled-components英文版</a></li>\n<li><a href=\"https://juejin.cn/\">掘金网</a></li>\n<li><a href=\"http://wj.cmjnu.com.cn/\">江南大学</a></li>\n</ul>\n<h2 id=\"架构之路\"><a href=\"#架构之路\" class=\"headerlink\" title=\"架构之路\"></a>架构之路</h2><ul>\n<li><a href=\"https://vue-loader.vuejs.org/zh/\">vue-loader起步</a></li>\n</ul>\n<h4 id=\"微信文档\"><a href=\"#微信文档\" class=\"headerlink\" title=\"微信文档\"></a>微信文档</h4><ul>\n<li><a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23\">微信公众号订阅</a></li>\n<li><a href=\"http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html\">微信jssdk开发文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\">微信签名校验地址</a></li>\n</ul>\n<h4 id=\"vue文档\"><a href=\"#vue文档\" class=\"headerlink\" title=\"vue文档\"></a>vue文档</h4><ul>\n<li><a href=\"https://panjiachen.github.io/vue-element-admin/#/dashboard\">vue-element-admin-在线观看</a></li>\n<li><a href=\"http://www.itxst.com/vue-draggable/imj6nvze.html\">vue拖拽</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/config/\">vue-cli配置文档</a> </li>\n<li><a href=\"https://cn.vuejs.org/\">vue文档</a></li>\n<li><a href=\"https://vue3js.cn/docs/zh/guide/migration/introduction.html\">vue3文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/\">vuex文档</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/guide/webpack.html\">vue Cli</a></li>\n<li><a href=\"https://vitejs.cn/guide/\">vite</a></li>\n</ul>\n<h4 id=\"UI文档\"><a href=\"#UI文档\" class=\"headerlink\" title=\"UI文档\"></a>UI文档</h4><ul>\n<li><a href=\"https://youzan.github.io/vant/#/zh-CN/quickstart\">vant-ui</a>   </li>\n<li><a href=\"https://element.eleme.cn/#/zh-CN/component/layout\">element-ui</a></li>\n<li><a href=\"https://dev.dcloud.net.cn/mui/\">mui-ui</a></li>\n<li><a href=\"https://didi.github.io/cube-ui/#/zh-CN\">cube-ui</a></li>\n<li><a href=\"https://ant.design/components/rate-cn/\">ant-Desing-ui</a></li>\n<li><a href=\"https://www.layui.com/doc/\">lay-ui</a></li>\n<li><a href=\"https://vite.wiki/zh/introduction/\">vite-ui</a></li>\n</ul>\n<h4 id=\"他人博客\"><a href=\"#他人博客\" class=\"headerlink\" title=\"他人博客\"></a>他人博客</h4><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">阮一峰flex布局</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008470355\">axios博客</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000007496078\">tweenmax博客</a></li>\n<li><a href=\"https://blog.csdn.net/gegephp/article/details/88869255\">weui博客</a></li>\n<li><a href=\"https://www.layui.com/\">nginx-缓存设置</a></li>\n<li><a href=\"https://www.nginx.cn/doc/index.html\">nginx文档</a></li>\n<li><a href=\"http://nginx.org/en/download.html\">nginx-下载地址</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_37812785/article/details/80243207\">SVN使用手册</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangxin2540/p/7054835.html\">字符串的方法</a></li>\n<li><a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">正则表达式菜鸟文档</a></li>\n<li><a href=\"https://c.runoob.com/front-end/854\">正则表达测试工具网址</a></li>\n<li><a href=\"https://chenshenhai.github.io/koa2-note/note/static/server.html\">koa的学习教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/d267456ebc0d\">滚动元素图解</a></li>\n</ul>\n<h4 id=\"插件文档\"><a href=\"#插件文档\" class=\"headerlink\" title=\"插件文档\"></a>插件文档</h4><ul>\n<li><a href=\"https://www.tweenmax.com.cn/api/timelinemax/\">tweenmax插件文档</a> </li>\n<li><a href=\"https://github.com/zwhGithub/vue-calendar\">简单日历开发-插件</a></li>\n<li><a href=\"https://github.com/Hzy0913/mpvue-calendar\">日历开发文档</a></li>\n</ul>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><a href=\"https://regexper.com/\">正则表达式图解工具</a></li>\n<li><a href=\"https://www.iconfont.cn/search/indextag=\">阿里巴巴失量图</a></li>\n<li><a href=\"https://www.jianshu.com/p/b95227a22745\">eruda.js调试博客1</a></li>\n<li><a href=\"https://www.cnblogs.com/aisiqi-love/p/11764627.html\">eruda.js调试博客2</a></li>\n<li><a href=\"https://app.xunjiepdf.com/\">PDF转word</a></li>\n<li><a href=\"https://easy-mock.com/login\">easy-mock模拟数据工具</a></li>\n<li><a href=\"https://www.fastmock.site/#/projects\">fastmock模拟数据</a></li>\n<li><a href=\"http://www.vorlonjs.com/\">vorlonjs混合开发调试工具</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/107334179\">修改host网址</a></li>\n<li><a href=\"https://www.cnblogs.com/coder-lzh/p/9232192.html\">npm环境变量配置</a></li>\n<li><a href=\"https://backgrounds.cm/\">Bulletproof background images</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/161631562\">mac外接显示器设置</a></li>\n<li><a href=\"https://www.leshylabs.com/apps/sstool/\">生成精灵图JSON网址</a></li>\n</ul>\n<h4 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li><a href=\"https://segmentfault.com/a/1190000013470485\">单元测试</a></li>\n<li><a href=\"https://www.mscto.com/html5/30073\">前端地图线路图</a></li>\n<li><a href=\"https://github.com/umijs/qiankun\">乾坤-微前端-git项目</a></li>\n<li><a href=\"https://juejin.cn/post/6844903507061932040\">移动端字体放大问题</a></li>\n<li><a href=\"https://www.cnblogs.com/skylar/p/4121508.html\">clientX,pageX,offsetX 图解</a></li>\n<li><a href=\"https://www.jianshu.com/p/566c66aafa22\">节流防抖</a></li>\n<li><a href=\"https://www.imooc.com/\">慕课网</a></li>\n<li><a href=\"https://b.51cto.com/index\">51CTO企业版</a></li>\n<li><a href=\"https://github.com/DMQ/mvvm\">手写vue-MVVM</a></li>\n<li><a href=\"http://www.weixueyuan.net/a/9.html\">计算机基础</a><h4 id=\"软件下载\"><a href=\"#软件下载\" class=\"headerlink\" title=\"软件下载\"></a>软件下载</h4></li>\n<li><a href=\"https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html\">罗技鼠标软件下载</a></li>\n</ul>\n<h4 id=\"bug文档\"><a href=\"#bug文档\" class=\"headerlink\" title=\"bug文档\"></a>bug文档</h4><ul>\n<li><a href=\"https://juejin.cn/post/6844903818191175687\">返回不刷新问题</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h4><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">TS文档</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/\">TS英文版文档</a></li>\n<li><a href=\"http://www.axios-js.com/zh-cn/docs/\">axios文档</a></li>\n<li><a href=\"https://wendux.github.io/dist/#/doc/flyio/engine\">fly文档</a></li>\n<li><a href=\"https://postcss.org/\">postcss文档</a></li>\n<li><a href=\"https://docs.npmjs.com/\">npm文档</a></li>\n<li><a href=\"http://momentjs.cn/docs/#/manipulating/\">moment时间文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\">MDN手册</a></li>\n<li><a href=\"https://www.lodashjs.com/\">lodash.js操作文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/javascript-api/reference/map/\">高德地图文档</a></li>\n</ul>","more":"<ul>\n<li><a href=\"https://www.mongodb.org.cn/\">mongodb文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">node-fetch文档</a></li>\n<li><a href=\"https://koa.bootcss.com/#introduction\">koa文档</a></li>\n<li><a href=\"https://github.com/zhongsp/TypeScript\">typescript文档</a></li>\n<li><a href=\"https://lbs.amap.com/api/amap-mobile/gettingstarted\">高德地图文档</a></li>\n<li><a href=\"https://www.techbrood.com/aframe\">A-fram VR体验文档</a></li>\n<li><a href=\"http://www.electronjs.org/docs/tutorial/macos-dock\">桌面端electron-文档</a></li>\n<li><a href=\"https://www.linuxcool.com/cat\">linux命令大全-文档</a></li>\n<li><a href=\"https://regexper.com/\">正则表达测-文档</a></li>\n<li><a href=\"https://qiankun.umijs.org/zh/cookbook\">微前端-文档</a></li>\n<li><a href=\"https://www.bootcdn.cn/\">bootcdn网址</a></li>\n<li><a href=\"https://webpack.docschina.org/\">webpack文档</a></li>\n<li><a href=\"https://www.webpackjs.com/loaders/url-loader/\">webpack-loader文档</a></li>\n<li><a href=\"http://nodejs.cn/api/\">node</a></li>\n<li><a href=\"https://reactjs.org/\">react</a></li>\n<li><a href=\"https://schema.org.cn/\">schema</a></li>\n<li><a href=\"https://even-cxw.github.io/\">Even博客</a></li>\n<li><a href=\"https://theme-next.iissnan.com/getting-started.html\">nexT主题</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\">nexT操作文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/f054333ac9e6\">nexT操作文档-个人01</a></li>\n<li><a href=\"https://neveryu.github.io/2016/09/30/hexo-next-two/\">nexT操作文档-个人02</a></li>\n<li><a href=\"http://stuk.github.io/jszip-utils/\">jszip-utils</a> </li>\n<li><a href=\"https://stuk.github.io/jszip/documentation/examples.html\">jsZip文档</a></li>\n<li><a href=\"https://fontawesome.com/\">fontawesome图标库-英文版</a></li>\n<li><a href=\"https://www.gulpjs.com.cn/docs/getting-started/quick-start/\">gulp官方文档</a></li>\n<li><a href=\"https://github.com/nimoc/gulp-book/blob/master/chapter2.md\">gulp中文文档</a></li>\n<li><a href=\"https://github.com/flash2x/AnnieJS\">AnnieJS-github</a></li>\n<li><a href=\"https://babel.docschina.org/\">babel中文官网</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">canvas-MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/getContext\">canvas-MDN-content</a></li>\n<li><a href=\"https://ssr.vuejs.org/zh/\">vue-ssr官方文档</a></li>\n<li><a href=\"http://doc.ssr-fc.com/docs/features$started\">ssr-框架</a></li>\n<li><a href=\"https://router.vuejs.org/zh/api/\">vue-router官网</a></li>\n<li><a href=\"https://antv.vision/zh/\">阿里画图库</a></li>\n<li><a href=\"https://eslint.bootcss.com/docs/user-guide/configuring\">esLint官网</a></li>\n<li><a href=\"https://ant.design/index-cn\">antd官网</a></li>\n<li><a href=\"https://github.com/ant-design/ant-design/issues/19191\">antd-git-地址</a></li>\n<li><a href=\"http://uprogrammer.cn/react-router-cn/index.html\">react-router</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000039190541\">react-router-dom个人博客</a></li>\n<li>[react-router-dom官网]<a href=\"https://v5.reactrouter.com/web/api/BrowserRouter/basename-string\">https://v5.reactrouter.com/web/api/BrowserRouter/basename-string</a>)</li>\n<li><a href=\"https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md\">react-router-dom-v6版本</a></li>\n<li><a href=\"https://cloud.tencent.com/document/product/213/44971\">腾讯云文档</a></li>\n<li><a href=\"http://fex.baidu.com/ueditor/#start-start\">百度富文本编辑器UEditor</a></li>\n<li><a href=\"https://styled-components.com/docs/advanced#theming\">styled-components英文版</a></li>\n<li><a href=\"https://juejin.cn/\">掘金网</a></li>\n<li><a href=\"http://wj.cmjnu.com.cn/\">江南大学</a></li>\n</ul>\n<h2 id=\"架构之路\"><a href=\"#架构之路\" class=\"headerlink\" title=\"架构之路\"></a>架构之路</h2><ul>\n<li><a href=\"https://vue-loader.vuejs.org/zh/\">vue-loader起步</a></li>\n</ul>\n<h4 id=\"微信文档\"><a href=\"#微信文档\" class=\"headerlink\" title=\"微信文档\"></a>微信文档</h4><ul>\n<li><a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#23\">微信公众号订阅</a></li>\n<li><a href=\"http://caibaojian.com/wxwiki/0030551f015f01ecaa56d20b88ee3c6cb32503bf.html\">微信jssdk开发文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\">微信签名校验地址</a></li>\n</ul>\n<h4 id=\"vue文档\"><a href=\"#vue文档\" class=\"headerlink\" title=\"vue文档\"></a>vue文档</h4><ul>\n<li><a href=\"https://panjiachen.github.io/vue-element-admin/#/dashboard\">vue-element-admin-在线观看</a></li>\n<li><a href=\"http://www.itxst.com/vue-draggable/imj6nvze.html\">vue拖拽</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/config/\">vue-cli配置文档</a> </li>\n<li><a href=\"https://cn.vuejs.org/\">vue文档</a></li>\n<li><a href=\"https://vue3js.cn/docs/zh/guide/migration/introduction.html\">vue3文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh/\">vuex文档</a></li>\n<li><a href=\"https://cli.vuejs.org/zh/guide/webpack.html\">vue Cli</a></li>\n<li><a href=\"https://vitejs.cn/guide/\">vite</a></li>\n</ul>\n<h4 id=\"UI文档\"><a href=\"#UI文档\" class=\"headerlink\" title=\"UI文档\"></a>UI文档</h4><ul>\n<li><a href=\"https://youzan.github.io/vant/#/zh-CN/quickstart\">vant-ui</a>   </li>\n<li><a href=\"https://element.eleme.cn/#/zh-CN/component/layout\">element-ui</a></li>\n<li><a href=\"https://dev.dcloud.net.cn/mui/\">mui-ui</a></li>\n<li><a href=\"https://didi.github.io/cube-ui/#/zh-CN\">cube-ui</a></li>\n<li><a href=\"https://ant.design/components/rate-cn/\">ant-Desing-ui</a></li>\n<li><a href=\"https://www.layui.com/doc/\">lay-ui</a></li>\n<li><a href=\"https://vite.wiki/zh/introduction/\">vite-ui</a></li>\n</ul>\n<h4 id=\"他人博客\"><a href=\"#他人博客\" class=\"headerlink\" title=\"他人博客\"></a>他人博客</h4><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">阮一峰flex布局</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008470355\">axios博客</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000007496078\">tweenmax博客</a></li>\n<li><a href=\"https://blog.csdn.net/gegephp/article/details/88869255\">weui博客</a></li>\n<li><a href=\"https://www.layui.com/\">nginx-缓存设置</a></li>\n<li><a href=\"https://www.nginx.cn/doc/index.html\">nginx文档</a></li>\n<li><a href=\"http://nginx.org/en/download.html\">nginx-下载地址</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_37812785/article/details/80243207\">SVN使用手册</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangxin2540/p/7054835.html\">字符串的方法</a></li>\n<li><a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">正则表达式菜鸟文档</a></li>\n<li><a href=\"https://c.runoob.com/front-end/854\">正则表达测试工具网址</a></li>\n<li><a href=\"https://chenshenhai.github.io/koa2-note/note/static/server.html\">koa的学习教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/d267456ebc0d\">滚动元素图解</a></li>\n</ul>\n<h4 id=\"插件文档\"><a href=\"#插件文档\" class=\"headerlink\" title=\"插件文档\"></a>插件文档</h4><ul>\n<li><a href=\"https://www.tweenmax.com.cn/api/timelinemax/\">tweenmax插件文档</a> </li>\n<li><a href=\"https://github.com/zwhGithub/vue-calendar\">简单日历开发-插件</a></li>\n<li><a href=\"https://github.com/Hzy0913/mpvue-calendar\">日历开发文档</a></li>\n</ul>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><a href=\"https://regexper.com/\">正则表达式图解工具</a></li>\n<li><a href=\"https://www.iconfont.cn/search/indextag=\">阿里巴巴失量图</a></li>\n<li><a href=\"https://www.jianshu.com/p/b95227a22745\">eruda.js调试博客1</a></li>\n<li><a href=\"https://www.cnblogs.com/aisiqi-love/p/11764627.html\">eruda.js调试博客2</a></li>\n<li><a href=\"https://app.xunjiepdf.com/\">PDF转word</a></li>\n<li><a href=\"https://easy-mock.com/login\">easy-mock模拟数据工具</a></li>\n<li><a href=\"https://www.fastmock.site/#/projects\">fastmock模拟数据</a></li>\n<li><a href=\"http://www.vorlonjs.com/\">vorlonjs混合开发调试工具</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/107334179\">修改host网址</a></li>\n<li><a href=\"https://www.cnblogs.com/coder-lzh/p/9232192.html\">npm环境变量配置</a></li>\n<li><a href=\"https://backgrounds.cm/\">Bulletproof background images</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/161631562\">mac外接显示器设置</a></li>\n<li><a href=\"https://www.leshylabs.com/apps/sstool/\">生成精灵图JSON网址</a></li>\n</ul>\n<h4 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li><a href=\"https://segmentfault.com/a/1190000013470485\">单元测试</a></li>\n<li><a href=\"https://www.mscto.com/html5/30073\">前端地图线路图</a></li>\n<li><a href=\"https://github.com/umijs/qiankun\">乾坤-微前端-git项目</a></li>\n<li><a href=\"https://juejin.cn/post/6844903507061932040\">移动端字体放大问题</a></li>\n<li><a href=\"https://www.cnblogs.com/skylar/p/4121508.html\">clientX,pageX,offsetX 图解</a></li>\n<li><a href=\"https://www.jianshu.com/p/566c66aafa22\">节流防抖</a></li>\n<li><a href=\"https://www.imooc.com/\">慕课网</a></li>\n<li><a href=\"https://b.51cto.com/index\">51CTO企业版</a></li>\n<li><a href=\"https://github.com/DMQ/mvvm\">手写vue-MVVM</a></li>\n<li><a href=\"http://www.weixueyuan.net/a/9.html\">计算机基础</a><h4 id=\"软件下载\"><a href=\"#软件下载\" class=\"headerlink\" title=\"软件下载\"></a>软件下载</h4></li>\n<li><a href=\"https://www.logitech.com.cn/zh-cn/promo/ergosetup/logitech-options.html\">罗技鼠标软件下载</a></li>\n</ul>\n<h4 id=\"bug文档\"><a href=\"#bug文档\" class=\"headerlink\" title=\"bug文档\"></a>bug文档</h4><ul>\n<li><a href=\"https://juejin.cn/post/6844903818191175687\">返回不刷新问题</a></li>\n</ul>"},{"title":"资源下载","date":"2021-11-22T08:15:24.000Z","comments":0,"_content":"\n## 一、下载逻辑\n<font color=\"red\">【先区分是请求方式】</font>\n\n### 1、get请求\n```javascript\n// 直接打开下载\nwindow.open()\n```\n### 2、post请求\n\n1. 若后端返回数据为`application/octet-stream格式`\n- application/octet-stream: 需要转成[blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob)对象，在通过[createObjectURL](https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL)转成连接。\n```javascript\n// res为后端返回的数据流\nvar blob = new Blob(['res'],{type:'application/vnd.ms-excel'})\nvar link = URL.createObjectURL(blob)\nlet a = document.createElement(\"a\"); // 生成一个a元素\nlet event = new MouseEvent(\"click\"); // 创建一个单击事件\na.download = \"text.txt\"; // 设置图片名称\na.href = link // 将生成的URL设置为a.href属性\na.dispatchEvent(event); // 触发a的单击事件\n```\n\n<!-- more -->\n\n\n2. 若后端返回格式为`base64格式`：可能需要我们拼接前缀，对应前缀如下。\t\n- 文档\n|  文件后缀   | 文档类型  |\n|  --------  | --------  |\n| doc  | data:application/msword;base64, |\n| docx  | data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64, |\n| xls  | data:application/vnd.ms-excel;base64, |\n| xlsx  | data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64, |\n| pdf  | data:application/pdf;base64, |\n| ppt  | data:application/vnd.ms-powerpoint;base64, |\n| pptx  | data:application/vnd.openxmlformats-officedocument.presentationml.presentation;base64, |\n| txt  | data:text/plain;base64, |\n\t\n- 图片\n|  文件后缀   | 文档类型  |\n|  --------  | --------  |\n| png  | data:image/png;base64, |\n| jpg  | data:image/jpeg;base64, |\n| gif  | data:image/gif;base64, |\n| svg  | data:image/svg+xml;base64, |\n| ico  | data:image/x-icon;base64, |\n| bmp  | data:image/bmp;base64, |\n- 将拼接好的url通过a连接下载，代码如下！\n> a标签下载\n```javascript   \n\tlet a = document.createElement(\"a\"); // 生成一个a元素\n\tlet event = new MouseEvent(\"click\"); // 创建一个单击事件\n\ta.download = \"text.txt\"; // 设置图片名称\n\ta.href = link //  将生成的base64设置为a.href属性\n\ta.dispatchEvent(event); // 触发a的单击事件\n```\n> wondow.open()下载\n```javascript\n\twindo.open()\n```\n\n----\n\n## 二、Blob对象\n**1、第一个参数：**[ArrayBuffer](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)、[TypedArray](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)、[Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob)、 DOMString:javascript里的string字符串 等对象构成的 Array,\n- 为了让前端操作二进制数据才有了`ArrayBuffer`、`TypedArray`、`Uint8Array...`等对象， 那他们分别代表什么意思呢？\n- `ArrayBuffer`\n> 官网解释：二进制数据缓冲区，它是一个字节数组。 个人理解为：无法读取和操作的数据格式，只能看到他的长度看不到内容更别说来`操作此内容`，<font color=\"green\">【那我们来如何操作呢？就有了另外几个api】</font>\n```javascript\n// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！\nvar buffer = new Arraybuffer(4)\n```\n- `TypedArray`\n> 这个更是一个`烟雾弹`,TypedArray既不是全局变量也不是函数(所以休想在全局中访问到他),他是`Uint8Array...`等子类的实例化，当我们得到`TypedArray`实例后便可以轻松的使用他的api操作数据了。\n```javascript\n// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！\nvar buffer = new Arraybuffer(4)\n// 得到TypedArray 这样我就可以操作上面的数据了。\nvar TypedArray = new Uint8Array(buffer);\nTypedArray[0] = 32;\nTypedArray[1] = 64;\n```\n- `Uint8Array`\n> 数组类型表示一个8位无符号整型数组，创建时内容被初始化为0。创建完后，可以以对象的方式或使用数组下标索引的方式引用数组中的元素。\t\n```javascript \n// 创建TypedArray实例\nvar TypedArray = new Uint8Array(object);\n```\n\n**2、第二个参数：**[官方文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob)有说是[MIME](https://www.w3school.com.cn/media/media_mimeref.asp)媒体类型，白话意思:\"定义下载文件的后缀名\"\n\n**3、blob**是前端操作数据的核心对象，很多数据处理都需要他在中间做`转换`,如图！！！\n![](/images/blob.png)\n- [File](https://developer.mozilla.org/zh-CN/docs/Web/API/File)对象大家都很熟悉，当我们通过`input`框选择照片的时候， 可以抓取到file对象，当你在浏览器控制台中打开file对象时，会发现<font color=\"red\">file的原型指向blob对象</font>`file并没有定义任何api,都是继承blob对象`， 由此可见blob对象的重要性。\n\n----\n\n## 三、问题?\n### 1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高?\n> `download`的优先级更高\n> download没有定义后缀名的时候以[MIME](https://www.w3school.com.cn/media/media_mimeref.asp)为准\n```javascript\nvar blob = new Blob(['1111'],{type:'application/vnd.ms-excel'}) //定义了exce表格\na.download = \"text.txt\"; // 定义了txt文本\n```\n\n### 2、改变后缀名文件大小是否被改变?\n> 如下分别定义了`text.jpg`、`vscode.png`、`text.text`三种不同的名字,转成了我想要的格式，但是他的**数据大小是不会被改变的**\n![](/images/download/download01.png)\n\n----\n\n## 四、实际开发应用\n### 1、图片连接不在同一个域下,如何实现下载？\n1. 我们需要吧连接转成barse64然后在下载\n2. barse64可以用canvas的drawImage转成baser64,drawImage的参数是img\n3. 所以我们需要把url连接变成image对象。 代码如下！！\n```javascript\nvar img = new Image();\nimg.crossOrigin = 'anonymous'\nimg.src = '.....';\nimg.onload = function() {\n\tlet canvas = document.createElement('canvas');\n\tcanvas.width = img.width;\n\tcanvas.height = img.height;\n\tlet content = canvas.getContext('2d');\n\tcontent.drawImage(img,0,0,img.width,img.height);\n\tlet url = canvas.toDataURL();\n\twindo.open(url)\n}\n```\n\n### 2、如何实现input框手动输入内容，并下载？\n1. 第一想到（a连接、window.open）实现下载，那么如何将a连接的href指向内容呢？\n2. 可能想到了用 URL.createObjectURL()创建连接，但是该函数的参数只能是 blob\\file对象\n3. blob对象只要new一个即可，将我们要输入的文本以参数的形式传递进去，实例化一个blob对象。\n4. 通过以上想法，便可以实现这个功能。  代码如下！ 有俩种可实行方案。\n```javascript\nlet text = document.getElementById(\"text\");\nlet download = document.getElementById(\"download\");\ntext.addEventListener('input', function() {\n\tconsole.log(this.value)\n})\ndownload.addEventListener('click', function() {\n\tvar blob = new Blob(['1111'],{type:'application/vnd.ms-excel'})\n\tconsole.log(blob);\n\tlet a = document.createElement(\"a\"); // 生成一个a元素\n\tlet event = new MouseEvent(\"click\"); // 创建一个单击事件\n\ta.download = \"text.txt\"; // 设置图片名称\n\ta.href = link // 将生成的URL设置为a.href属性\n\ta.dispatchEvent(event); // 触发a的单击事件\n})\n```\n\n### 3、如何实现base64转成blob？\n- `new Blob(array,options)`, 思考:从base64中获取Blob中获取`俩个参数`，如果获取到直接new一下就完美解决！！!\n1. <font color=\"green\">[获取第二个参数]]</font>：<font color=\"red\">MIME类型很好获取 => 可以从base64前缀中读取到。\t</font>\n| base64前缀 | MIME类型 |\n| ---- | ---- |\n|   data:application/msword;base64,   |  application/msword    |\n|   data:application/vnd.ms-powerpoint;base64,   |  application/vnd.ms-powerpoint   |\n> 代码如下\n```javascript\n// mime类型\nvar mimeType = base64URI.split(',')[0].split(':')[1].split(';')[0]; \n```\n\n2. <font color=\"green\">[获取第一个参数]</font>：<font color=\"red\">将base64内容转成TypeArray</font>\n> 解码base64-api:[atob](https://developer.mozilla.org/en-US/docs/Web/API/atob)、编码base64-api:[btoa](https://developer.mozilla.org/en-US/docs/Web/API/btoa)、[charCodeAt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\n```javascript\nfunction base64ToBlob() {\n\t// mime类型\n\tvar mimeType = base64URI.split(',')[0].split(':')[1].split(';')[0]; \n\t// 解码base64\n\tvar atobBase64 = atob(base64URI.split(',')[1]); //base64 解码\n\t// 创建二进制缓冲区，只能看不能操作\n\tvar arrayBuffer = new ArrayBuffer(atobBase64.length);\n\t// 创建可以操作视图缓冲区数据的函数api - 只有这样才可以操作数据。\n\tvar typeArray01 = new Uint8Array(arrayBuffer)\n\t// 操作类型数组，将解码barse64数据插入类数组中。\n\tfor (var i = 0; i < atobBase64.length; i++) {\n\t\ttypeArray01[i] = atobBase64.charCodeAt(i);\n\t}\n\tnew Blob([typeArray01], {type: mimeType});\n}\n```\n\n\n### 4、如何实现blob转成base64？\n- [FileReader](https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader)\n```javascript\nvar reader = new FileReader();\nreader.onload = function (e) {\n\tcallback(e.target.result);\n}\nreader.readAsDataURL(blob);\n\n```","source":"_posts/download.md","raw":"---\ntitle: 资源下载\ndate: 2021-11-22 16:15:24\ncategories: javascript\ntags: [javascript]\ncomments: false\n---\n\n## 一、下载逻辑\n<font color=\"red\">【先区分是请求方式】</font>\n\n### 1、get请求\n```javascript\n// 直接打开下载\nwindow.open()\n```\n### 2、post请求\n\n1. 若后端返回数据为`application/octet-stream格式`\n- application/octet-stream: 需要转成[blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob)对象，在通过[createObjectURL](https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL)转成连接。\n```javascript\n// res为后端返回的数据流\nvar blob = new Blob(['res'],{type:'application/vnd.ms-excel'})\nvar link = URL.createObjectURL(blob)\nlet a = document.createElement(\"a\"); // 生成一个a元素\nlet event = new MouseEvent(\"click\"); // 创建一个单击事件\na.download = \"text.txt\"; // 设置图片名称\na.href = link // 将生成的URL设置为a.href属性\na.dispatchEvent(event); // 触发a的单击事件\n```\n\n<!-- more -->\n\n\n2. 若后端返回格式为`base64格式`：可能需要我们拼接前缀，对应前缀如下。\t\n- 文档\n|  文件后缀   | 文档类型  |\n|  --------  | --------  |\n| doc  | data:application/msword;base64, |\n| docx  | data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64, |\n| xls  | data:application/vnd.ms-excel;base64, |\n| xlsx  | data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64, |\n| pdf  | data:application/pdf;base64, |\n| ppt  | data:application/vnd.ms-powerpoint;base64, |\n| pptx  | data:application/vnd.openxmlformats-officedocument.presentationml.presentation;base64, |\n| txt  | data:text/plain;base64, |\n\t\n- 图片\n|  文件后缀   | 文档类型  |\n|  --------  | --------  |\n| png  | data:image/png;base64, |\n| jpg  | data:image/jpeg;base64, |\n| gif  | data:image/gif;base64, |\n| svg  | data:image/svg+xml;base64, |\n| ico  | data:image/x-icon;base64, |\n| bmp  | data:image/bmp;base64, |\n- 将拼接好的url通过a连接下载，代码如下！\n> a标签下载\n```javascript   \n\tlet a = document.createElement(\"a\"); // 生成一个a元素\n\tlet event = new MouseEvent(\"click\"); // 创建一个单击事件\n\ta.download = \"text.txt\"; // 设置图片名称\n\ta.href = link //  将生成的base64设置为a.href属性\n\ta.dispatchEvent(event); // 触发a的单击事件\n```\n> wondow.open()下载\n```javascript\n\twindo.open()\n```\n\n----\n\n## 二、Blob对象\n**1、第一个参数：**[ArrayBuffer](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)、[TypedArray](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)、[Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob)、 DOMString:javascript里的string字符串 等对象构成的 Array,\n- 为了让前端操作二进制数据才有了`ArrayBuffer`、`TypedArray`、`Uint8Array...`等对象， 那他们分别代表什么意思呢？\n- `ArrayBuffer`\n> 官网解释：二进制数据缓冲区，它是一个字节数组。 个人理解为：无法读取和操作的数据格式，只能看到他的长度看不到内容更别说来`操作此内容`，<font color=\"green\">【那我们来如何操作呢？就有了另外几个api】</font>\n```javascript\n// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！\nvar buffer = new Arraybuffer(4)\n```\n- `TypedArray`\n> 这个更是一个`烟雾弹`,TypedArray既不是全局变量也不是函数(所以休想在全局中访问到他),他是`Uint8Array...`等子类的实例化，当我们得到`TypedArray`实例后便可以轻松的使用他的api操作数据了。\n```javascript\n// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！\nvar buffer = new Arraybuffer(4)\n// 得到TypedArray 这样我就可以操作上面的数据了。\nvar TypedArray = new Uint8Array(buffer);\nTypedArray[0] = 32;\nTypedArray[1] = 64;\n```\n- `Uint8Array`\n> 数组类型表示一个8位无符号整型数组，创建时内容被初始化为0。创建完后，可以以对象的方式或使用数组下标索引的方式引用数组中的元素。\t\n```javascript \n// 创建TypedArray实例\nvar TypedArray = new Uint8Array(object);\n```\n\n**2、第二个参数：**[官方文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob)有说是[MIME](https://www.w3school.com.cn/media/media_mimeref.asp)媒体类型，白话意思:\"定义下载文件的后缀名\"\n\n**3、blob**是前端操作数据的核心对象，很多数据处理都需要他在中间做`转换`,如图！！！\n![](/images/blob.png)\n- [File](https://developer.mozilla.org/zh-CN/docs/Web/API/File)对象大家都很熟悉，当我们通过`input`框选择照片的时候， 可以抓取到file对象，当你在浏览器控制台中打开file对象时，会发现<font color=\"red\">file的原型指向blob对象</font>`file并没有定义任何api,都是继承blob对象`， 由此可见blob对象的重要性。\n\n----\n\n## 三、问题?\n### 1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高?\n> `download`的优先级更高\n> download没有定义后缀名的时候以[MIME](https://www.w3school.com.cn/media/media_mimeref.asp)为准\n```javascript\nvar blob = new Blob(['1111'],{type:'application/vnd.ms-excel'}) //定义了exce表格\na.download = \"text.txt\"; // 定义了txt文本\n```\n\n### 2、改变后缀名文件大小是否被改变?\n> 如下分别定义了`text.jpg`、`vscode.png`、`text.text`三种不同的名字,转成了我想要的格式，但是他的**数据大小是不会被改变的**\n![](/images/download/download01.png)\n\n----\n\n## 四、实际开发应用\n### 1、图片连接不在同一个域下,如何实现下载？\n1. 我们需要吧连接转成barse64然后在下载\n2. barse64可以用canvas的drawImage转成baser64,drawImage的参数是img\n3. 所以我们需要把url连接变成image对象。 代码如下！！\n```javascript\nvar img = new Image();\nimg.crossOrigin = 'anonymous'\nimg.src = '.....';\nimg.onload = function() {\n\tlet canvas = document.createElement('canvas');\n\tcanvas.width = img.width;\n\tcanvas.height = img.height;\n\tlet content = canvas.getContext('2d');\n\tcontent.drawImage(img,0,0,img.width,img.height);\n\tlet url = canvas.toDataURL();\n\twindo.open(url)\n}\n```\n\n### 2、如何实现input框手动输入内容，并下载？\n1. 第一想到（a连接、window.open）实现下载，那么如何将a连接的href指向内容呢？\n2. 可能想到了用 URL.createObjectURL()创建连接，但是该函数的参数只能是 blob\\file对象\n3. blob对象只要new一个即可，将我们要输入的文本以参数的形式传递进去，实例化一个blob对象。\n4. 通过以上想法，便可以实现这个功能。  代码如下！ 有俩种可实行方案。\n```javascript\nlet text = document.getElementById(\"text\");\nlet download = document.getElementById(\"download\");\ntext.addEventListener('input', function() {\n\tconsole.log(this.value)\n})\ndownload.addEventListener('click', function() {\n\tvar blob = new Blob(['1111'],{type:'application/vnd.ms-excel'})\n\tconsole.log(blob);\n\tlet a = document.createElement(\"a\"); // 生成一个a元素\n\tlet event = new MouseEvent(\"click\"); // 创建一个单击事件\n\ta.download = \"text.txt\"; // 设置图片名称\n\ta.href = link // 将生成的URL设置为a.href属性\n\ta.dispatchEvent(event); // 触发a的单击事件\n})\n```\n\n### 3、如何实现base64转成blob？\n- `new Blob(array,options)`, 思考:从base64中获取Blob中获取`俩个参数`，如果获取到直接new一下就完美解决！！!\n1. <font color=\"green\">[获取第二个参数]]</font>：<font color=\"red\">MIME类型很好获取 => 可以从base64前缀中读取到。\t</font>\n| base64前缀 | MIME类型 |\n| ---- | ---- |\n|   data:application/msword;base64,   |  application/msword    |\n|   data:application/vnd.ms-powerpoint;base64,   |  application/vnd.ms-powerpoint   |\n> 代码如下\n```javascript\n// mime类型\nvar mimeType = base64URI.split(',')[0].split(':')[1].split(';')[0]; \n```\n\n2. <font color=\"green\">[获取第一个参数]</font>：<font color=\"red\">将base64内容转成TypeArray</font>\n> 解码base64-api:[atob](https://developer.mozilla.org/en-US/docs/Web/API/atob)、编码base64-api:[btoa](https://developer.mozilla.org/en-US/docs/Web/API/btoa)、[charCodeAt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\n```javascript\nfunction base64ToBlob() {\n\t// mime类型\n\tvar mimeType = base64URI.split(',')[0].split(':')[1].split(';')[0]; \n\t// 解码base64\n\tvar atobBase64 = atob(base64URI.split(',')[1]); //base64 解码\n\t// 创建二进制缓冲区，只能看不能操作\n\tvar arrayBuffer = new ArrayBuffer(atobBase64.length);\n\t// 创建可以操作视图缓冲区数据的函数api - 只有这样才可以操作数据。\n\tvar typeArray01 = new Uint8Array(arrayBuffer)\n\t// 操作类型数组，将解码barse64数据插入类数组中。\n\tfor (var i = 0; i < atobBase64.length; i++) {\n\t\ttypeArray01[i] = atobBase64.charCodeAt(i);\n\t}\n\tnew Blob([typeArray01], {type: mimeType});\n}\n```\n\n\n### 4、如何实现blob转成base64？\n- [FileReader](https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader)\n```javascript\nvar reader = new FileReader();\nreader.onload = function (e) {\n\tcallback(e.target.result);\n}\nreader.readAsDataURL(blob);\n\n```","slug":"download","published":1,"updated":"2022-03-20T02:40:14.337Z","_id":"cl0iw2rd30003itozc9lth5p8","layout":"post","photos":[],"link":"","content":"<h2 id=\"一、下载逻辑\"><a href=\"#一、下载逻辑\" class=\"headerlink\" title=\"一、下载逻辑\"></a>一、下载逻辑</h2><p><font color=\"red\">【先区分是请求方式】</font></p>\n<h3 id=\"1、get请求\"><a href=\"#1、get请求\" class=\"headerlink\" title=\"1、get请求\"></a>1、get请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接打开下载</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、post请求\"><a href=\"#2、post请求\" class=\"headerlink\" title=\"2、post请求\"></a>2、post请求</h3><ol>\n<li>若后端返回数据为<code>application/octet-stream格式</code></li>\n</ol>\n<ul>\n<li>application/octet-stream: 需要转成<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\">blob</a>对象，在通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL\">createObjectURL</a>转成连接。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// res为后端返回的数据流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"string\">&#x27;res&#x27;</span>],&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;application/vnd.ms-excel&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> link = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 生成一个a元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">MouseEvent</span>(<span class=\"string\">&quot;click&quot;</span>); <span class=\"comment\">// 创建一个单击事件</span></span><br><span class=\"line\">a.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 设置图片名称</span></span><br><span class=\"line\">a.<span class=\"property\">href</span> = link <span class=\"comment\">// 将生成的URL设置为a.href属性</span></span><br><span class=\"line\">a.<span class=\"title function_\">dispatchEvent</span>(event); <span class=\"comment\">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n\n<ol start=\"2\">\n<li>若后端返回格式为<code>base64格式</code>：可能需要我们拼接前缀，对应前缀如下。    </li>\n</ol>\n<ul>\n<li>文档<table>\n<thead>\n<tr>\n<th>文件后缀</th>\n<th>文档类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>doc</td>\n<td>data:application/msword;base64,</td>\n</tr>\n<tr>\n<td>docx</td>\n<td>data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,</td>\n</tr>\n<tr>\n<td>xls</td>\n<td>data:application/vnd.ms-excel;base64,</td>\n</tr>\n<tr>\n<td>xlsx</td>\n<td>data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,</td>\n</tr>\n<tr>\n<td>pdf</td>\n<td>data:application/pdf;base64,</td>\n</tr>\n<tr>\n<td>ppt</td>\n<td>data:application/vnd.ms-powerpoint;base64,</td>\n</tr>\n<tr>\n<td>pptx</td>\n<td>data:application/vnd.openxmlformats-officedocument.presentationml.presentation;base64,</td>\n</tr>\n<tr>\n<td>txt</td>\n<td>data:text/plain;base64,</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li>图片<table>\n<thead>\n<tr>\n<th>文件后缀</th>\n<th>文档类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>png</td>\n<td>data:image/png;base64,</td>\n</tr>\n<tr>\n<td>jpg</td>\n<td>data:image/jpeg;base64,</td>\n</tr>\n<tr>\n<td>gif</td>\n<td>data:image/gif;base64,</td>\n</tr>\n<tr>\n<td>svg</td>\n<td>data:image/svg+xml;base64,</td>\n</tr>\n<tr>\n<td>ico</td>\n<td>data:image/x-icon;base64,</td>\n</tr>\n<tr>\n<td>bmp</td>\n<td>data:image/bmp;base64,</td>\n</tr>\n</tbody></table>\n</li>\n<li>将拼接好的url通过a连接下载，代码如下！<blockquote>\n<p>a标签下载</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 生成一个a元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">MouseEvent</span>(<span class=\"string\">&quot;click&quot;</span>); <span class=\"comment\">// 创建一个单击事件</span></span><br><span class=\"line\">a.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 设置图片名称</span></span><br><span class=\"line\">a.<span class=\"property\">href</span> = link <span class=\"comment\">//  将生成的base64设置为a.href属性</span></span><br><span class=\"line\">a.<span class=\"title function_\">dispatchEvent</span>(event); <span class=\"comment\">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wondow.open()下载</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windo.<span class=\"title function_\">open</span>()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"二、Blob对象\"><a href=\"#二、Blob对象\" class=\"headerlink\" title=\"二、Blob对象\"></a>二、Blob对象</h2><p><strong>1、第一个参数：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\">Blob</a>、 DOMString:javascript里的string字符串 等对象构成的 Array,</p>\n<ul>\n<li>为了让前端操作二进制数据才有了<code>ArrayBuffer</code>、<code>TypedArray</code>、<code>Uint8Array...</code>等对象， 那他们分别代表什么意思呢？</li>\n<li><code>ArrayBuffer</code><blockquote>\n<p>官网解释：二进制数据缓冲区，它是一个字节数组。 个人理解为：无法读取和操作的数据格式，只能看到他的长度看不到内容更别说来<code>操作此内容</code>，<font color=\"green\">【那我们来如何操作呢？就有了另外几个api】</font></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Arraybuffer</span>(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></li>\n<li><code>TypedArray</code><blockquote>\n<p>这个更是一个<code>烟雾弹</code>,TypedArray既不是全局变量也不是函数(所以休想在全局中访问到他),他是<code>Uint8Array...</code>等子类的实例化，当我们得到<code>TypedArray</code>实例后便可以轻松的使用他的api操作数据了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Arraybuffer</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// 得到TypedArray 这样我就可以操作上面的数据了。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TypedArray</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(buffer);</span><br><span class=\"line\"><span class=\"title class_\">TypedArray</span>[<span class=\"number\">0</span>] = <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"title class_\">TypedArray</span>[<span class=\"number\">1</span>] = <span class=\"number\">64</span>;</span><br></pre></td></tr></table></figure></li>\n<li><code>Uint8Array</code><blockquote>\n<p>数组类型表示一个8位无符号整型数组，创建时内容被初始化为0。创建完后，可以以对象的方式或使用数组下标索引的方式引用数组中的元素。    </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建TypedArray实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TypedArray</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(object);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>2、第二个参数：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\">官方文档</a>有说是<a href=\"https://www.w3school.com.cn/media/media_mimeref.asp\">MIME</a>媒体类型，白话意思:”定义下载文件的后缀名”</p>\n<p><strong>3、blob</strong>是前端操作数据的核心对象，很多数据处理都需要他在中间做<code>转换</code>,如图！！！<br><img src=\"/images/blob.png\"></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\">File</a>对象大家都很熟悉，当我们通过<code>input</code>框选择照片的时候， 可以抓取到file对象，当你在浏览器控制台中打开file对象时，会发现<font color=\"red\">file的原型指向blob对象</font><code>file并没有定义任何api,都是继承blob对象</code>， 由此可见blob对象的重要性。</li>\n</ul>\n<hr>\n<h2 id=\"三、问题\"><a href=\"#三、问题\" class=\"headerlink\" title=\"三、问题?\"></a>三、问题?</h2><h3 id=\"1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高\"><a href=\"#1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高\" class=\"headerlink\" title=\"1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高?\"></a>1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高?</h3><blockquote>\n<p><code>download</code>的优先级更高<br>download没有定义后缀名的时候以<a href=\"https://www.w3school.com.cn/media/media_mimeref.asp\">MIME</a>为准</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"string\">&#x27;1111&#x27;</span>],&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;application/vnd.ms-excel&#x27;</span>&#125;) <span class=\"comment\">//定义了exce表格</span></span><br><span class=\"line\">a.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 定义了txt文本</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、改变后缀名文件大小是否被改变\"><a href=\"#2、改变后缀名文件大小是否被改变\" class=\"headerlink\" title=\"2、改变后缀名文件大小是否被改变?\"></a>2、改变后缀名文件大小是否被改变?</h3><blockquote>\n<p>如下分别定义了<code>text.jpg</code>、<code>vscode.png</code>、<code>text.text</code>三种不同的名字,转成了我想要的格式，但是他的<strong>数据大小是不会被改变的</strong><br><img src=\"/images/download/download01.png\"></p>\n</blockquote>\n<hr>\n<h2 id=\"四、实际开发应用\"><a href=\"#四、实际开发应用\" class=\"headerlink\" title=\"四、实际开发应用\"></a>四、实际开发应用</h2><h3 id=\"1、图片连接不在同一个域下-如何实现下载？\"><a href=\"#1、图片连接不在同一个域下-如何实现下载？\" class=\"headerlink\" title=\"1、图片连接不在同一个域下,如何实现下载？\"></a>1、图片连接不在同一个域下,如何实现下载？</h3><ol>\n<li>我们需要吧连接转成barse64然后在下载</li>\n<li>barse64可以用canvas的drawImage转成baser64,drawImage的参数是img</li>\n<li>所以我们需要把url连接变成image对象。 代码如下！！<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">img.<span class=\"property\">crossOrigin</span> = <span class=\"string\">&#x27;anonymous&#x27;</span></span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&#x27;.....&#x27;</span>;</span><br><span class=\"line\">img.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">\tcanvas.<span class=\"property\">width</span> = img.<span class=\"property\">width</span>;</span><br><span class=\"line\">\tcanvas.<span class=\"property\">height</span> = img.<span class=\"property\">height</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> content = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">\tcontent.<span class=\"title function_\">drawImage</span>(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,img.<span class=\"property\">width</span>,img.<span class=\"property\">height</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> url = canvas.<span class=\"title function_\">toDataURL</span>();</span><br><span class=\"line\">\twindo.<span class=\"title function_\">open</span>(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2、如何实现input框手动输入内容，并下载？\"><a href=\"#2、如何实现input框手动输入内容，并下载？\" class=\"headerlink\" title=\"2、如何实现input框手动输入内容，并下载？\"></a>2、如何实现input框手动输入内容，并下载？</h3><ol>\n<li>第一想到（a连接、window.open）实现下载，那么如何将a连接的href指向内容呢？</li>\n<li>可能想到了用 URL.createObjectURL()创建连接，但是该函数的参数只能是 blob\\file对象</li>\n<li>blob对象只要new一个即可，将我们要输入的文本以参数的形式传递进去，实例化一个blob对象。</li>\n<li>通过以上想法，便可以实现这个功能。  代码如下！ 有俩种可实行方案。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> download = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;download&quot;</span>);</span><br><span class=\"line\">text.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">download.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"string\">&#x27;1111&#x27;</span>],&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;application/vnd.ms-excel&#x27;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(blob);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 生成一个a元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">MouseEvent</span>(<span class=\"string\">&quot;click&quot;</span>); <span class=\"comment\">// 创建一个单击事件</span></span><br><span class=\"line\">\ta.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 设置图片名称</span></span><br><span class=\"line\">\ta.<span class=\"property\">href</span> = link <span class=\"comment\">// 将生成的URL设置为a.href属性</span></span><br><span class=\"line\">\ta.<span class=\"title function_\">dispatchEvent</span>(event); <span class=\"comment\">// 触发a的单击事件</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3、如何实现base64转成blob？\"><a href=\"#3、如何实现base64转成blob？\" class=\"headerlink\" title=\"3、如何实现base64转成blob？\"></a>3、如何实现base64转成blob？</h3><ul>\n<li><code>new Blob(array,options)</code>, 思考:从base64中获取Blob中获取<code>俩个参数</code>，如果获取到直接new一下就完美解决！！!</li>\n</ul>\n<ol>\n<li><p><font color=\"green\">[获取第二个参数]]</font>：<font color=\"red\">MIME类型很好获取 =&gt; 可以从base64前缀中读取到。    </font></p>\n<table>\n<thead>\n<tr>\n<th>base64前缀</th>\n<th>MIME类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>data:application/msword;base64,</td>\n<td>application/msword</td>\n</tr>\n<tr>\n<td>data:application/vnd.ms-powerpoint;base64,</td>\n<td>application/vnd.ms-powerpoint</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>代码如下</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mime类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mimeType = base64URI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>)[<span class=\"number\">0</span>]; </span><br></pre></td></tr></table></figure></li>\n<li><p><font color=\"green\">[获取第一个参数]</font>：<font color=\"red\">将base64内容转成TypeArray</font></p>\n<blockquote>\n<p>解码base64-api:<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/atob\">atob</a>、编码base64-api:<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/btoa\">btoa</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\">charCodeAt</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">base64ToBlob</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// mime类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mimeType = base64URI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>)[<span class=\"number\">0</span>]; </span><br><span class=\"line\">\t<span class=\"comment\">// 解码base64</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> atobBase64 = <span class=\"title function_\">atob</span>(base64URI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">1</span>]); <span class=\"comment\">//base64 解码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 创建二进制缓冲区，只能看不能操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arrayBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(atobBase64.<span class=\"property\">length</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 创建可以操作视图缓冲区数据的函数api - 只有这样才可以操作数据。</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> typeArray01 = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(arrayBuffer)</span><br><span class=\"line\">\t<span class=\"comment\">// 操作类型数组，将解码barse64数据插入类数组中。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; atobBase64.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\ttypeArray01[i] = atobBase64.<span class=\"title function_\">charCodeAt</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([typeArray01], &#123;<span class=\"attr\">type</span>: mimeType&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"4、如何实现blob转成base64？\"><a href=\"#4、如何实现blob转成base64？\" class=\"headerlink\" title=\"4、如何实现blob转成base64？\"></a>4、如何实现blob转成base64？</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\">FileReader</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">callback</span>(e.<span class=\"property\">target</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.<span class=\"title function_\">readAsDataURL</span>(blob);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、下载逻辑\"><a href=\"#一、下载逻辑\" class=\"headerlink\" title=\"一、下载逻辑\"></a>一、下载逻辑</h2><p><font color=\"red\">【先区分是请求方式】</font></p>\n<h3 id=\"1、get请求\"><a href=\"#1、get请求\" class=\"headerlink\" title=\"1、get请求\"></a>1、get请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接打开下载</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、post请求\"><a href=\"#2、post请求\" class=\"headerlink\" title=\"2、post请求\"></a>2、post请求</h3><ol>\n<li>若后端返回数据为<code>application/octet-stream格式</code></li>\n</ol>\n<ul>\n<li>application/octet-stream: 需要转成<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\">blob</a>对象，在通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL\">createObjectURL</a>转成连接。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// res为后端返回的数据流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"string\">&#x27;res&#x27;</span>],&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;application/vnd.ms-excel&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> link = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 生成一个a元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">MouseEvent</span>(<span class=\"string\">&quot;click&quot;</span>); <span class=\"comment\">// 创建一个单击事件</span></span><br><span class=\"line\">a.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 设置图片名称</span></span><br><span class=\"line\">a.<span class=\"property\">href</span> = link <span class=\"comment\">// 将生成的URL设置为a.href属性</span></span><br><span class=\"line\">a.<span class=\"title function_\">dispatchEvent</span>(event); <span class=\"comment\">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure></li>\n</ul>","more":"<ol start=\"2\">\n<li>若后端返回格式为<code>base64格式</code>：可能需要我们拼接前缀，对应前缀如下。    </li>\n</ol>\n<ul>\n<li>文档<table>\n<thead>\n<tr>\n<th>文件后缀</th>\n<th>文档类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>doc</td>\n<td>data:application/msword;base64,</td>\n</tr>\n<tr>\n<td>docx</td>\n<td>data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,</td>\n</tr>\n<tr>\n<td>xls</td>\n<td>data:application/vnd.ms-excel;base64,</td>\n</tr>\n<tr>\n<td>xlsx</td>\n<td>data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,</td>\n</tr>\n<tr>\n<td>pdf</td>\n<td>data:application/pdf;base64,</td>\n</tr>\n<tr>\n<td>ppt</td>\n<td>data:application/vnd.ms-powerpoint;base64,</td>\n</tr>\n<tr>\n<td>pptx</td>\n<td>data:application/vnd.openxmlformats-officedocument.presentationml.presentation;base64,</td>\n</tr>\n<tr>\n<td>txt</td>\n<td>data:text/plain;base64,</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li>图片<table>\n<thead>\n<tr>\n<th>文件后缀</th>\n<th>文档类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>png</td>\n<td>data:image/png;base64,</td>\n</tr>\n<tr>\n<td>jpg</td>\n<td>data:image/jpeg;base64,</td>\n</tr>\n<tr>\n<td>gif</td>\n<td>data:image/gif;base64,</td>\n</tr>\n<tr>\n<td>svg</td>\n<td>data:image/svg+xml;base64,</td>\n</tr>\n<tr>\n<td>ico</td>\n<td>data:image/x-icon;base64,</td>\n</tr>\n<tr>\n<td>bmp</td>\n<td>data:image/bmp;base64,</td>\n</tr>\n</tbody></table>\n</li>\n<li>将拼接好的url通过a连接下载，代码如下！<blockquote>\n<p>a标签下载</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 生成一个a元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">MouseEvent</span>(<span class=\"string\">&quot;click&quot;</span>); <span class=\"comment\">// 创建一个单击事件</span></span><br><span class=\"line\">a.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 设置图片名称</span></span><br><span class=\"line\">a.<span class=\"property\">href</span> = link <span class=\"comment\">//  将生成的base64设置为a.href属性</span></span><br><span class=\"line\">a.<span class=\"title function_\">dispatchEvent</span>(event); <span class=\"comment\">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wondow.open()下载</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windo.<span class=\"title function_\">open</span>()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"二、Blob对象\"><a href=\"#二、Blob对象\" class=\"headerlink\" title=\"二、Blob对象\"></a>二、Blob对象</h2><p><strong>1、第一个参数：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\">Blob</a>、 DOMString:javascript里的string字符串 等对象构成的 Array,</p>\n<ul>\n<li>为了让前端操作二进制数据才有了<code>ArrayBuffer</code>、<code>TypedArray</code>、<code>Uint8Array...</code>等对象， 那他们分别代表什么意思呢？</li>\n<li><code>ArrayBuffer</code><blockquote>\n<p>官网解释：二进制数据缓冲区，它是一个字节数组。 个人理解为：无法读取和操作的数据格式，只能看到他的长度看不到内容更别说来<code>操作此内容</code>，<font color=\"green\">【那我们来如何操作呢？就有了另外几个api】</font></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Arraybuffer</span>(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></li>\n<li><code>TypedArray</code><blockquote>\n<p>这个更是一个<code>烟雾弹</code>,TypedArray既不是全局变量也不是函数(所以休想在全局中访问到他),他是<code>Uint8Array...</code>等子类的实例化，当我们得到<code>TypedArray</code>实例后便可以轻松的使用他的api操作数据了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义长度为4的数据容器, 哈哈，这里只能看不能有任何操作！</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Arraybuffer</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// 得到TypedArray 这样我就可以操作上面的数据了。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TypedArray</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(buffer);</span><br><span class=\"line\"><span class=\"title class_\">TypedArray</span>[<span class=\"number\">0</span>] = <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"title class_\">TypedArray</span>[<span class=\"number\">1</span>] = <span class=\"number\">64</span>;</span><br></pre></td></tr></table></figure></li>\n<li><code>Uint8Array</code><blockquote>\n<p>数组类型表示一个8位无符号整型数组，创建时内容被初始化为0。创建完后，可以以对象的方式或使用数组下标索引的方式引用数组中的元素。    </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建TypedArray实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TypedArray</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(object);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>2、第二个参数：</strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\">官方文档</a>有说是<a href=\"https://www.w3school.com.cn/media/media_mimeref.asp\">MIME</a>媒体类型，白话意思:”定义下载文件的后缀名”</p>\n<p><strong>3、blob</strong>是前端操作数据的核心对象，很多数据处理都需要他在中间做<code>转换</code>,如图！！！<br><img src=\"/images/blob.png\"></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\">File</a>对象大家都很熟悉，当我们通过<code>input</code>框选择照片的时候， 可以抓取到file对象，当你在浏览器控制台中打开file对象时，会发现<font color=\"red\">file的原型指向blob对象</font><code>file并没有定义任何api,都是继承blob对象</code>， 由此可见blob对象的重要性。</li>\n</ul>\n<hr>\n<h2 id=\"三、问题\"><a href=\"#三、问题\" class=\"headerlink\" title=\"三、问题?\"></a>三、问题?</h2><h3 id=\"1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高\"><a href=\"#1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高\" class=\"headerlink\" title=\"1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高?\"></a>1、blob对象MIME参数可以定义后缀名，a标签的download也可以定义后缀名，哪个优先级更高?</h3><blockquote>\n<p><code>download</code>的优先级更高<br>download没有定义后缀名的时候以<a href=\"https://www.w3school.com.cn/media/media_mimeref.asp\">MIME</a>为准</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"string\">&#x27;1111&#x27;</span>],&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;application/vnd.ms-excel&#x27;</span>&#125;) <span class=\"comment\">//定义了exce表格</span></span><br><span class=\"line\">a.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 定义了txt文本</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、改变后缀名文件大小是否被改变\"><a href=\"#2、改变后缀名文件大小是否被改变\" class=\"headerlink\" title=\"2、改变后缀名文件大小是否被改变?\"></a>2、改变后缀名文件大小是否被改变?</h3><blockquote>\n<p>如下分别定义了<code>text.jpg</code>、<code>vscode.png</code>、<code>text.text</code>三种不同的名字,转成了我想要的格式，但是他的<strong>数据大小是不会被改变的</strong><br><img src=\"/images/download/download01.png\"></p>\n</blockquote>\n<hr>\n<h2 id=\"四、实际开发应用\"><a href=\"#四、实际开发应用\" class=\"headerlink\" title=\"四、实际开发应用\"></a>四、实际开发应用</h2><h3 id=\"1、图片连接不在同一个域下-如何实现下载？\"><a href=\"#1、图片连接不在同一个域下-如何实现下载？\" class=\"headerlink\" title=\"1、图片连接不在同一个域下,如何实现下载？\"></a>1、图片连接不在同一个域下,如何实现下载？</h3><ol>\n<li>我们需要吧连接转成barse64然后在下载</li>\n<li>barse64可以用canvas的drawImage转成baser64,drawImage的参数是img</li>\n<li>所以我们需要把url连接变成image对象。 代码如下！！<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">img.<span class=\"property\">crossOrigin</span> = <span class=\"string\">&#x27;anonymous&#x27;</span></span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&#x27;.....&#x27;</span>;</span><br><span class=\"line\">img.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">\tcanvas.<span class=\"property\">width</span> = img.<span class=\"property\">width</span>;</span><br><span class=\"line\">\tcanvas.<span class=\"property\">height</span> = img.<span class=\"property\">height</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> content = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">\tcontent.<span class=\"title function_\">drawImage</span>(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,img.<span class=\"property\">width</span>,img.<span class=\"property\">height</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> url = canvas.<span class=\"title function_\">toDataURL</span>();</span><br><span class=\"line\">\twindo.<span class=\"title function_\">open</span>(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2、如何实现input框手动输入内容，并下载？\"><a href=\"#2、如何实现input框手动输入内容，并下载？\" class=\"headerlink\" title=\"2、如何实现input框手动输入内容，并下载？\"></a>2、如何实现input框手动输入内容，并下载？</h3><ol>\n<li>第一想到（a连接、window.open）实现下载，那么如何将a连接的href指向内容呢？</li>\n<li>可能想到了用 URL.createObjectURL()创建连接，但是该函数的参数只能是 blob\\file对象</li>\n<li>blob对象只要new一个即可，将我们要输入的文本以参数的形式传递进去，实例化一个blob对象。</li>\n<li>通过以上想法，便可以实现这个功能。  代码如下！ 有俩种可实行方案。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> download = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;download&quot;</span>);</span><br><span class=\"line\">text.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">download.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"string\">&#x27;1111&#x27;</span>],&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;application/vnd.ms-excel&#x27;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(blob);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 生成一个a元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">MouseEvent</span>(<span class=\"string\">&quot;click&quot;</span>); <span class=\"comment\">// 创建一个单击事件</span></span><br><span class=\"line\">\ta.<span class=\"property\">download</span> = <span class=\"string\">&quot;text.txt&quot;</span>; <span class=\"comment\">// 设置图片名称</span></span><br><span class=\"line\">\ta.<span class=\"property\">href</span> = link <span class=\"comment\">// 将生成的URL设置为a.href属性</span></span><br><span class=\"line\">\ta.<span class=\"title function_\">dispatchEvent</span>(event); <span class=\"comment\">// 触发a的单击事件</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3、如何实现base64转成blob？\"><a href=\"#3、如何实现base64转成blob？\" class=\"headerlink\" title=\"3、如何实现base64转成blob？\"></a>3、如何实现base64转成blob？</h3><ul>\n<li><code>new Blob(array,options)</code>, 思考:从base64中获取Blob中获取<code>俩个参数</code>，如果获取到直接new一下就完美解决！！!</li>\n</ul>\n<ol>\n<li><p><font color=\"green\">[获取第二个参数]]</font>：<font color=\"red\">MIME类型很好获取 =&gt; 可以从base64前缀中读取到。    </font></p>\n<table>\n<thead>\n<tr>\n<th>base64前缀</th>\n<th>MIME类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>data:application/msword;base64,</td>\n<td>application/msword</td>\n</tr>\n<tr>\n<td>data:application/vnd.ms-powerpoint;base64,</td>\n<td>application/vnd.ms-powerpoint</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>代码如下</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mime类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mimeType = base64URI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>)[<span class=\"number\">0</span>]; </span><br></pre></td></tr></table></figure></li>\n<li><p><font color=\"green\">[获取第一个参数]</font>：<font color=\"red\">将base64内容转成TypeArray</font></p>\n<blockquote>\n<p>解码base64-api:<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/atob\">atob</a>、编码base64-api:<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/btoa\">btoa</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\">charCodeAt</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">base64ToBlob</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// mime类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mimeType = base64URI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>)[<span class=\"number\">0</span>]; </span><br><span class=\"line\">\t<span class=\"comment\">// 解码base64</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> atobBase64 = <span class=\"title function_\">atob</span>(base64URI.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">1</span>]); <span class=\"comment\">//base64 解码</span></span><br><span class=\"line\">\t<span class=\"comment\">// 创建二进制缓冲区，只能看不能操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arrayBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(atobBase64.<span class=\"property\">length</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 创建可以操作视图缓冲区数据的函数api - 只有这样才可以操作数据。</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> typeArray01 = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(arrayBuffer)</span><br><span class=\"line\">\t<span class=\"comment\">// 操作类型数组，将解码barse64数据插入类数组中。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; atobBase64.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\ttypeArray01[i] = atobBase64.<span class=\"title function_\">charCodeAt</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([typeArray01], &#123;<span class=\"attr\">type</span>: mimeType&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"4、如何实现blob转成base64？\"><a href=\"#4、如何实现blob转成base64？\" class=\"headerlink\" title=\"4、如何实现blob转成base64？\"></a>4、如何实现blob转成base64？</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\">FileReader</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">callback</span>(e.<span class=\"property\">target</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.<span class=\"title function_\">readAsDataURL</span>(blob);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"eval() 与 new Function()","date":"2021-12-02T08:15:24.000Z","comments":0,"_content":"\n> 俩者其实根本没有可比性，只不过都是将传入的字符串当做 JavaScript 代码进行执行。所以这篇文章并不会很长。\n\n## [eval()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)\n- 是否有这样需求，一个`'function add(a,b) {retrun a+b}'`字符串传递给你，让你执行里面的函数，\n```javascript\n// 后端返回 字符串函数\nlet addstr =  'function add(a,b) {retrun a+b}'\neval(addstr); // 相当于生命函数add\nadd(); // 执行add函数\n```\n- 或者给你抛出一个变量`a = add`或 `a = sum`,`a`是可变的，分别执行add函数，或sum函数。\n```javascript\nfunction a() {\n    console.log('我是a函数')\n}\nfunction b() {\n    console.log('我是b函数')\n}\nlet funName = 'a';\neval(funName+'()') // 字符串拼接成 => a();\n// 或者 第二种\neval('('+funName+')')(); \n```\n> 第二种大家可能不理解，为什么要加()\n> 1. 字符串拼接后相当于执行了eval里面的`function a() {console.log('我是a函数')}`\n> 2. `function a() {console.log('我是a函数')}()`这样调用肯定报错，所以要在函数外面加一下`（）`\n> 3. `(function a() {console.log('我是a函数')})()`\n\n<!--more-->\n\n## [new Function()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function)\n\n- 他的使用跟eval还是有一定的差异。\n> `所有的`参数类型都是`string`，最后一个代表着函数体里要执行的内容，切记`多个表达式`要用`;`分开;\n\n```javascript\n// 声明一个函数普通写法\nfunction add(a,b) {\n    console.log('我是add函数')\n    return a + b;\n}\n// 使用new Function（）声明一个sum函数,实现跟add一样的功能\nlet sum = new Function('a','b',\"console.log('我是sum函数');return a+b;\")\nsum(1,2) == add(1,2); // true;\n```\n\n## 区别\n\n- eval中的代码执行时的作用域为当前作用域。它可以访问到函数中的局部变量。\n- new Function中的代码执行时的作用域为全局作用域，不论它的在哪个地方调用的。所以它访问的是全局变量a。它根本无法访问b函数内的局部变量。\n\n```javascript\nvar a = 'global scope'\nfunction b(){\n    var a = 'local scope'\n    eval('console.log(a)') //local scope\n    (new Function('','console.log(a)'))() //global scope\n}\nb()\n```","source":"_posts/eval_Function.md","raw":"---\ntitle: eval() 与 new Function()\ndate: 2021-12-02 16:15:24\ncategories: javascript\ntags: [javascript]\ncomments: false\n---\n\n> 俩者其实根本没有可比性，只不过都是将传入的字符串当做 JavaScript 代码进行执行。所以这篇文章并不会很长。\n\n## [eval()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)\n- 是否有这样需求，一个`'function add(a,b) {retrun a+b}'`字符串传递给你，让你执行里面的函数，\n```javascript\n// 后端返回 字符串函数\nlet addstr =  'function add(a,b) {retrun a+b}'\neval(addstr); // 相当于生命函数add\nadd(); // 执行add函数\n```\n- 或者给你抛出一个变量`a = add`或 `a = sum`,`a`是可变的，分别执行add函数，或sum函数。\n```javascript\nfunction a() {\n    console.log('我是a函数')\n}\nfunction b() {\n    console.log('我是b函数')\n}\nlet funName = 'a';\neval(funName+'()') // 字符串拼接成 => a();\n// 或者 第二种\neval('('+funName+')')(); \n```\n> 第二种大家可能不理解，为什么要加()\n> 1. 字符串拼接后相当于执行了eval里面的`function a() {console.log('我是a函数')}`\n> 2. `function a() {console.log('我是a函数')}()`这样调用肯定报错，所以要在函数外面加一下`（）`\n> 3. `(function a() {console.log('我是a函数')})()`\n\n<!--more-->\n\n## [new Function()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function)\n\n- 他的使用跟eval还是有一定的差异。\n> `所有的`参数类型都是`string`，最后一个代表着函数体里要执行的内容，切记`多个表达式`要用`;`分开;\n\n```javascript\n// 声明一个函数普通写法\nfunction add(a,b) {\n    console.log('我是add函数')\n    return a + b;\n}\n// 使用new Function（）声明一个sum函数,实现跟add一样的功能\nlet sum = new Function('a','b',\"console.log('我是sum函数');return a+b;\")\nsum(1,2) == add(1,2); // true;\n```\n\n## 区别\n\n- eval中的代码执行时的作用域为当前作用域。它可以访问到函数中的局部变量。\n- new Function中的代码执行时的作用域为全局作用域，不论它的在哪个地方调用的。所以它访问的是全局变量a。它根本无法访问b函数内的局部变量。\n\n```javascript\nvar a = 'global scope'\nfunction b(){\n    var a = 'local scope'\n    eval('console.log(a)') //local scope\n    (new Function('','console.log(a)'))() //global scope\n}\nb()\n```","slug":"eval-Function","published":1,"updated":"2022-03-20T02:40:14.338Z","_id":"cl0iw2rd60007itozauhz9go7","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>俩者其实根本没有可比性，只不过都是将传入的字符串当做 JavaScript 代码进行执行。所以这篇文章并不会很长。</p>\n</blockquote>\n<h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></h2><ul>\n<li>是否有这样需求，一个<code>&#39;function add(a,b) &#123;retrun a+b&#125;&#39;</code>字符串传递给你，让你执行里面的函数，<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后端返回 字符串函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> addstr =  <span class=\"string\">&#x27;function add(a,b) &#123;retrun a+b&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(addstr); <span class=\"comment\">// 相当于生命函数add</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(); <span class=\"comment\">// 执行add函数</span></span><br></pre></td></tr></table></figure></li>\n<li>或者给你抛出一个变量<code>a = add</code>或 <code>a = sum</code>,<code>a</code>是可变的，分别执行add函数，或sum函数。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是a函数&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是b函数&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> funName = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(funName+<span class=\"string\">&#x27;()&#x27;</span>) <span class=\"comment\">// 字符串拼接成 =&gt; a();</span></span><br><span class=\"line\"><span class=\"comment\">// 或者 第二种</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;(&#x27;</span>+funName+<span class=\"string\">&#x27;)&#x27;</span>)(); </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种大家可能不理解，为什么要加()</p>\n<ol>\n<li>字符串拼接后相当于执行了eval里面的<code>function a() &#123;console.log(&#39;我是a函数&#39;)&#125;</code></li>\n<li><code>function a() &#123;console.log(&#39;我是a函数&#39;)&#125;()</code>这样调用肯定报错，所以要在函数外面加一下<code>（）</code></li>\n<li><code>(function a() &#123;console.log(&#39;我是a函数&#39;)&#125;)()</code></li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"new-Function\"><a href=\"#new-Function\" class=\"headerlink\" title=\"new Function()\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\">new Function()</a></h2><ul>\n<li>他的使用跟eval还是有一定的差异。<blockquote>\n<p><code>所有的</code>参数类型都是<code>string</code>，最后一个代表着函数体里要执行的内容，切记<code>多个表达式</code>要用<code>;</code>分开;</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个函数普通写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是add函数&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用new Function（）声明一个sum函数,实现跟add一样的功能</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&quot;console.log(&#x27;我是sum函数&#x27;);return a+b;&quot;</span>)</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>) == <span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>); <span class=\"comment\">// true;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ul>\n<li>eval中的代码执行时的作用域为当前作用域。它可以访问到函数中的局部变量。</li>\n<li>new Function中的代码执行时的作用域为全局作用域，不论它的在哪个地方调用的。所以它访问的是全局变量a。它根本无法访问b函数内的局部变量。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;global scope&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;local scope&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;console.log(a)&#x27;</span>) <span class=\"comment\">//local scope</span></span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;&#x27;</span>,<span class=\"string\">&#x27;console.log(a)&#x27;</span>))() <span class=\"comment\">//global scope</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">b</span>()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>俩者其实根本没有可比性，只不过都是将传入的字符串当做 JavaScript 代码进行执行。所以这篇文章并不会很长。</p>\n</blockquote>\n<h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></h2><ul>\n<li>是否有这样需求，一个<code>&#39;function add(a,b) &#123;retrun a+b&#125;&#39;</code>字符串传递给你，让你执行里面的函数，<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后端返回 字符串函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> addstr =  <span class=\"string\">&#x27;function add(a,b) &#123;retrun a+b&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(addstr); <span class=\"comment\">// 相当于生命函数add</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(); <span class=\"comment\">// 执行add函数</span></span><br></pre></td></tr></table></figure></li>\n<li>或者给你抛出一个变量<code>a = add</code>或 <code>a = sum</code>,<code>a</code>是可变的，分别执行add函数，或sum函数。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是a函数&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是b函数&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> funName = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(funName+<span class=\"string\">&#x27;()&#x27;</span>) <span class=\"comment\">// 字符串拼接成 =&gt; a();</span></span><br><span class=\"line\"><span class=\"comment\">// 或者 第二种</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;(&#x27;</span>+funName+<span class=\"string\">&#x27;)&#x27;</span>)(); </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种大家可能不理解，为什么要加()</p>\n<ol>\n<li>字符串拼接后相当于执行了eval里面的<code>function a() &#123;console.log(&#39;我是a函数&#39;)&#125;</code></li>\n<li><code>function a() &#123;console.log(&#39;我是a函数&#39;)&#125;()</code>这样调用肯定报错，所以要在函数外面加一下<code>（）</code></li>\n<li><code>(function a() &#123;console.log(&#39;我是a函数&#39;)&#125;)()</code></li>\n</ol>\n</blockquote>\n</li>\n</ul>","more":"<h2 id=\"new-Function\"><a href=\"#new-Function\" class=\"headerlink\" title=\"new Function()\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\">new Function()</a></h2><ul>\n<li>他的使用跟eval还是有一定的差异。<blockquote>\n<p><code>所有的</code>参数类型都是<code>string</code>，最后一个代表着函数体里要执行的内容，切记<code>多个表达式</code>要用<code>;</code>分开;</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个函数普通写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是add函数&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用new Function（）声明一个sum函数,实现跟add一样的功能</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&quot;console.log(&#x27;我是sum函数&#x27;);return a+b;&quot;</span>)</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>) == <span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>); <span class=\"comment\">// true;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ul>\n<li>eval中的代码执行时的作用域为当前作用域。它可以访问到函数中的局部变量。</li>\n<li>new Function中的代码执行时的作用域为全局作用域，不论它的在哪个地方调用的。所以它访问的是全局变量a。它根本无法访问b函数内的局部变量。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;global scope&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;local scope&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;console.log(a)&#x27;</span>) <span class=\"comment\">//local scope</span></span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;&#x27;</span>,<span class=\"string\">&#x27;console.log(a)&#x27;</span>))() <span class=\"comment\">//global scope</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">b</span>()</span><br></pre></td></tr></table></figure>"},{"title":"requestAnimationFrame","date":"2021-11-26T08:15:24.000Z","comments":0,"_content":"\n- 如图！当UI给如下雪碧图，需要我们实现`喇叭播放效果，并且可以控制播放暂停`,我们只需要不停切换雪碧图位置来实现动画播放效果。\n![](/images/ic_voice.png)\n\n## 铺垫\n\n### 生成精灵图JSON网址\n- [地址](https://www.leshylabs.com/apps/sstool/)良心网站，可以将我们雪碧图`尺寸大小、x,y位置`以json的格式返回给我们(如下！！！)\n- 是不是很惊喜，我们不需要在管ui要数据，不管给什么图我们只要生成json，然后读取数据值实现动画效果，2秒钟搞定动画。\n```javascript\n  \"ic_voice\": [\n    {\n      \"name\": \"ic_voice_01\",\n      \"x\": 0,\n      \"y\": 0,\n      \"width\": 60,\n      \"height\": 60\n    },\n    {\n      \"name\": \"ic_voice_02\",\n      \"x\": 0,\n      \"y\": 61,\n      \"width\": 60,\n      \"height\": 60\n    },\n    {\n      \"name\": \"ic_voice_03\",\n      \"x\": 61,\n      \"y\": 0,\n      \"width\": 60,\n      \"height\": 60\n    }\n  ]\n```\n\n### requestAnimationFrame\n- 大家的第一反应是用`setTimeout`实现每秒切换，但是在移动端部分手机会因为型号原因导致动画`卡屏`，所有用此方法[requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)可以完全避免卡顿问题，此函数的回调函数是在`浏览器下一次重绘之前执行`.\n```javascript\nwindow.requestAnimationFrame(function(DOMHighResTimeStamp) {\n    // callback methods\n});\n```\n- `浏览器下一次重绘之前执行`此回调函数，默认传递参数[DOMHighResTimeStamp](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile),那么`DOMHighResTimeStamp`又是个什么鬼? 请继续往下看！！！\n\n### DOMHighResTimeStamp\n- [DOMHighResTimeStamp](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile)翻译成汉语：<font color=\"red\">【dom高精度时间戳】</font>,既然是高精度肯定要比毫秒还要精准（微妙级别), 让我们疑惑的是为什么小数点之前只有5位，甚至可能只有俩位数。他跟获取时间戳不太相同，他是：`自创建上下文以来经过的时间`\n> 想要观察 doSomething方法执行了多久？\n```javascript\nlet highTimeStamp1 = window.performance.now() // 21152.700000047684\nfunction doSomething() {\n    console.log(111)\n}\nlet highTimeStamp2 = window.performance.now() // 21152.700000047684\n// Difference doSomething方法执行所用的时间。\nlet Difference = highTimeStamp2 - highTimeStamp1;\n```\n- js里我们一般用最多的是毫秒级别， 1s = 1000毫秒， 秒的时间戳是10位，那么毫秒时间戳便是13位。\n```javascript\n// 获取当前时间戳\nlet timeStamp = new Date().getTime(); // 1637891606442\n```\n\n<!-- more -->\n\n### 实现requestAnimationFrame循环调用\n- 如下代码！fn函数观察发现他只会执行`一次`,`自创建上下文以来经过这里时会执行`\n```javascript\nwindow.requestAnimationFrame(function fn(DOMHighResTimeStamp) {\n    console.log('我执行了几次')\n});\n```\n- 那么如何循环执行呢？ 当然是函数自调用，执行`fn函数`时，在自己调用自己。\n```javascript\nwindow.requestAnimationFrame(function fn(DOMHighResTimeStamp) {\n    console.log('我被执行了几次');\n    requestAnimationFrame(fn)\n});\n```\n\n### 代码如下地址\n- [github地址](https://github.com/Even-cxw/demo/tree/main/%E9%9B%AA%E7%A2%A7%E5%8A%A8%E7%94%BB%E5%9B%BE)\n\n\n----\n\n## 变速\n\n### 如何控制变速呢?\n> 当我们做九宫格或者其他动画的时候某些`动画需要由快到慢`等执行,直接看代码解析\n```javascript\n// 循环执行render函数\nfunction render(timestamp) {\n  // elapsedTime上一次执行的时间间隔\n  const elapsedTime = timestamp - startTime;\n  // 如果在speed之外，将执行条件语句里的函数\n  if (elapsedTime > speed) {\n    startTime = timestamp;\n    // 动画执行逻辑\n    rotate()\n  }\n  timer = window.requestAnimationFrame(render);\n}\n```\n- 通过注释的理解我们是不是可以改变`speed`的大小来调节`条件语句`执行频率来达到`变速`效果。\n- 至于如何控制speed有很多方法，[简单的demo代码]()大家可以参考下！\n\n### 封装`变速`方法(AnimationFrame)！\n> 反向推需求！\n#### 参数\n1. 需要初始频率，定义为`speed`\n2. 需要初始是加速、减速、匀速、定义为`speedFlag` 默认`匀速`\n3. countCallback:Function 控制匀速降速函数\n4. fun:Function,动画函数，每次循环会执行次函数。\n#### 类函数方法\n1. 抛出：升速、降速、匀速\n2. 抛出：暂停\n\n- 使用 [github地址](https://github.com/Even-cxw/demo/tree/main/%E5%8F%98%E9%80%9F)\n```javascript\nnew AnimationFrame({\n  mainFun:function() {console.log('我是主要逻辑函数')},\n  countCallback: function(count){\n    if (count == 10) {\n      console.log('开始加速')\n      this.quicken()\n    } else if (count == 20) {\n      console.log('开始减速')\n      this.slow()\n    } else if (count == 25) {\n      console.log('暂停')\n      this.stop();\n    }\n  }\n})\n```\n\n- 类函数代码\n```javascript\n/**\n * @desc AnimationFrame控制快慢类\n * @param {speedFlag|number} 0:定速 1:加速 -1:减速\n * @param {speed|number} 频率\n * @param {countCallback|Function} 变频函数\n * @param {mainFun|Function} 主要业务逻辑函数\n * @param {changeSpeed:numeber} 加速/减速-频率值\n*/\n// var speedFlag = 1 // 快慢节奏\n// var count = 0 // 执行了几个\n// var speed = 330 // 动画频率/毫秒 (多少秒执行一次fun)\n// var timer = null // 执行id\n// var startTime = window.performance.now();\n\nclass AnimationFrame {\n\tconstructor({speedFlag=0, speed = 500, changeSpeed = 50, countCallback = () => {}, mainFun = () => {} } = {}) {\n\t\tthis.speedFlag = speedFlag;\n\t\tthis.speed = speed;\n\t\tthis.mainFun = mainFun;\n\t\tthis.countCallback = countCallback;\n\t\tthis.timer = null;\n\t\tthis.startTime = window.performance.now();\n\t\tthis.count = 0;\n\t\tthis.changeSpeed = changeSpeed;\n\t\tthis.isStop = false;\n\t\tthis.render();\n\t}\n\t// 主函数\n\trender(timestamp) {\n\t\tif (this.isStop) return;\n    const elapsedTime = timestamp - this.startTime;\n    if (elapsedTime > this.speed) {\n        this.startTime = timestamp;\n        this.animate();\n\t\t\t\tthis.handleSpeed();\n    }\n    this.timer = window.requestAnimationFrame(this.render.bind(this));\n\t}\n\t// 执行动画函数\n\tanimate() {\n\t\tthis.countCallback(this.count);\n\t\tif (this.isStop) return;\n\t\tthis.mainFun(this.count);\n\t\tthis.count++\n\t}\n\t// 处理频率函数\n\thandleSpeed() {\n\t\tif (this.speedFlag === 1) {\n\t\t\t// 当减到最小值时，自动变匀速；\n\t\t\tthis.speed>this.changeSpeed?this.speed -= this.changeSpeed:this.speedFlag = 0;\n\t\t} else if (this.speedFlag === -1) {\n\t\t\tthis.speed += this.changeSpeed;\n\t\t}\n\t}\n\t// 加速\n\tquicken() {\n\t\tthis.speedFlag = 1\n\t}\n\t// 减速\n\tslow() {\n\t\tthis.speedFlag = -1\n\t}\n\t// 匀速\n\tequally() {\n\t\tthis.speedFlag = 0\n\t}\n\t// 停止\n\tstop() {\n\t\tcancelAnimationFrame(this.timer);\n\t\tthis.isStop = true;\n\t}\n}\n```","source":"_posts/js_animation.md","raw":"---\ntitle: requestAnimationFrame\ndate: 2021-11-26 16:15:24\ncategories: javascript\ntags: [javascript]\ncomments: false\n---\n\n- 如图！当UI给如下雪碧图，需要我们实现`喇叭播放效果，并且可以控制播放暂停`,我们只需要不停切换雪碧图位置来实现动画播放效果。\n![](/images/ic_voice.png)\n\n## 铺垫\n\n### 生成精灵图JSON网址\n- [地址](https://www.leshylabs.com/apps/sstool/)良心网站，可以将我们雪碧图`尺寸大小、x,y位置`以json的格式返回给我们(如下！！！)\n- 是不是很惊喜，我们不需要在管ui要数据，不管给什么图我们只要生成json，然后读取数据值实现动画效果，2秒钟搞定动画。\n```javascript\n  \"ic_voice\": [\n    {\n      \"name\": \"ic_voice_01\",\n      \"x\": 0,\n      \"y\": 0,\n      \"width\": 60,\n      \"height\": 60\n    },\n    {\n      \"name\": \"ic_voice_02\",\n      \"x\": 0,\n      \"y\": 61,\n      \"width\": 60,\n      \"height\": 60\n    },\n    {\n      \"name\": \"ic_voice_03\",\n      \"x\": 61,\n      \"y\": 0,\n      \"width\": 60,\n      \"height\": 60\n    }\n  ]\n```\n\n### requestAnimationFrame\n- 大家的第一反应是用`setTimeout`实现每秒切换，但是在移动端部分手机会因为型号原因导致动画`卡屏`，所有用此方法[requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)可以完全避免卡顿问题，此函数的回调函数是在`浏览器下一次重绘之前执行`.\n```javascript\nwindow.requestAnimationFrame(function(DOMHighResTimeStamp) {\n    // callback methods\n});\n```\n- `浏览器下一次重绘之前执行`此回调函数，默认传递参数[DOMHighResTimeStamp](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile),那么`DOMHighResTimeStamp`又是个什么鬼? 请继续往下看！！！\n\n### DOMHighResTimeStamp\n- [DOMHighResTimeStamp](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile)翻译成汉语：<font color=\"red\">【dom高精度时间戳】</font>,既然是高精度肯定要比毫秒还要精准（微妙级别), 让我们疑惑的是为什么小数点之前只有5位，甚至可能只有俩位数。他跟获取时间戳不太相同，他是：`自创建上下文以来经过的时间`\n> 想要观察 doSomething方法执行了多久？\n```javascript\nlet highTimeStamp1 = window.performance.now() // 21152.700000047684\nfunction doSomething() {\n    console.log(111)\n}\nlet highTimeStamp2 = window.performance.now() // 21152.700000047684\n// Difference doSomething方法执行所用的时间。\nlet Difference = highTimeStamp2 - highTimeStamp1;\n```\n- js里我们一般用最多的是毫秒级别， 1s = 1000毫秒， 秒的时间戳是10位，那么毫秒时间戳便是13位。\n```javascript\n// 获取当前时间戳\nlet timeStamp = new Date().getTime(); // 1637891606442\n```\n\n<!-- more -->\n\n### 实现requestAnimationFrame循环调用\n- 如下代码！fn函数观察发现他只会执行`一次`,`自创建上下文以来经过这里时会执行`\n```javascript\nwindow.requestAnimationFrame(function fn(DOMHighResTimeStamp) {\n    console.log('我执行了几次')\n});\n```\n- 那么如何循环执行呢？ 当然是函数自调用，执行`fn函数`时，在自己调用自己。\n```javascript\nwindow.requestAnimationFrame(function fn(DOMHighResTimeStamp) {\n    console.log('我被执行了几次');\n    requestAnimationFrame(fn)\n});\n```\n\n### 代码如下地址\n- [github地址](https://github.com/Even-cxw/demo/tree/main/%E9%9B%AA%E7%A2%A7%E5%8A%A8%E7%94%BB%E5%9B%BE)\n\n\n----\n\n## 变速\n\n### 如何控制变速呢?\n> 当我们做九宫格或者其他动画的时候某些`动画需要由快到慢`等执行,直接看代码解析\n```javascript\n// 循环执行render函数\nfunction render(timestamp) {\n  // elapsedTime上一次执行的时间间隔\n  const elapsedTime = timestamp - startTime;\n  // 如果在speed之外，将执行条件语句里的函数\n  if (elapsedTime > speed) {\n    startTime = timestamp;\n    // 动画执行逻辑\n    rotate()\n  }\n  timer = window.requestAnimationFrame(render);\n}\n```\n- 通过注释的理解我们是不是可以改变`speed`的大小来调节`条件语句`执行频率来达到`变速`效果。\n- 至于如何控制speed有很多方法，[简单的demo代码]()大家可以参考下！\n\n### 封装`变速`方法(AnimationFrame)！\n> 反向推需求！\n#### 参数\n1. 需要初始频率，定义为`speed`\n2. 需要初始是加速、减速、匀速、定义为`speedFlag` 默认`匀速`\n3. countCallback:Function 控制匀速降速函数\n4. fun:Function,动画函数，每次循环会执行次函数。\n#### 类函数方法\n1. 抛出：升速、降速、匀速\n2. 抛出：暂停\n\n- 使用 [github地址](https://github.com/Even-cxw/demo/tree/main/%E5%8F%98%E9%80%9F)\n```javascript\nnew AnimationFrame({\n  mainFun:function() {console.log('我是主要逻辑函数')},\n  countCallback: function(count){\n    if (count == 10) {\n      console.log('开始加速')\n      this.quicken()\n    } else if (count == 20) {\n      console.log('开始减速')\n      this.slow()\n    } else if (count == 25) {\n      console.log('暂停')\n      this.stop();\n    }\n  }\n})\n```\n\n- 类函数代码\n```javascript\n/**\n * @desc AnimationFrame控制快慢类\n * @param {speedFlag|number} 0:定速 1:加速 -1:减速\n * @param {speed|number} 频率\n * @param {countCallback|Function} 变频函数\n * @param {mainFun|Function} 主要业务逻辑函数\n * @param {changeSpeed:numeber} 加速/减速-频率值\n*/\n// var speedFlag = 1 // 快慢节奏\n// var count = 0 // 执行了几个\n// var speed = 330 // 动画频率/毫秒 (多少秒执行一次fun)\n// var timer = null // 执行id\n// var startTime = window.performance.now();\n\nclass AnimationFrame {\n\tconstructor({speedFlag=0, speed = 500, changeSpeed = 50, countCallback = () => {}, mainFun = () => {} } = {}) {\n\t\tthis.speedFlag = speedFlag;\n\t\tthis.speed = speed;\n\t\tthis.mainFun = mainFun;\n\t\tthis.countCallback = countCallback;\n\t\tthis.timer = null;\n\t\tthis.startTime = window.performance.now();\n\t\tthis.count = 0;\n\t\tthis.changeSpeed = changeSpeed;\n\t\tthis.isStop = false;\n\t\tthis.render();\n\t}\n\t// 主函数\n\trender(timestamp) {\n\t\tif (this.isStop) return;\n    const elapsedTime = timestamp - this.startTime;\n    if (elapsedTime > this.speed) {\n        this.startTime = timestamp;\n        this.animate();\n\t\t\t\tthis.handleSpeed();\n    }\n    this.timer = window.requestAnimationFrame(this.render.bind(this));\n\t}\n\t// 执行动画函数\n\tanimate() {\n\t\tthis.countCallback(this.count);\n\t\tif (this.isStop) return;\n\t\tthis.mainFun(this.count);\n\t\tthis.count++\n\t}\n\t// 处理频率函数\n\thandleSpeed() {\n\t\tif (this.speedFlag === 1) {\n\t\t\t// 当减到最小值时，自动变匀速；\n\t\t\tthis.speed>this.changeSpeed?this.speed -= this.changeSpeed:this.speedFlag = 0;\n\t\t} else if (this.speedFlag === -1) {\n\t\t\tthis.speed += this.changeSpeed;\n\t\t}\n\t}\n\t// 加速\n\tquicken() {\n\t\tthis.speedFlag = 1\n\t}\n\t// 减速\n\tslow() {\n\t\tthis.speedFlag = -1\n\t}\n\t// 匀速\n\tequally() {\n\t\tthis.speedFlag = 0\n\t}\n\t// 停止\n\tstop() {\n\t\tcancelAnimationFrame(this.timer);\n\t\tthis.isStop = true;\n\t}\n}\n```","slug":"js-animation","published":1,"updated":"2022-03-20T02:40:14.338Z","_id":"cl0iw2rd70009itoza6q7cln3","layout":"post","photos":[],"link":"","content":"<ul>\n<li>如图！当UI给如下雪碧图，需要我们实现<code>喇叭播放效果，并且可以控制播放暂停</code>,我们只需要不停切换雪碧图位置来实现动画播放效果。<br><img src=\"/images/ic_voice.png\"></li>\n</ul>\n<h2 id=\"铺垫\"><a href=\"#铺垫\" class=\"headerlink\" title=\"铺垫\"></a>铺垫</h2><h3 id=\"生成精灵图JSON网址\"><a href=\"#生成精灵图JSON网址\" class=\"headerlink\" title=\"生成精灵图JSON网址\"></a>生成精灵图JSON网址</h3><ul>\n<li><a href=\"https://www.leshylabs.com/apps/sstool/\">地址</a>良心网站，可以将我们雪碧图<code>尺寸大小、x,y位置</code>以json的格式返回给我们(如下！！！)</li>\n<li>是不是很惊喜，我们不需要在管ui要数据，不管给什么图我们只要生成json，然后读取数据值实现动画效果，2秒钟搞定动画。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;ic_voice&quot;</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;ic_voice_01&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;width&quot;</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;height&quot;</span>: <span class=\"number\">60</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;ic_voice_02&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>: <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;width&quot;</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;height&quot;</span>: <span class=\"number\">60</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;ic_voice_03&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>: <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;width&quot;</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;height&quot;</span>: <span class=\"number\">60</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h3><ul>\n<li>大家的第一反应是用<code>setTimeout</code>实现每秒切换，但是在移动端部分手机会因为型号原因导致动画<code>卡屏</code>，所有用此方法<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a>可以完全避免卡顿问题，此函数的回调函数是在<code>浏览器下一次重绘之前执行</code>.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"keyword\">function</span>(<span class=\"params\">DOMHighResTimeStamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// callback methods</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><code>浏览器下一次重绘之前执行</code>此回调函数，默认传递参数<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile\">DOMHighResTimeStamp</a>,那么<code>DOMHighResTimeStamp</code>又是个什么鬼? 请继续往下看！！！</li>\n</ul>\n<h3 id=\"DOMHighResTimeStamp\"><a href=\"#DOMHighResTimeStamp\" class=\"headerlink\" title=\"DOMHighResTimeStamp\"></a>DOMHighResTimeStamp</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile\">DOMHighResTimeStamp</a>翻译成汉语：<font color=\"red\">【dom高精度时间戳】</font>,既然是高精度肯定要比毫秒还要精准（微妙级别), 让我们疑惑的是为什么小数点之前只有5位，甚至可能只有俩位数。他跟获取时间戳不太相同，他是：<code>自创建上下文以来经过的时间</code><blockquote>\n<p>想要观察 doSomething方法执行了多久？</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> highTimeStamp1 = <span class=\"variable language_\">window</span>.<span class=\"property\">performance</span>.<span class=\"title function_\">now</span>() <span class=\"comment\">// 21152.700000047684</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> highTimeStamp2 = <span class=\"variable language_\">window</span>.<span class=\"property\">performance</span>.<span class=\"title function_\">now</span>() <span class=\"comment\">// 21152.700000047684</span></span><br><span class=\"line\"><span class=\"comment\">// Difference doSomething方法执行所用的时间。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Difference</span> = highTimeStamp2 - highTimeStamp1;</span><br></pre></td></tr></table></figure></li>\n<li>js里我们一般用最多的是毫秒级别， 1s = 1000毫秒， 秒的时间戳是10位，那么毫秒时间戳便是13位。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timeStamp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(); <span class=\"comment\">// 1637891606442</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"实现requestAnimationFrame循环调用\"><a href=\"#实现requestAnimationFrame循环调用\" class=\"headerlink\" title=\"实现requestAnimationFrame循环调用\"></a>实现requestAnimationFrame循环调用</h3><ul>\n<li>如下代码！fn函数观察发现他只会执行<code>一次</code>,<code>自创建上下文以来经过这里时会执行</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">DOMHighResTimeStamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我执行了几次&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>那么如何循环执行呢？ 当然是函数自调用，执行<code>fn函数</code>时，在自己调用自己。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">DOMHighResTimeStamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我被执行了几次&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">requestAnimationFrame</span>(fn)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"代码如下地址\"><a href=\"#代码如下地址\" class=\"headerlink\" title=\"代码如下地址\"></a>代码如下地址</h3><ul>\n<li><a href=\"https://github.com/Even-cxw/demo/tree/main/%E9%9B%AA%E7%A2%A7%E5%8A%A8%E7%94%BB%E5%9B%BE\">github地址</a></li>\n</ul>\n<hr>\n<h2 id=\"变速\"><a href=\"#变速\" class=\"headerlink\" title=\"变速\"></a>变速</h2><h3 id=\"如何控制变速呢\"><a href=\"#如何控制变速呢\" class=\"headerlink\" title=\"如何控制变速呢?\"></a>如何控制变速呢?</h3><blockquote>\n<p>当我们做九宫格或者其他动画的时候某些<code>动画需要由快到慢</code>等执行,直接看代码解析</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环执行render函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">timestamp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// elapsedTime上一次执行的时间间隔</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> elapsedTime = timestamp - startTime;</span><br><span class=\"line\">  <span class=\"comment\">// 如果在speed之外，将执行条件语句里的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elapsedTime &gt; speed) &#123;</span><br><span class=\"line\">    startTime = timestamp;</span><br><span class=\"line\">    <span class=\"comment\">// 动画执行逻辑</span></span><br><span class=\"line\">    <span class=\"title function_\">rotate</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  timer = <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(render);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过注释的理解我们是不是可以改变<code>speed</code>的大小来调节<code>条件语句</code>执行频率来达到<code>变速</code>效果。</li>\n<li>至于如何控制speed有很多方法，<a href=\"\">简单的demo代码</a>大家可以参考下！</li>\n</ul>\n<h3 id=\"封装变速方法-AnimationFrame-！\"><a href=\"#封装变速方法-AnimationFrame-！\" class=\"headerlink\" title=\"封装变速方法(AnimationFrame)！\"></a>封装<code>变速</code>方法(AnimationFrame)！</h3><blockquote>\n<p>反向推需求！</p>\n</blockquote>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ol>\n<li>需要初始频率，定义为<code>speed</code></li>\n<li>需要初始是加速、减速、匀速、定义为<code>speedFlag</code> 默认<code>匀速</code></li>\n<li>countCallback:Function 控制匀速降速函数</li>\n<li>fun:Function,动画函数，每次循环会执行次函数。<h4 id=\"类函数方法\"><a href=\"#类函数方法\" class=\"headerlink\" title=\"类函数方法\"></a>类函数方法</h4></li>\n<li>抛出：升速、降速、匀速</li>\n<li>抛出：暂停</li>\n</ol>\n<ul>\n<li><p>使用 <a href=\"https://github.com/Even-cxw/demo/tree/main/%E5%8F%98%E9%80%9F\">github地址</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">AnimationFrame</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mainFun</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是主要逻辑函数&#x27;</span>)&#125;,</span><br><span class=\"line\">  <span class=\"attr\">countCallback</span>: <span class=\"keyword\">function</span>(<span class=\"params\">count</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始加速&#x27;</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">quicken</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始减速&#x27;</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">slow</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;暂停&#x27;</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>类函数代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> AnimationFrame控制快慢类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">speedFlag|number</span>&#125; 0:定速 1:加速 -1:减速</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">speed|number</span>&#125; 频率</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">countCallback|Function</span>&#125; 变频函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">mainFun|Function</span>&#125; 主要业务逻辑函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">changeSpeed:numeber</span>&#125; 加速/减速-频率值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// var speedFlag = 1 // 快慢节奏</span></span><br><span class=\"line\"><span class=\"comment\">// var count = 0 // 执行了几个</span></span><br><span class=\"line\"><span class=\"comment\">// var speed = 330 // 动画频率/毫秒 (多少秒执行一次fun)</span></span><br><span class=\"line\"><span class=\"comment\">// var timer = null // 执行id</span></span><br><span class=\"line\"><span class=\"comment\">// var startTime = window.performance.now();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnimationFrame</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">&#123;speedFlag=<span class=\"number\">0</span>, speed = <span class=\"number\">500</span>, changeSpeed = <span class=\"number\">50</span>, countCallback = () =&gt; &#123;&#125;, mainFun = () =&gt; &#123;&#125; &#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = speedFlag;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span> = speed;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">mainFun</span> = mainFun;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">countCallback</span> = countCallback;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">startTime</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">performance</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span> = changeSpeed;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 主函数</span></span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\">timestamp</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> elapsedTime = timestamp - <span class=\"variable language_\">this</span>.<span class=\"property\">startTime</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elapsedTime &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">speed</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">startTime</span> = timestamp;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">animate</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">handleSpeed</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">render</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行动画函数</span></span><br><span class=\"line\">\t<span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">countCallback</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">count</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">mainFun</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">count</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理频率函数</span></span><br><span class=\"line\">\t<span class=\"title function_\">handleSpeed</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当减到最小值时，自动变匀速；</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span>&gt;<span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span>?<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span> -= <span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span> += <span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 加速</span></span><br><span class=\"line\">\t<span class=\"title function_\">quicken</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 减速</span></span><br><span class=\"line\">\t<span class=\"title function_\">slow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = -<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 匀速</span></span><br><span class=\"line\">\t<span class=\"title function_\">equally</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 停止</span></span><br><span class=\"line\">\t<span class=\"title function_\">stop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">cancelAnimationFrame</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>如图！当UI给如下雪碧图，需要我们实现<code>喇叭播放效果，并且可以控制播放暂停</code>,我们只需要不停切换雪碧图位置来实现动画播放效果。<br><img src=\"/images/ic_voice.png\"></li>\n</ul>\n<h2 id=\"铺垫\"><a href=\"#铺垫\" class=\"headerlink\" title=\"铺垫\"></a>铺垫</h2><h3 id=\"生成精灵图JSON网址\"><a href=\"#生成精灵图JSON网址\" class=\"headerlink\" title=\"生成精灵图JSON网址\"></a>生成精灵图JSON网址</h3><ul>\n<li><a href=\"https://www.leshylabs.com/apps/sstool/\">地址</a>良心网站，可以将我们雪碧图<code>尺寸大小、x,y位置</code>以json的格式返回给我们(如下！！！)</li>\n<li>是不是很惊喜，我们不需要在管ui要数据，不管给什么图我们只要生成json，然后读取数据值实现动画效果，2秒钟搞定动画。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;ic_voice&quot;</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;ic_voice_01&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;width&quot;</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;height&quot;</span>: <span class=\"number\">60</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;ic_voice_02&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>: <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;width&quot;</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;height&quot;</span>: <span class=\"number\">60</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;ic_voice_03&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>: <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;width&quot;</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;height&quot;</span>: <span class=\"number\">60</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h3><ul>\n<li>大家的第一反应是用<code>setTimeout</code>实现每秒切换，但是在移动端部分手机会因为型号原因导致动画<code>卡屏</code>，所有用此方法<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a>可以完全避免卡顿问题，此函数的回调函数是在<code>浏览器下一次重绘之前执行</code>.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"keyword\">function</span>(<span class=\"params\">DOMHighResTimeStamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// callback methods</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><code>浏览器下一次重绘之前执行</code>此回调函数，默认传递参数<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile\">DOMHighResTimeStamp</a>,那么<code>DOMHighResTimeStamp</code>又是个什么鬼? 请继续往下看！！！</li>\n</ul>\n<h3 id=\"DOMHighResTimeStamp\"><a href=\"#DOMHighResTimeStamp\" class=\"headerlink\" title=\"DOMHighResTimeStamp\"></a>DOMHighResTimeStamp</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp#compat-mobile\">DOMHighResTimeStamp</a>翻译成汉语：<font color=\"red\">【dom高精度时间戳】</font>,既然是高精度肯定要比毫秒还要精准（微妙级别), 让我们疑惑的是为什么小数点之前只有5位，甚至可能只有俩位数。他跟获取时间戳不太相同，他是：<code>自创建上下文以来经过的时间</code><blockquote>\n<p>想要观察 doSomething方法执行了多久？</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> highTimeStamp1 = <span class=\"variable language_\">window</span>.<span class=\"property\">performance</span>.<span class=\"title function_\">now</span>() <span class=\"comment\">// 21152.700000047684</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> highTimeStamp2 = <span class=\"variable language_\">window</span>.<span class=\"property\">performance</span>.<span class=\"title function_\">now</span>() <span class=\"comment\">// 21152.700000047684</span></span><br><span class=\"line\"><span class=\"comment\">// Difference doSomething方法执行所用的时间。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Difference</span> = highTimeStamp2 - highTimeStamp1;</span><br></pre></td></tr></table></figure></li>\n<li>js里我们一般用最多的是毫秒级别， 1s = 1000毫秒， 秒的时间戳是10位，那么毫秒时间戳便是13位。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timeStamp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(); <span class=\"comment\">// 1637891606442</span></span><br></pre></td></tr></table></figure></li>\n</ul>","more":"<h3 id=\"实现requestAnimationFrame循环调用\"><a href=\"#实现requestAnimationFrame循环调用\" class=\"headerlink\" title=\"实现requestAnimationFrame循环调用\"></a>实现requestAnimationFrame循环调用</h3><ul>\n<li>如下代码！fn函数观察发现他只会执行<code>一次</code>,<code>自创建上下文以来经过这里时会执行</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">DOMHighResTimeStamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我执行了几次&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>那么如何循环执行呢？ 当然是函数自调用，执行<code>fn函数</code>时，在自己调用自己。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">DOMHighResTimeStamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我被执行了几次&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">requestAnimationFrame</span>(fn)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"代码如下地址\"><a href=\"#代码如下地址\" class=\"headerlink\" title=\"代码如下地址\"></a>代码如下地址</h3><ul>\n<li><a href=\"https://github.com/Even-cxw/demo/tree/main/%E9%9B%AA%E7%A2%A7%E5%8A%A8%E7%94%BB%E5%9B%BE\">github地址</a></li>\n</ul>\n<hr>\n<h2 id=\"变速\"><a href=\"#变速\" class=\"headerlink\" title=\"变速\"></a>变速</h2><h3 id=\"如何控制变速呢\"><a href=\"#如何控制变速呢\" class=\"headerlink\" title=\"如何控制变速呢?\"></a>如何控制变速呢?</h3><blockquote>\n<p>当我们做九宫格或者其他动画的时候某些<code>动画需要由快到慢</code>等执行,直接看代码解析</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环执行render函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">timestamp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// elapsedTime上一次执行的时间间隔</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> elapsedTime = timestamp - startTime;</span><br><span class=\"line\">  <span class=\"comment\">// 如果在speed之外，将执行条件语句里的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elapsedTime &gt; speed) &#123;</span><br><span class=\"line\">    startTime = timestamp;</span><br><span class=\"line\">    <span class=\"comment\">// 动画执行逻辑</span></span><br><span class=\"line\">    <span class=\"title function_\">rotate</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  timer = <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(render);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过注释的理解我们是不是可以改变<code>speed</code>的大小来调节<code>条件语句</code>执行频率来达到<code>变速</code>效果。</li>\n<li>至于如何控制speed有很多方法，<a href=\"\">简单的demo代码</a>大家可以参考下！</li>\n</ul>\n<h3 id=\"封装变速方法-AnimationFrame-！\"><a href=\"#封装变速方法-AnimationFrame-！\" class=\"headerlink\" title=\"封装变速方法(AnimationFrame)！\"></a>封装<code>变速</code>方法(AnimationFrame)！</h3><blockquote>\n<p>反向推需求！</p>\n</blockquote>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ol>\n<li>需要初始频率，定义为<code>speed</code></li>\n<li>需要初始是加速、减速、匀速、定义为<code>speedFlag</code> 默认<code>匀速</code></li>\n<li>countCallback:Function 控制匀速降速函数</li>\n<li>fun:Function,动画函数，每次循环会执行次函数。<h4 id=\"类函数方法\"><a href=\"#类函数方法\" class=\"headerlink\" title=\"类函数方法\"></a>类函数方法</h4></li>\n<li>抛出：升速、降速、匀速</li>\n<li>抛出：暂停</li>\n</ol>\n<ul>\n<li><p>使用 <a href=\"https://github.com/Even-cxw/demo/tree/main/%E5%8F%98%E9%80%9F\">github地址</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">AnimationFrame</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mainFun</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是主要逻辑函数&#x27;</span>)&#125;,</span><br><span class=\"line\">  <span class=\"attr\">countCallback</span>: <span class=\"keyword\">function</span>(<span class=\"params\">count</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始加速&#x27;</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">quicken</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;开始减速&#x27;</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">slow</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;暂停&#x27;</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">stop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>类函数代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> AnimationFrame控制快慢类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">speedFlag|number</span>&#125; 0:定速 1:加速 -1:减速</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">speed|number</span>&#125; 频率</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">countCallback|Function</span>&#125; 变频函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">mainFun|Function</span>&#125; 主要业务逻辑函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">changeSpeed:numeber</span>&#125; 加速/减速-频率值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// var speedFlag = 1 // 快慢节奏</span></span><br><span class=\"line\"><span class=\"comment\">// var count = 0 // 执行了几个</span></span><br><span class=\"line\"><span class=\"comment\">// var speed = 330 // 动画频率/毫秒 (多少秒执行一次fun)</span></span><br><span class=\"line\"><span class=\"comment\">// var timer = null // 执行id</span></span><br><span class=\"line\"><span class=\"comment\">// var startTime = window.performance.now();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnimationFrame</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">&#123;speedFlag=<span class=\"number\">0</span>, speed = <span class=\"number\">500</span>, changeSpeed = <span class=\"number\">50</span>, countCallback = () =&gt; &#123;&#125;, mainFun = () =&gt; &#123;&#125; &#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = speedFlag;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span> = speed;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">mainFun</span> = mainFun;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">countCallback</span> = countCallback;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">startTime</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">performance</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">count</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span> = changeSpeed;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 主函数</span></span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\">timestamp</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> elapsedTime = timestamp - <span class=\"variable language_\">this</span>.<span class=\"property\">startTime</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elapsedTime &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">speed</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">startTime</span> = timestamp;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">animate</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">handleSpeed</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">render</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行动画函数</span></span><br><span class=\"line\">\t<span class=\"title function_\">animate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">countCallback</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">count</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">mainFun</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">count</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理频率函数</span></span><br><span class=\"line\">\t<span class=\"title function_\">handleSpeed</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当减到最小值时，自动变匀速；</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span>&gt;<span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span>?<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span> -= <span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speed</span> += <span class=\"variable language_\">this</span>.<span class=\"property\">changeSpeed</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 加速</span></span><br><span class=\"line\">\t<span class=\"title function_\">quicken</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 减速</span></span><br><span class=\"line\">\t<span class=\"title function_\">slow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = -<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 匀速</span></span><br><span class=\"line\">\t<span class=\"title function_\">equally</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">speedFlag</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 停止</span></span><br><span class=\"line\">\t<span class=\"title function_\">stop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">cancelAnimationFrame</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">isStop</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"Mac","date":"2019-11-17T06:30:24.000Z","comments":0,"_content":"\n- mac截图快捷键 `command + shift + 5`","source":"_posts/mac.md","raw":"---\ntitle: Mac\ndate: 2019-11-17 14:30:24\ncategories: Mac\ntags: [Mac]\ncomments: false\n---\n\n- mac截图快捷键 `command + shift + 5`","slug":"mac","published":1,"updated":"2022-03-20T02:40:14.338Z","_id":"cl0iw2rd8000aitozd0vlfw0q","layout":"post","photos":[],"link":"","content":"<ul>\n<li>mac截图快捷键 <code>command + shift + 5</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>mac截图快捷键 <code>command + shift + 5</code></li>\n</ul>\n"},{"title":"md","date":"2021-11-16T06:30:24.000Z","comments":0,"_content":"\n## 绿色字体\n```javascript\n<font color=\"green\">【aaaaa】</font>\n```\n>效果图\n<font color=\"green\">【aaaaa】</font>\n---\n<!-- more -->\n## 红色字体\n```javascript\n<font color=\"red\">bbbb</font>\n```\n>效果图\n<font color=\"red\">bbbb</font>\n---\n\n## 字体加粗\n```javascript\n配备了 **运行步骤** 以及 **简要说明** 来帮助大家运行项目以及了解本节的知识点。\n```\n>效果图\n配备了 **运行步骤** 以及 **简要说明** 来帮助大家运行项目以及了解本节的知识点。\n---\n\n## 加粗并带背景色\n```javascript\n在 `app.js` 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。\n```\n>效果图\n在 `app.js` 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。\n---\n\n## 引入图片\n```javascript\n![](/images/vscode.png)\n```\n>效果图\n![](/images/vscode.png)\n---\n\n## 难度\n```javascript\n【难度：<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i>】\n```\n>效果图\n【难度：<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i>】\n---\n\n## 标题\n```javascript\n**1、配置webpack**\n```\n>效果图\n**1、配置webpack**\n---\n\n## 文本居中\n```javascript\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n```\n>效果图\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n---\n\n\n\n","source":"_posts/md.md","raw":"---\ntitle: md\ndate: 2021-11-16 14:30:24\ncategories: md\ntags: [md]\ncomments: false\n---\n\n## 绿色字体\n```javascript\n<font color=\"green\">【aaaaa】</font>\n```\n>效果图\n<font color=\"green\">【aaaaa】</font>\n---\n<!-- more -->\n## 红色字体\n```javascript\n<font color=\"red\">bbbb</font>\n```\n>效果图\n<font color=\"red\">bbbb</font>\n---\n\n## 字体加粗\n```javascript\n配备了 **运行步骤** 以及 **简要说明** 来帮助大家运行项目以及了解本节的知识点。\n```\n>效果图\n配备了 **运行步骤** 以及 **简要说明** 来帮助大家运行项目以及了解本节的知识点。\n---\n\n## 加粗并带背景色\n```javascript\n在 `app.js` 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。\n```\n>效果图\n在 `app.js` 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。\n---\n\n## 引入图片\n```javascript\n![](/images/vscode.png)\n```\n>效果图\n![](/images/vscode.png)\n---\n\n## 难度\n```javascript\n【难度：<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i>】\n```\n>效果图\n【难度：<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i>】\n---\n\n## 标题\n```javascript\n**1、配置webpack**\n```\n>效果图\n**1、配置webpack**\n---\n\n## 文本居中\n```javascript\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n```\n>效果图\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n---\n\n\n\n","slug":"md","published":1,"updated":"2022-03-20T02:40:14.338Z","_id":"cl0iw2rda000eitoz5jof114t","layout":"post","photos":[],"link":"","content":"<h2 id=\"绿色字体\"><a href=\"#绿色字体\" class=\"headerlink\" title=\"绿色字体\"></a>绿色字体</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;font color=<span class=\"string\">&quot;green&quot;</span>&gt;【aaaaa】&lt;/font&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><font color=\"green\">【aaaaa】</font></p>\n</blockquote>\n<hr>\n<span id=\"more\"></span>\n<h2 id=\"红色字体\"><a href=\"#红色字体\" class=\"headerlink\" title=\"红色字体\"></a>红色字体</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;font color=<span class=\"string\">&quot;red&quot;</span>&gt;bbbb&lt;/font&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><font color=\"red\">bbbb</font></p>\n</blockquote>\n<hr>\n<h2 id=\"字体加粗\"><a href=\"#字体加粗\" class=\"headerlink\" title=\"字体加粗\"></a>字体加粗</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配备了 **运行步骤** 以及 **简要说明** 来帮助大家运行项目以及了解本节的知识点。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br>配备了 <strong>运行步骤</strong> 以及 <strong>简要说明</strong> 来帮助大家运行项目以及了解本节的知识点。</p>\n</blockquote>\n<hr>\n<h2 id=\"加粗并带背景色\"><a href=\"#加粗并带背景色\" class=\"headerlink\" title=\"加粗并带背景色\"></a>加粗并带背景色</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 <span class=\"string\">`app.js`</span> 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br>在 <code>app.js</code> 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。</p>\n</blockquote>\n<hr>\n<h2 id=\"引入图片\"><a href=\"#引入图片\" class=\"headerlink\" title=\"引入图片\"></a>引入图片</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](<span class=\"regexp\">/images/</span>vscode.<span class=\"property\">png</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><img src=\"/images/vscode.png\"></p>\n</blockquote>\n<hr>\n<h2 id=\"难度\"><a href=\"#难度\" class=\"headerlink\" title=\"难度\"></a>难度</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【难度：&lt;i <span class=\"keyword\">class</span>=<span class=\"string\">&quot;fa fa-star&quot;</span>&gt;&lt;<span class=\"regexp\">/i&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i</span>&gt;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-star&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span>】</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br>【难度：<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i>】</p>\n</blockquote>\n<hr>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**<span class=\"number\">1</span>、配置webpack**</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><strong>1、配置webpack</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"文本居中\"><a href=\"#文本居中\" class=\"headerlink\" title=\"文本居中\"></a>文本居中</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;blockquote <span class=\"keyword\">class</span>=<span class=\"string\">&quot;blockquote-center&quot;</span>&gt;优秀的人，不是不合群，而是他们合群的人里面没有你&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图</p>\n</blockquote>\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n---\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"绿色字体\"><a href=\"#绿色字体\" class=\"headerlink\" title=\"绿色字体\"></a>绿色字体</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;font color=<span class=\"string\">&quot;green&quot;</span>&gt;【aaaaa】&lt;/font&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><font color=\"green\">【aaaaa】</font></p>\n</blockquote>\n<hr>","more":"<h2 id=\"红色字体\"><a href=\"#红色字体\" class=\"headerlink\" title=\"红色字体\"></a>红色字体</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;font color=<span class=\"string\">&quot;red&quot;</span>&gt;bbbb&lt;/font&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><font color=\"red\">bbbb</font></p>\n</blockquote>\n<hr>\n<h2 id=\"字体加粗\"><a href=\"#字体加粗\" class=\"headerlink\" title=\"字体加粗\"></a>字体加粗</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配备了 **运行步骤** 以及 **简要说明** 来帮助大家运行项目以及了解本节的知识点。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br>配备了 <strong>运行步骤</strong> 以及 <strong>简要说明</strong> 来帮助大家运行项目以及了解本节的知识点。</p>\n</blockquote>\n<hr>\n<h2 id=\"加粗并带背景色\"><a href=\"#加粗并带背景色\" class=\"headerlink\" title=\"加粗并带背景色\"></a>加粗并带背景色</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 <span class=\"string\">`app.js`</span> 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br>在 <code>app.js</code> 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。</p>\n</blockquote>\n<hr>\n<h2 id=\"引入图片\"><a href=\"#引入图片\" class=\"headerlink\" title=\"引入图片\"></a>引入图片</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](<span class=\"regexp\">/images/</span>vscode.<span class=\"property\">png</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><img src=\"/images/vscode.png\"></p>\n</blockquote>\n<hr>\n<h2 id=\"难度\"><a href=\"#难度\" class=\"headerlink\" title=\"难度\"></a>难度</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【难度：&lt;i <span class=\"keyword\">class</span>=<span class=\"string\">&quot;fa fa-star&quot;</span>&gt;&lt;<span class=\"regexp\">/i&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i</span>&gt;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-star&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span>】</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br>【难度：<i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i><i class=\"fa fa-star\"></i>】</p>\n</blockquote>\n<hr>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**<span class=\"number\">1</span>、配置webpack**</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图<br><strong>1、配置webpack</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"文本居中\"><a href=\"#文本居中\" class=\"headerlink\" title=\"文本居中\"></a>文本居中</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;blockquote <span class=\"keyword\">class</span>=<span class=\"string\">&quot;blockquote-center&quot;</span>&gt;优秀的人，不是不合群，而是他们合群的人里面没有你&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>效果图</p>\n</blockquote>\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n---"},{"title":"隐式类型转换、原始值、引用值","date":"2021-11-30T06:30:24.000Z","comments":0,"_content":"\n## 原始值\n- 在 ECMAScript 中，变量可以存在两种类型的值，即[原始值]((https://www.w3school.com.cn/js/pro_js_value.asp))和[引用值](https://www.w3school.com.cn/js/pro_js_value.asp),`这里就不做过多解释了。`\n- 原始值有`5种数据类型`，**undefined**、**null**、**boolean**、**string**、**number**\n- 引用值有`俩种引用类型`，**Object**、**Array**\n\n## valueOf()、toString()方法解析\n- [valueOf()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)、[toString()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) : `返回值为该对象的原始值。`\n\n- 那么5中基本数据类型的原始值分别是什么呢?\n```javascript\n// null undefined 不存在原始值\nvar a = null;\nconsole.log('a.valueOf()',a.valueOf()) // 报错\nconsole.log('a.toString()', a.toString()) // 报错\n\nvar b = undefined;\nconsole.log('a.valueOf()',a.valueOf()) // 报错\nconsole.log('a.toString()', a.toString()) // 报错\n\nvar c = new Number('123')\nconsole.log('Number.valueOf()',c.valueOf())  // 123\nconsole.log('Number.toString()', c.toString())  // '123'\n\nvar d = new String('12df');\nconsole.log('String.valueOf()',typeof d.valueOf()) // '12df'\nconsole.log('String.toString()', d.toString()) // '12df'\n\nvar e = new Boolean('fd');\nconsole.log('Boolean.valueOf()', e.valueOf()) // true\nconsole.log('Boolean.toString()', e.toString()) // true\n\n```\n> 由此可见除了`undefined`、`null`报错外，其他都返回自己本身。\n\n## 引用值转成原始值\n- `为什么`引用值要转成原始值呢？：因为在`隐式类型转换`的时候出现引用类型，javascript会吧`他`转成原始值进行`比较`。\n```javascript\nvar f = new Array();\nconsole.log('Array.valueOf()',f.valueOf())  // []\nconsole.log('Array.toString()', f.toString())  // ''\n\nvar e = new Array(3);\nconsole.log('Array.valueOf()',e.valueOf())  // [3]\nconsole.log('Array.toString()', e.toString())  // '3'\n\nvar g = new Array(1,2,3);\nconsole.log('Array.valueOf()',g.valueOf())  // [1, 2, 3]\nconsole.log('Array.toString()', g.toString())  // '1,2,3'\n\nvar j = new Object({});\nconsole.log('Object.valueOf()',j.valueOf())  // {}\nconsole.log('Object.toString()', j.toString())  // '[object Object]'\n```\n- 大家可以发现规律`valueOf()`一般都返回自己本身，而`toString()`转成string比较傻帽，铺垫已做好那么开始看**正题**。\n\n<!--more-->\n\n## 隐式类型转换\n### `Boolen()`、`if()`、`!!`\n- 以上操作都会强制转换成布尔类型，比较`强横`,只要记住以下转成false即可！！！\n| 值 |  转换符 |  结果  |\n| -- | ----  | --- |\n| \"\"  | Boolen(\"\") | false |\n| 0 | Boolen(+0) | false |\n| false  | Boolen(false) | false |\n| undefined  | Boolen(undefined) | false |\n| null  | Boolen(null) | false |\n| NAN  | Boolen(NAN) | false |\n\n- 其他均转成true\n```javascript\nconsole.log('Boolean([])',Boolean([])) // true\nconsole.log('Boolean({})',Boolean({})) // true\n```\n\n### `Number()`\n> Number类型转换就比较`复杂`.\n#### 1、基本数据类型转成Number,\n- Number类型转Number,保持原有值\n```javascript\nconsole.log('Number(1)',Number(1)) // 1\n```\n- Boolen类型转Number\n```javascript\nconsole.log('Number(true)',Number(true)) // 1 \nconsole.log('Number(false)',Number(false)) // 0\n```\n- undefined、null类型转Number\n```javascript\nconsole.log('Number(undefined)',Number(undefined)) // NaN\nconsole.log('Number(null)',Number(null)) // 0\n```\n- String类型转Number\n```javascript\nconsole.log('Number(空字符串)',Number('')) // 0\nconsole.log('Number(字符串123)',Number('123')) // 123\nconsole.log('Number(asdf)',Number('asdf')) // NaN\n```\n\n#### 2、引用数据类型转成Number\n- 除了转Boolen类型的时候是特殊的，其他类型转换需要将引用数据类型先转成`原始值`在转成`Number`。\n> <font color=\"red\">【原始值查找规则：如果valueOf有值返回valueOf,如果没有查找toString。 基本数据类型一般找valueOf,引用数据类型找toString】</font>\n```javascript\nconsole.log('Number([])',Number([])) // 0\n// toString原始值 \"\" 转成数组 0\nconsole.log('Number([4])',Number([4])) // 4\n// toString原始值 4 转成数组 4\nconsole.log('Number([1,2])',Number([1,2])) // NaN\n// toString原始值 '1,2' 转成数组 NaN\nconsole.log('Number([a])',Number(['a'])) // NaN\n// toString原始值 'a' 转成数组 NaN\nconsole.log('Number({})',Number({})) // NaN\n// toString原始值 [object Object]  NaN\nconsole.log('Number({a:1})',Number({a:1})) // NaN\n// toString原始值 [object Object]  NaN\n```\n\n### `==`\n\n- `==` 我们在代码中总会碰到，但是一般都是简单的比较，他在比较中又做了哪些转换呢？`请记住一下4点转换规则`\n\n1. `两边如果存在null或者undefined，他们只和对方以及**自身相等**，和其他的都不等`\n```javascript\nconsole.log('null == undefined', null == undefined) // true\nconsole.log('null == false',null == false) // false\nconsole.log('null == 0 ', null == 0 ) // false\n```\n\n2. `如果等式两边有布尔类型，要将布尔类型转化成数字`\n```javascript\nconsole.log('false == \"\"',false == \"\") // true\n```\n> 1. Number(false) // 0\n> 2. Number(\"\") // 0\n\n3. `如果等式两边有数字，就要将不是数字的那边转化成数字`\n```javascript\nconsole.log('false == \"\"',false == \"\") // true\n```\n\n4. `如果等式两边有引用类型存在，需要将引用类型转换为**原始值**,调用**ToPrimitive**方法.`\n```javascript\nfalse == [] // true\n```\n> 1. []的原始值`''`, 就变成了 false == ''\n> 2. false == '' 转成Number类型 0 == 0\n\n\n## 练习题\n\n- 如果下面练习题作对了，说明你真的理解`隐式转换了`\n\n```javascript\nconsole.log('false == [1]',false == [1]) \nconsole.log('false == [a]',false == ['a'])\nconsole.log('false == {}',false == {})\n```\n\n- 揭晓答案\n\n```javascript\nconsole.log('false == []',false == []) \n```\n\n> 1. [1]的原始值`toString([1])` => `1`, 简化为 `false == 1`\n> 2. false转成Number,`Number(false)` => `0`  所以 0 == 1  是`false`\n\n```javascript\nconsole.log('false == [a]',false == ['a']) \n```\n> 1. ['a']的原始值`toString([a])` => `'a'`, 简化为 `false == 'a'`\n> 2. false转成Number,`Number(false)` => `0`  简化为 0 == 'a' \n> 3. 'a'转成Number, `Number('a')` => `NaN` 所以 0 == NaN 是`false`\n\n```javascript\nconsole.log('false == {}',false == {})\n```\n> 1. ['a']的原始值`toString({})` => `[object,object]`, 简化为 `false == '[object,object]'`\n> 2. false转成Number,`Number(false)` => `0`  简化为 0 == 'a' \n> 3. 'a'转成Number, `Number('[object,object]')` => `NaN` 所以 0 == NaN 是`false`","source":"_posts/type.md","raw":"---\ntitle: 隐式类型转换、原始值、引用值\ndate: 2021-11-30 14:30:24\ncategories: javascript\ntags: [javascript]\ncomments: false\n---\n\n## 原始值\n- 在 ECMAScript 中，变量可以存在两种类型的值，即[原始值]((https://www.w3school.com.cn/js/pro_js_value.asp))和[引用值](https://www.w3school.com.cn/js/pro_js_value.asp),`这里就不做过多解释了。`\n- 原始值有`5种数据类型`，**undefined**、**null**、**boolean**、**string**、**number**\n- 引用值有`俩种引用类型`，**Object**、**Array**\n\n## valueOf()、toString()方法解析\n- [valueOf()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)、[toString()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) : `返回值为该对象的原始值。`\n\n- 那么5中基本数据类型的原始值分别是什么呢?\n```javascript\n// null undefined 不存在原始值\nvar a = null;\nconsole.log('a.valueOf()',a.valueOf()) // 报错\nconsole.log('a.toString()', a.toString()) // 报错\n\nvar b = undefined;\nconsole.log('a.valueOf()',a.valueOf()) // 报错\nconsole.log('a.toString()', a.toString()) // 报错\n\nvar c = new Number('123')\nconsole.log('Number.valueOf()',c.valueOf())  // 123\nconsole.log('Number.toString()', c.toString())  // '123'\n\nvar d = new String('12df');\nconsole.log('String.valueOf()',typeof d.valueOf()) // '12df'\nconsole.log('String.toString()', d.toString()) // '12df'\n\nvar e = new Boolean('fd');\nconsole.log('Boolean.valueOf()', e.valueOf()) // true\nconsole.log('Boolean.toString()', e.toString()) // true\n\n```\n> 由此可见除了`undefined`、`null`报错外，其他都返回自己本身。\n\n## 引用值转成原始值\n- `为什么`引用值要转成原始值呢？：因为在`隐式类型转换`的时候出现引用类型，javascript会吧`他`转成原始值进行`比较`。\n```javascript\nvar f = new Array();\nconsole.log('Array.valueOf()',f.valueOf())  // []\nconsole.log('Array.toString()', f.toString())  // ''\n\nvar e = new Array(3);\nconsole.log('Array.valueOf()',e.valueOf())  // [3]\nconsole.log('Array.toString()', e.toString())  // '3'\n\nvar g = new Array(1,2,3);\nconsole.log('Array.valueOf()',g.valueOf())  // [1, 2, 3]\nconsole.log('Array.toString()', g.toString())  // '1,2,3'\n\nvar j = new Object({});\nconsole.log('Object.valueOf()',j.valueOf())  // {}\nconsole.log('Object.toString()', j.toString())  // '[object Object]'\n```\n- 大家可以发现规律`valueOf()`一般都返回自己本身，而`toString()`转成string比较傻帽，铺垫已做好那么开始看**正题**。\n\n<!--more-->\n\n## 隐式类型转换\n### `Boolen()`、`if()`、`!!`\n- 以上操作都会强制转换成布尔类型，比较`强横`,只要记住以下转成false即可！！！\n| 值 |  转换符 |  结果  |\n| -- | ----  | --- |\n| \"\"  | Boolen(\"\") | false |\n| 0 | Boolen(+0) | false |\n| false  | Boolen(false) | false |\n| undefined  | Boolen(undefined) | false |\n| null  | Boolen(null) | false |\n| NAN  | Boolen(NAN) | false |\n\n- 其他均转成true\n```javascript\nconsole.log('Boolean([])',Boolean([])) // true\nconsole.log('Boolean({})',Boolean({})) // true\n```\n\n### `Number()`\n> Number类型转换就比较`复杂`.\n#### 1、基本数据类型转成Number,\n- Number类型转Number,保持原有值\n```javascript\nconsole.log('Number(1)',Number(1)) // 1\n```\n- Boolen类型转Number\n```javascript\nconsole.log('Number(true)',Number(true)) // 1 \nconsole.log('Number(false)',Number(false)) // 0\n```\n- undefined、null类型转Number\n```javascript\nconsole.log('Number(undefined)',Number(undefined)) // NaN\nconsole.log('Number(null)',Number(null)) // 0\n```\n- String类型转Number\n```javascript\nconsole.log('Number(空字符串)',Number('')) // 0\nconsole.log('Number(字符串123)',Number('123')) // 123\nconsole.log('Number(asdf)',Number('asdf')) // NaN\n```\n\n#### 2、引用数据类型转成Number\n- 除了转Boolen类型的时候是特殊的，其他类型转换需要将引用数据类型先转成`原始值`在转成`Number`。\n> <font color=\"red\">【原始值查找规则：如果valueOf有值返回valueOf,如果没有查找toString。 基本数据类型一般找valueOf,引用数据类型找toString】</font>\n```javascript\nconsole.log('Number([])',Number([])) // 0\n// toString原始值 \"\" 转成数组 0\nconsole.log('Number([4])',Number([4])) // 4\n// toString原始值 4 转成数组 4\nconsole.log('Number([1,2])',Number([1,2])) // NaN\n// toString原始值 '1,2' 转成数组 NaN\nconsole.log('Number([a])',Number(['a'])) // NaN\n// toString原始值 'a' 转成数组 NaN\nconsole.log('Number({})',Number({})) // NaN\n// toString原始值 [object Object]  NaN\nconsole.log('Number({a:1})',Number({a:1})) // NaN\n// toString原始值 [object Object]  NaN\n```\n\n### `==`\n\n- `==` 我们在代码中总会碰到，但是一般都是简单的比较，他在比较中又做了哪些转换呢？`请记住一下4点转换规则`\n\n1. `两边如果存在null或者undefined，他们只和对方以及**自身相等**，和其他的都不等`\n```javascript\nconsole.log('null == undefined', null == undefined) // true\nconsole.log('null == false',null == false) // false\nconsole.log('null == 0 ', null == 0 ) // false\n```\n\n2. `如果等式两边有布尔类型，要将布尔类型转化成数字`\n```javascript\nconsole.log('false == \"\"',false == \"\") // true\n```\n> 1. Number(false) // 0\n> 2. Number(\"\") // 0\n\n3. `如果等式两边有数字，就要将不是数字的那边转化成数字`\n```javascript\nconsole.log('false == \"\"',false == \"\") // true\n```\n\n4. `如果等式两边有引用类型存在，需要将引用类型转换为**原始值**,调用**ToPrimitive**方法.`\n```javascript\nfalse == [] // true\n```\n> 1. []的原始值`''`, 就变成了 false == ''\n> 2. false == '' 转成Number类型 0 == 0\n\n\n## 练习题\n\n- 如果下面练习题作对了，说明你真的理解`隐式转换了`\n\n```javascript\nconsole.log('false == [1]',false == [1]) \nconsole.log('false == [a]',false == ['a'])\nconsole.log('false == {}',false == {})\n```\n\n- 揭晓答案\n\n```javascript\nconsole.log('false == []',false == []) \n```\n\n> 1. [1]的原始值`toString([1])` => `1`, 简化为 `false == 1`\n> 2. false转成Number,`Number(false)` => `0`  所以 0 == 1  是`false`\n\n```javascript\nconsole.log('false == [a]',false == ['a']) \n```\n> 1. ['a']的原始值`toString([a])` => `'a'`, 简化为 `false == 'a'`\n> 2. false转成Number,`Number(false)` => `0`  简化为 0 == 'a' \n> 3. 'a'转成Number, `Number('a')` => `NaN` 所以 0 == NaN 是`false`\n\n```javascript\nconsole.log('false == {}',false == {})\n```\n> 1. ['a']的原始值`toString({})` => `[object,object]`, 简化为 `false == '[object,object]'`\n> 2. false转成Number,`Number(false)` => `0`  简化为 0 == 'a' \n> 3. 'a'转成Number, `Number('[object,object]')` => `NaN` 所以 0 == NaN 是`false`","slug":"type","published":1,"updated":"2022-03-20T02:40:14.339Z","_id":"cl0iw2rda000fitozenh72gsr","layout":"post","photos":[],"link":"","content":"<h2 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h2><ul>\n<li>在 ECMAScript 中，变量可以存在两种类型的值，即<a href=\"(https://www.w3school.com.cn/js/pro_js_value.asp)\">原始值</a>和<a href=\"https://www.w3school.com.cn/js/pro_js_value.asp\">引用值</a>,<code>这里就不做过多解释了。</code></li>\n<li>原始值有<code>5种数据类型</code>，<strong>undefined</strong>、<strong>null</strong>、<strong>boolean</strong>、<strong>string</strong>、<strong>number</strong></li>\n<li>引用值有<code>俩种引用类型</code>，<strong>Object</strong>、<strong>Array</strong></li>\n</ul>\n<h2 id=\"valueOf-、toString-方法解析\"><a href=\"#valueOf-、toString-方法解析\" class=\"headerlink\" title=\"valueOf()、toString()方法解析\"></a>valueOf()、toString()方法解析</h2><ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\">valueOf()</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">toString()</a> : <code>返回值为该对象的原始值。</code></p>\n</li>\n<li><p>那么5中基本数据类型的原始值分别是什么呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// null undefined 不存在原始值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.valueOf()&#x27;</span>,a.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.toString()&#x27;</span>, a.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.valueOf()&#x27;</span>,a.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.toString()&#x27;</span>, a.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number.valueOf()&#x27;</span>,c.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number.toString()&#x27;</span>, c.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;12df&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;String.valueOf()&#x27;</span>,<span class=\"keyword\">typeof</span> d.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// &#x27;12df&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;String.toString()&#x27;</span>, d.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// &#x27;12df&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"string\">&#x27;fd&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean.valueOf()&#x27;</span>, e.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean.toString()&#x27;</span>, e.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由此可见除了<code>undefined</code>、<code>null</code>报错外，其他都返回自己本身。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"引用值转成原始值\"><a href=\"#引用值转成原始值\" class=\"headerlink\" title=\"引用值转成原始值\"></a>引用值转成原始值</h2><ul>\n<li><code>为什么</code>引用值要转成原始值呢？：因为在<code>隐式类型转换</code>的时候出现引用类型，javascript会吧<code>他</code>转成原始值进行<code>比较</code>。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.valueOf()&#x27;</span>,f.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.toString()&#x27;</span>, f.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.valueOf()&#x27;</span>,e.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.toString()&#x27;</span>, e.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.valueOf()&#x27;</span>,g.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.toString()&#x27;</span>, g.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;1,2,3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(&#123;&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Object.valueOf()&#x27;</span>,j.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Object.toString()&#x27;</span>, j.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>大家可以发现规律<code>valueOf()</code>一般都返回自己本身，而<code>toString()</code>转成string比较傻帽，铺垫已做好那么开始看<strong>正题</strong>。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h2><h3 id=\"Boolen-、if-、\"><a href=\"#Boolen-、if-、\" class=\"headerlink\" title=\"Boolen()、if()、!!\"></a><code>Boolen()</code>、<code>if()</code>、<code>!!</code></h3><ul>\n<li><p>以上操作都会强制转换成布尔类型，比较<code>强横</code>,只要记住以下转成false即可！！！</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>转换符</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“”</td>\n<td>Boolen(“”)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>0</td>\n<td>Boolen(+0)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>false</td>\n<td>Boolen(false)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>Boolen(undefined)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>null</td>\n<td>Boolen(null)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>NAN</td>\n<td>Boolen(NAN)</td>\n<td>false</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>其他均转成true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean([])&#x27;</span>,<span class=\"title class_\">Boolean</span>([])) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean(&#123;&#125;)&#x27;</span>,<span class=\"title class_\">Boolean</span>(&#123;&#125;)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number()\"></a><code>Number()</code></h3><blockquote>\n<p>Number类型转换就比较<code>复杂</code>.</p>\n</blockquote>\n<h4 id=\"1、基本数据类型转成Number\"><a href=\"#1、基本数据类型转成Number\" class=\"headerlink\" title=\"1、基本数据类型转成Number,\"></a>1、基本数据类型转成Number,</h4><ul>\n<li>Number类型转Number,保持原有值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(1)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"number\">1</span>)) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></li>\n<li>Boolen类型转Number<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(true)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">true</span>)) <span class=\"comment\">// 1 </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(false)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">false</span>)) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure></li>\n<li>undefined、null类型转Number<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(undefined)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">undefined</span>)) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(null)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">null</span>)) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure></li>\n<li>String类型转Number<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(空字符串)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;&#x27;</span>)) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(字符串123)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>)) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(asdf)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;asdf&#x27;</span>)) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2、引用数据类型转成Number\"><a href=\"#2、引用数据类型转成Number\" class=\"headerlink\" title=\"2、引用数据类型转成Number\"></a>2、引用数据类型转成Number</h4><ul>\n<li>除了转Boolen类型的时候是特殊的，其他类型转换需要将引用数据类型先转成<code>原始值</code>在转成<code>Number</code>。<blockquote>\n<p><font color=\"red\">【原始值查找规则：如果valueOf有值返回valueOf,如果没有查找toString。 基本数据类型一般找valueOf,引用数据类型找toString】</font></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([])&#x27;</span>,<span class=\"title class_\">Number</span>([])) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 &quot;&quot; 转成数组 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([4])&#x27;</span>,<span class=\"title class_\">Number</span>([<span class=\"number\">4</span>])) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 4 转成数组 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([1,2])&#x27;</span>,<span class=\"title class_\">Number</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>])) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 &#x27;1,2&#x27; 转成数组 NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([a])&#x27;</span>,<span class=\"title class_\">Number</span>([<span class=\"string\">&#x27;a&#x27;</span>])) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 &#x27;a&#x27; 转成数组 NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(&#123;&#125;)&#x27;</span>,<span class=\"title class_\">Number</span>(&#123;&#125;)) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 [object Object]  NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(&#123;a:1&#125;)&#x27;</span>,<span class=\"title class_\">Number</span>(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;)) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 [object Object]  NaN</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"==\"></a><code>==</code></h3><ul>\n<li><code>==</code> 我们在代码中总会碰到，但是一般都是简单的比较，他在比较中又做了哪些转换呢？<code>请记住一下4点转换规则</code></li>\n</ul>\n<ol>\n<li><p><code>两边如果存在null或者undefined，他们只和对方以及**自身相等**，和其他的都不等</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;null == undefined&#x27;</span>, <span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;null == false&#x27;</span>,<span class=\"literal\">null</span> == <span class=\"literal\">false</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;null == 0 &#x27;</span>, <span class=\"literal\">null</span> == <span class=\"number\">0</span> ) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>如果等式两边有布尔类型，要将布尔类型转化成数字</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &quot;&quot;&#x27;</span>,<span class=\"literal\">false</span> == <span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>Number(false) // 0</li>\n<li>Number(“”) // 0</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>如果等式两边有数字，就要将不是数字的那边转化成数字</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &quot;&quot;&#x27;</span>,<span class=\"literal\">false</span> == <span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>如果等式两边有引用类型存在，需要将引用类型转换为**原始值**,调用**ToPrimitive**方法.</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> == [] <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[]的原始值<code>&#39;&#39;</code>, 就变成了 false == ‘’</li>\n<li>false == ‘’ 转成Number类型 0 == 0</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h2><ul>\n<li>如果下面练习题作对了，说明你真的理解<code>隐式转换了</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == [1]&#x27;</span>,<span class=\"literal\">false</span> == [<span class=\"number\">1</span>]) </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == [a]&#x27;</span>,<span class=\"literal\">false</span> == [<span class=\"string\">&#x27;a&#x27;</span>])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &#123;&#125;&#x27;</span>,<span class=\"literal\">false</span> == &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>揭晓答案</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == []&#x27;</span>,<span class=\"literal\">false</span> == []) </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>[1]的原始值<code>toString([1])</code> =&gt; <code>1</code>, 简化为 <code>false == 1</code></li>\n<li>false转成Number,<code>Number(false)</code> =&gt; <code>0</code>  所以 0 == 1  是<code>false</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == [a]&#x27;</span>,<span class=\"literal\">false</span> == [<span class=\"string\">&#x27;a&#x27;</span>]) </span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[‘a’]的原始值<code>toString([a])</code> =&gt; <code>&#39;a&#39;</code>, 简化为 <code>false == &#39;a&#39;</code></li>\n<li>false转成Number,<code>Number(false)</code> =&gt; <code>0</code>  简化为 0 == ‘a’ </li>\n<li>‘a’转成Number, <code>Number(&#39;a&#39;)</code> =&gt; <code>NaN</code> 所以 0 == NaN 是<code>false</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &#123;&#125;&#x27;</span>,<span class=\"literal\">false</span> == &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[‘a’]的原始值<code>toString(&#123;&#125;)</code> =&gt; <code>[object,object]</code>, 简化为 <code>false == &#39;[object,object]&#39;</code></li>\n<li>false转成Number,<code>Number(false)</code> =&gt; <code>0</code>  简化为 0 == ‘a’ </li>\n<li>‘a’转成Number, <code>Number(&#39;[object,object]&#39;)</code> =&gt; <code>NaN</code> 所以 0 == NaN 是<code>false</code></li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h2><ul>\n<li>在 ECMAScript 中，变量可以存在两种类型的值，即<a href=\"(https://www.w3school.com.cn/js/pro_js_value.asp)\">原始值</a>和<a href=\"https://www.w3school.com.cn/js/pro_js_value.asp\">引用值</a>,<code>这里就不做过多解释了。</code></li>\n<li>原始值有<code>5种数据类型</code>，<strong>undefined</strong>、<strong>null</strong>、<strong>boolean</strong>、<strong>string</strong>、<strong>number</strong></li>\n<li>引用值有<code>俩种引用类型</code>，<strong>Object</strong>、<strong>Array</strong></li>\n</ul>\n<h2 id=\"valueOf-、toString-方法解析\"><a href=\"#valueOf-、toString-方法解析\" class=\"headerlink\" title=\"valueOf()、toString()方法解析\"></a>valueOf()、toString()方法解析</h2><ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\">valueOf()</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">toString()</a> : <code>返回值为该对象的原始值。</code></p>\n</li>\n<li><p>那么5中基本数据类型的原始值分别是什么呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// null undefined 不存在原始值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.valueOf()&#x27;</span>,a.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.toString()&#x27;</span>, a.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.valueOf()&#x27;</span>,a.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.toString()&#x27;</span>, a.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number.valueOf()&#x27;</span>,c.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number.toString()&#x27;</span>, c.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;12df&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;String.valueOf()&#x27;</span>,<span class=\"keyword\">typeof</span> d.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// &#x27;12df&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;String.toString()&#x27;</span>, d.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// &#x27;12df&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"string\">&#x27;fd&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean.valueOf()&#x27;</span>, e.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean.toString()&#x27;</span>, e.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由此可见除了<code>undefined</code>、<code>null</code>报错外，其他都返回自己本身。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"引用值转成原始值\"><a href=\"#引用值转成原始值\" class=\"headerlink\" title=\"引用值转成原始值\"></a>引用值转成原始值</h2><ul>\n<li><code>为什么</code>引用值要转成原始值呢？：因为在<code>隐式类型转换</code>的时候出现引用类型，javascript会吧<code>他</code>转成原始值进行<code>比较</code>。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.valueOf()&#x27;</span>,f.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.toString()&#x27;</span>, f.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.valueOf()&#x27;</span>,e.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.toString()&#x27;</span>, e.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.valueOf()&#x27;</span>,g.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Array.toString()&#x27;</span>, g.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;1,2,3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> j = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(&#123;&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Object.valueOf()&#x27;</span>,j.<span class=\"title function_\">valueOf</span>())  <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Object.toString()&#x27;</span>, j.<span class=\"title function_\">toString</span>())  <span class=\"comment\">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>大家可以发现规律<code>valueOf()</code>一般都返回自己本身，而<code>toString()</code>转成string比较傻帽，铺垫已做好那么开始看<strong>正题</strong>。</li>\n</ul>","more":"<h2 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h2><h3 id=\"Boolen-、if-、\"><a href=\"#Boolen-、if-、\" class=\"headerlink\" title=\"Boolen()、if()、!!\"></a><code>Boolen()</code>、<code>if()</code>、<code>!!</code></h3><ul>\n<li><p>以上操作都会强制转换成布尔类型，比较<code>强横</code>,只要记住以下转成false即可！！！</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>转换符</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“”</td>\n<td>Boolen(“”)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>0</td>\n<td>Boolen(+0)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>false</td>\n<td>Boolen(false)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>Boolen(undefined)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>null</td>\n<td>Boolen(null)</td>\n<td>false</td>\n</tr>\n<tr>\n<td>NAN</td>\n<td>Boolen(NAN)</td>\n<td>false</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>其他均转成true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean([])&#x27;</span>,<span class=\"title class_\">Boolean</span>([])) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Boolean(&#123;&#125;)&#x27;</span>,<span class=\"title class_\">Boolean</span>(&#123;&#125;)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number()\"></a><code>Number()</code></h3><blockquote>\n<p>Number类型转换就比较<code>复杂</code>.</p>\n</blockquote>\n<h4 id=\"1、基本数据类型转成Number\"><a href=\"#1、基本数据类型转成Number\" class=\"headerlink\" title=\"1、基本数据类型转成Number,\"></a>1、基本数据类型转成Number,</h4><ul>\n<li>Number类型转Number,保持原有值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(1)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"number\">1</span>)) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></li>\n<li>Boolen类型转Number<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(true)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">true</span>)) <span class=\"comment\">// 1 </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(false)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">false</span>)) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure></li>\n<li>undefined、null类型转Number<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(undefined)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">undefined</span>)) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(null)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"literal\">null</span>)) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure></li>\n<li>String类型转Number<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(空字符串)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;&#x27;</span>)) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(字符串123)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>)) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(asdf)&#x27;</span>,<span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;asdf&#x27;</span>)) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2、引用数据类型转成Number\"><a href=\"#2、引用数据类型转成Number\" class=\"headerlink\" title=\"2、引用数据类型转成Number\"></a>2、引用数据类型转成Number</h4><ul>\n<li>除了转Boolen类型的时候是特殊的，其他类型转换需要将引用数据类型先转成<code>原始值</code>在转成<code>Number</code>。<blockquote>\n<p><font color=\"red\">【原始值查找规则：如果valueOf有值返回valueOf,如果没有查找toString。 基本数据类型一般找valueOf,引用数据类型找toString】</font></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([])&#x27;</span>,<span class=\"title class_\">Number</span>([])) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 &quot;&quot; 转成数组 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([4])&#x27;</span>,<span class=\"title class_\">Number</span>([<span class=\"number\">4</span>])) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 4 转成数组 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([1,2])&#x27;</span>,<span class=\"title class_\">Number</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>])) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 &#x27;1,2&#x27; 转成数组 NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number([a])&#x27;</span>,<span class=\"title class_\">Number</span>([<span class=\"string\">&#x27;a&#x27;</span>])) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 &#x27;a&#x27; 转成数组 NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(&#123;&#125;)&#x27;</span>,<span class=\"title class_\">Number</span>(&#123;&#125;)) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 [object Object]  NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Number(&#123;a:1&#125;)&#x27;</span>,<span class=\"title class_\">Number</span>(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;)) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// toString原始值 [object Object]  NaN</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"==\"></a><code>==</code></h3><ul>\n<li><code>==</code> 我们在代码中总会碰到，但是一般都是简单的比较，他在比较中又做了哪些转换呢？<code>请记住一下4点转换规则</code></li>\n</ul>\n<ol>\n<li><p><code>两边如果存在null或者undefined，他们只和对方以及**自身相等**，和其他的都不等</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;null == undefined&#x27;</span>, <span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;null == false&#x27;</span>,<span class=\"literal\">null</span> == <span class=\"literal\">false</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;null == 0 &#x27;</span>, <span class=\"literal\">null</span> == <span class=\"number\">0</span> ) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>如果等式两边有布尔类型，要将布尔类型转化成数字</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &quot;&quot;&#x27;</span>,<span class=\"literal\">false</span> == <span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>Number(false) // 0</li>\n<li>Number(“”) // 0</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>如果等式两边有数字，就要将不是数字的那边转化成数字</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &quot;&quot;&#x27;</span>,<span class=\"literal\">false</span> == <span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>如果等式两边有引用类型存在，需要将引用类型转换为**原始值**,调用**ToPrimitive**方法.</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> == [] <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[]的原始值<code>&#39;&#39;</code>, 就变成了 false == ‘’</li>\n<li>false == ‘’ 转成Number类型 0 == 0</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h2><ul>\n<li>如果下面练习题作对了，说明你真的理解<code>隐式转换了</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == [1]&#x27;</span>,<span class=\"literal\">false</span> == [<span class=\"number\">1</span>]) </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == [a]&#x27;</span>,<span class=\"literal\">false</span> == [<span class=\"string\">&#x27;a&#x27;</span>])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &#123;&#125;&#x27;</span>,<span class=\"literal\">false</span> == &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>揭晓答案</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == []&#x27;</span>,<span class=\"literal\">false</span> == []) </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>[1]的原始值<code>toString([1])</code> =&gt; <code>1</code>, 简化为 <code>false == 1</code></li>\n<li>false转成Number,<code>Number(false)</code> =&gt; <code>0</code>  所以 0 == 1  是<code>false</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == [a]&#x27;</span>,<span class=\"literal\">false</span> == [<span class=\"string\">&#x27;a&#x27;</span>]) </span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[‘a’]的原始值<code>toString([a])</code> =&gt; <code>&#39;a&#39;</code>, 简化为 <code>false == &#39;a&#39;</code></li>\n<li>false转成Number,<code>Number(false)</code> =&gt; <code>0</code>  简化为 0 == ‘a’ </li>\n<li>‘a’转成Number, <code>Number(&#39;a&#39;)</code> =&gt; <code>NaN</code> 所以 0 == NaN 是<code>false</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;false == &#123;&#125;&#x27;</span>,<span class=\"literal\">false</span> == &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[‘a’]的原始值<code>toString(&#123;&#125;)</code> =&gt; <code>[object,object]</code>, 简化为 <code>false == &#39;[object,object]&#39;</code></li>\n<li>false转成Number,<code>Number(false)</code> =&gt; <code>0</code>  简化为 0 == ‘a’ </li>\n<li>‘a’转成Number, <code>Number(&#39;[object,object]&#39;)</code> =&gt; <code>NaN</code> 所以 0 == NaN 是<code>false</code></li>\n</ol>\n</blockquote>"},{"title":"执行shell命令","date":"2022-01-27T08:15:24.000Z","comments":1,"_content":"\n\n## child_process子进程\n- 执行shell命令\n\n```javascript\nconst childprocess = require('child_process')\nchildprocess.spawn('cd mian && npm run serve',{stdio:\"inherit\",shell:true})\n```\n\n- 删除非空目录\n\n```javascript\nconst childprocess = require('child_process')\nchildprocess.spawn('rm -rf dist',{stdio:\"inherit\",shell:true})\n```\n\n## process获取当前目录路径\n```javascript\n// 获取当前文件所在目录\nlet path = process.cwd()\n```\n","source":"_posts/node.md","raw":"---\ntitle: 执行shell命令\ndate: 2022-01-27 16:15:24\ncategories: node\ntags: [node]\ncomments: true\n---\n\n\n## child_process子进程\n- 执行shell命令\n\n```javascript\nconst childprocess = require('child_process')\nchildprocess.spawn('cd mian && npm run serve',{stdio:\"inherit\",shell:true})\n```\n\n- 删除非空目录\n\n```javascript\nconst childprocess = require('child_process')\nchildprocess.spawn('rm -rf dist',{stdio:\"inherit\",shell:true})\n```\n\n## process获取当前目录路径\n```javascript\n// 获取当前文件所在目录\nlet path = process.cwd()\n```\n","slug":"node","published":1,"updated":"2022-03-20T02:40:14.338Z","_id":"cl0iw2rdd000jitoz16ifhg7v","layout":"post","photos":[],"link":"","content":"<h2 id=\"child-process子进程\"><a href=\"#child-process子进程\" class=\"headerlink\" title=\"child_process子进程\"></a>child_process子进程</h2><ul>\n<li>执行shell命令</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> childprocess = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">childprocess.<span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;cd mian &amp;&amp; npm run serve&#x27;</span>,&#123;<span class=\"attr\">stdio</span>:<span class=\"string\">&quot;inherit&quot;</span>,<span class=\"attr\">shell</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除非空目录</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> childprocess = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">childprocess.<span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;rm -rf dist&#x27;</span>,&#123;<span class=\"attr\">stdio</span>:<span class=\"string\">&quot;inherit&quot;</span>,<span class=\"attr\">shell</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"process获取当前目录路径\"><a href=\"#process获取当前目录路径\" class=\"headerlink\" title=\"process获取当前目录路径\"></a>process获取当前目录路径</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前文件所在目录</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path = process.<span class=\"title function_\">cwd</span>()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"child-process子进程\"><a href=\"#child-process子进程\" class=\"headerlink\" title=\"child_process子进程\"></a>child_process子进程</h2><ul>\n<li>执行shell命令</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> childprocess = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">childprocess.<span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;cd mian &amp;&amp; npm run serve&#x27;</span>,&#123;<span class=\"attr\">stdio</span>:<span class=\"string\">&quot;inherit&quot;</span>,<span class=\"attr\">shell</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除非空目录</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> childprocess = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\">childprocess.<span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;rm -rf dist&#x27;</span>,&#123;<span class=\"attr\">stdio</span>:<span class=\"string\">&quot;inherit&quot;</span>,<span class=\"attr\">shell</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"process获取当前目录路径\"><a href=\"#process获取当前目录路径\" class=\"headerlink\" title=\"process获取当前目录路径\"></a>process获取当前目录路径</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前文件所在目录</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path = process.<span class=\"title function_\">cwd</span>()</span><br></pre></td></tr></table></figure>\n"},{"title":"typescript/webpack项目初始化","date":"2021-11-17T06:30:24.000Z","comments":0,"_content":"\n\n> 当只做几个单页面的时候，并不需要用到其他框架，可以考虑ts+jquery+webpack简单方便,[代码地址](https://github.com/Even-cxw/TypeScript/tree/main/ts05-webpack-jquery)。\n\n\n# 版本\n- node -v `v10.15.3`\n- npm -v  `7.20.6`\n- tsc -v  `4.4.3` <font color=\"red\">【若没有，请全局安装`npm install typescript -g`】</font>\n- webpack -v  `5.52.1`\n- webpack-cli -v `3.3.12` <font color=\"red\">【webpack-cli下载版本过高，会导致版本不兼容等】</font>\n- webpack-dev-server -v  `3.11.2`\n\n<!-- more -->\n\n# 结构\n> 跟其他项目一样有个<font color=\"red\">【src】</font>，执行打包命令行后，会有个dist文件夹，里面才是上线的代码\n- `src/asset`: 存放第三方库eg:**jqeury**等，webpack不会做打包处理，直接原封copy\n- `src/css` : 样式文件夹\n- `src/images` : 图片文件夹\n- `src/js` : typescript转移后生成的js\n- `src/ts` : ts文件\n- `src/index.html` : 跟页面<font color=\"red\">【需要手动引入js等文件】</font>\n\n# npm初始化\n- 新建目录proect并在当前目录执行`npm init` 一路回车，会在当前目录下生成package.json\n- 修改package.json文件，找到`scripts`对象，<font color=\"red\">莫急、等webpack配置完才可运行</font>\n```javascript\n  \"dev\": \"cross-env NODE_ENV=sit webpack-dev-server\",\n  \"sit\": \"cross-env NODE_ENV=sit webpack\",\n  \"uat\": \"cross-env NODE_ENV=uat webpack\",\n  \"pat\": \"cross-env NODE_ENV=pat webpack\"\n```\n- 下载插件`npm install cross-env -S` \n> cross-env作用：当我们在打包的时候需要区分**测试环境**、**生产环境**，不同环境打包配置不一样，cross-env可以自定义变量传递到node.js环境中。[官方解释](https://www.npmjs.com/package/cross-env)\n> 如下命令：`cross-env NODE_ENV=sit` 相当于在<font color=\"red\">node.js</font>中执行了如下代码\n```javascript\n// 切记node.js环境\nprocess.env.NODE_ENV = 'sit'\n// 所以可以通过 process.env对象访问\n```\n\n# typescript初始化\n- 执行`tsc --init` 会生成tsconfig.json配置文件\n- 修改配置文件，我的配置文件如下\n> 如下配置执行`tsc`时，会自动检索`include`配置中的ts文件，输出到`outDir`配置js文件中，并转义成es5\n```javascript\n{\n  \"compilerOptions\": {\n    \"removeComments\": true, /*不输出注释*/\n    \"sourceMap\": false,/*生成目标文件 inline sourceMap*/\n    \"declaration\": false,/*生成响应的 d.ts文件*/\n    \"strict\": true,/*启用所有严格类型检查选项*/\n    \"strictFunctionTypes\": false,/*不润徐函数参数双向协变*/\n    \"moduleResolution\": \"node\",/*指定模块解析器*/\n    \"target\": \"ES5\",/**/\n    \"outDir\": \"./src/js\",/*指定文件的输出目录*/\n    \"lib\":[\n      \"ES5\",\n      \"ESNext\",\n      \"DOM\",\n      \"DOM.Iterable\",\n      \"ScriptHost\",\n    ]\n  },\n  \"include\": [\"./src/ts/*\"]/*编译器需要编译的文件或目录，支持通配符*/\n}\n```\n\n# 配置webpack\n- 安装依赖`npm install webpack@5 webpack-cli@3 webpack-dev-server@3 -D`\n- 安装依赖`npm install copy-webpack-plugin -D`\n- 当前页面新建文件`webpack.config.js`  \n> `mode`模式可根据大家爱好自行修改，当然模式不一样，打包后的代码也不一样。\n```javascript\nconst path = require('path');\nconst fs = require('fs');\nconst webpack = require('webpack');\nconst CopyPlugin = require('copy-webpack-plugin');\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nconst actCodeUUIDSit = '7ba408f51c5c42b98133eeec145e70ca';\nconst actCodeUUIDUat = 'ba408f51c5c42b98133eeec145e70ca';\nlet actCodeUUID = process.env.NODE_ENV == 'sit'?actCodeUUIDSit:actCodeUUIDUat;\nlet dirpath ='dist/' + process.env.NODE_ENV + '/'+ actCodeUUID;\nmodule.exports = {\n  mode: 'none',\n  entry: {\n    ...entryPath(__dirname+'/src/js')\n  },\n  output: {\n    path: path.resolve(__dirname, dirpath+'/js'),\n    publicPath: 'js',\n    filename: '[name].js',\n  },\n  devServer: {\n    port: 9999,\n    contentBase: 'src',\n    proxy: {\n      '/pfhd-external-gateway': {\n       target: 'http://172.29.24.150',\n       changeOrigin: true,\n       pathRewrite: {\n         '^/pfhd-external-gateway': '/pfhd-external-gateway'\n       }\n     }\n   },\n  },\n  resolve:{\n    alias: {\n      // jquery:path.resolve(__dirname, './src/js/jquery.js')\n    },\n  },\n  plugins: [\n    // new webpack.ProvidePlugin({\n    //   $:'jquery',\n    // }),\n    new CleanWebpackPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.actCodeUUID': JSON.stringify(actCodeUUID),\n    }),\n    new CopyPlugin({\n      patterns:[\n        ...copyPath(__dirname+'/src')\n      ]\n    })\n  ]\n}\n// 读取入口文件\nfunction entryPath(currentDirPath) {\n  let entryObj = {};\n  let arrPath = fs.readdirSync(currentDirPath)\n  arrPath.forEach((item) => {\n    entryObj[item.split('.')[0]] = path.resolve(__dirname, './src/js/'+item)\n  })\n  return entryObj;\n}\n// 读取需要copy的文件\nfunction copyPath(currentDirPath) {\n  let copyPathArr = [];\n  let arrPath = fs.readdirSync(currentDirPath)\n  arrPath.forEach((item) => {\n    if (item.indexOf('js') == -1 && item.indexOf('ts') == -1) {\n      let obj = {from:__dirname+'/src/'+item,to:__dirname+'/'+dirpath+'/'+item}\n      copyPathArr.push(obj);\n    }\n  })\n  return copyPathArr;\n}\n```\n\n**1、配置文件中用到了node.js模块`path`、`fs`、`process`**\n- [path](http://nodejs.cn/api/path.html): node.js环境中因操作系统不同，文件路径也有有所差异eg:`\\`、`/`,为了统一化并快速获取根目录，在node中才有了`__dirname`这个全局变量，可以返回当前文件的**绝对路径**。\n> 切记`__dirname`是node中的全局变量，如何验证？ 可以创建个js文件，\n```javascript\n// index.js\nconsole.log('__dirname', __dirname);\n```\n> 终端在此目录执行`node index.js`命令， 会发现输出当前磁盘**根目录**  <font color=\"green\">【因为这是在node环境执行的脚本】</font>\n> 你若新建index.html引入index.js文件的时候，会发现控制台输出 `undefined`, 因为浏览器环境根本没有这个变量。\n- [fs](http://nodejs.cn/api/fs.html): fs.readdirSync(dirPath)读取`src`目录下的文件， 并返回数组形式的文件名，eg:['assets', 'css', 'js]等。\n- [process](http://nodejs.cn/api/process.html#processenv):对象提供有关当前 Node.js 进程的信息、用户环境信息等，如：node安装目录等。\n\n**2、配置文件中用到了webpack插件`copy-webapck-plugin`**\n- [copy-webapck-plugin](https://www.npmjs.com/package/copy-webpack-plugin):简单暴力只需要按照文档配置入口出口，就可以将文件copy一份到出口中。\n> 可以将一些不需要处理的文件（图片、jquery、等）直接copy一份\n- webpack自带属性`DefinePlugin`：可以将node.js环境中的变量托管到**js**代码中实现互通\n> 打包的时候会自动赋值\n```javascript\n// webpack.config.js 文件\nnew webpack.definePlugin({\n    'process.env.actCodeUUID':JSON.stringify(actCodeUUID)\n})\n// index.js文件访问\nconsole.log(process) // undefined\nconsole.log(process.env.actCodeUUID) // 有值\n\n```","source":"_posts/typescript-webpack.md","raw":"---\ntitle: typescript/webpack项目初始化\ndate: 2021-11-17 14:30:24\ncategories: typescript\ntags: [typescript, webpack]\ncomments: false\n---\n\n\n> 当只做几个单页面的时候，并不需要用到其他框架，可以考虑ts+jquery+webpack简单方便,[代码地址](https://github.com/Even-cxw/TypeScript/tree/main/ts05-webpack-jquery)。\n\n\n# 版本\n- node -v `v10.15.3`\n- npm -v  `7.20.6`\n- tsc -v  `4.4.3` <font color=\"red\">【若没有，请全局安装`npm install typescript -g`】</font>\n- webpack -v  `5.52.1`\n- webpack-cli -v `3.3.12` <font color=\"red\">【webpack-cli下载版本过高，会导致版本不兼容等】</font>\n- webpack-dev-server -v  `3.11.2`\n\n<!-- more -->\n\n# 结构\n> 跟其他项目一样有个<font color=\"red\">【src】</font>，执行打包命令行后，会有个dist文件夹，里面才是上线的代码\n- `src/asset`: 存放第三方库eg:**jqeury**等，webpack不会做打包处理，直接原封copy\n- `src/css` : 样式文件夹\n- `src/images` : 图片文件夹\n- `src/js` : typescript转移后生成的js\n- `src/ts` : ts文件\n- `src/index.html` : 跟页面<font color=\"red\">【需要手动引入js等文件】</font>\n\n# npm初始化\n- 新建目录proect并在当前目录执行`npm init` 一路回车，会在当前目录下生成package.json\n- 修改package.json文件，找到`scripts`对象，<font color=\"red\">莫急、等webpack配置完才可运行</font>\n```javascript\n  \"dev\": \"cross-env NODE_ENV=sit webpack-dev-server\",\n  \"sit\": \"cross-env NODE_ENV=sit webpack\",\n  \"uat\": \"cross-env NODE_ENV=uat webpack\",\n  \"pat\": \"cross-env NODE_ENV=pat webpack\"\n```\n- 下载插件`npm install cross-env -S` \n> cross-env作用：当我们在打包的时候需要区分**测试环境**、**生产环境**，不同环境打包配置不一样，cross-env可以自定义变量传递到node.js环境中。[官方解释](https://www.npmjs.com/package/cross-env)\n> 如下命令：`cross-env NODE_ENV=sit` 相当于在<font color=\"red\">node.js</font>中执行了如下代码\n```javascript\n// 切记node.js环境\nprocess.env.NODE_ENV = 'sit'\n// 所以可以通过 process.env对象访问\n```\n\n# typescript初始化\n- 执行`tsc --init` 会生成tsconfig.json配置文件\n- 修改配置文件，我的配置文件如下\n> 如下配置执行`tsc`时，会自动检索`include`配置中的ts文件，输出到`outDir`配置js文件中，并转义成es5\n```javascript\n{\n  \"compilerOptions\": {\n    \"removeComments\": true, /*不输出注释*/\n    \"sourceMap\": false,/*生成目标文件 inline sourceMap*/\n    \"declaration\": false,/*生成响应的 d.ts文件*/\n    \"strict\": true,/*启用所有严格类型检查选项*/\n    \"strictFunctionTypes\": false,/*不润徐函数参数双向协变*/\n    \"moduleResolution\": \"node\",/*指定模块解析器*/\n    \"target\": \"ES5\",/**/\n    \"outDir\": \"./src/js\",/*指定文件的输出目录*/\n    \"lib\":[\n      \"ES5\",\n      \"ESNext\",\n      \"DOM\",\n      \"DOM.Iterable\",\n      \"ScriptHost\",\n    ]\n  },\n  \"include\": [\"./src/ts/*\"]/*编译器需要编译的文件或目录，支持通配符*/\n}\n```\n\n# 配置webpack\n- 安装依赖`npm install webpack@5 webpack-cli@3 webpack-dev-server@3 -D`\n- 安装依赖`npm install copy-webpack-plugin -D`\n- 当前页面新建文件`webpack.config.js`  \n> `mode`模式可根据大家爱好自行修改，当然模式不一样，打包后的代码也不一样。\n```javascript\nconst path = require('path');\nconst fs = require('fs');\nconst webpack = require('webpack');\nconst CopyPlugin = require('copy-webpack-plugin');\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nconst actCodeUUIDSit = '7ba408f51c5c42b98133eeec145e70ca';\nconst actCodeUUIDUat = 'ba408f51c5c42b98133eeec145e70ca';\nlet actCodeUUID = process.env.NODE_ENV == 'sit'?actCodeUUIDSit:actCodeUUIDUat;\nlet dirpath ='dist/' + process.env.NODE_ENV + '/'+ actCodeUUID;\nmodule.exports = {\n  mode: 'none',\n  entry: {\n    ...entryPath(__dirname+'/src/js')\n  },\n  output: {\n    path: path.resolve(__dirname, dirpath+'/js'),\n    publicPath: 'js',\n    filename: '[name].js',\n  },\n  devServer: {\n    port: 9999,\n    contentBase: 'src',\n    proxy: {\n      '/pfhd-external-gateway': {\n       target: 'http://172.29.24.150',\n       changeOrigin: true,\n       pathRewrite: {\n         '^/pfhd-external-gateway': '/pfhd-external-gateway'\n       }\n     }\n   },\n  },\n  resolve:{\n    alias: {\n      // jquery:path.resolve(__dirname, './src/js/jquery.js')\n    },\n  },\n  plugins: [\n    // new webpack.ProvidePlugin({\n    //   $:'jquery',\n    // }),\n    new CleanWebpackPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.actCodeUUID': JSON.stringify(actCodeUUID),\n    }),\n    new CopyPlugin({\n      patterns:[\n        ...copyPath(__dirname+'/src')\n      ]\n    })\n  ]\n}\n// 读取入口文件\nfunction entryPath(currentDirPath) {\n  let entryObj = {};\n  let arrPath = fs.readdirSync(currentDirPath)\n  arrPath.forEach((item) => {\n    entryObj[item.split('.')[0]] = path.resolve(__dirname, './src/js/'+item)\n  })\n  return entryObj;\n}\n// 读取需要copy的文件\nfunction copyPath(currentDirPath) {\n  let copyPathArr = [];\n  let arrPath = fs.readdirSync(currentDirPath)\n  arrPath.forEach((item) => {\n    if (item.indexOf('js') == -1 && item.indexOf('ts') == -1) {\n      let obj = {from:__dirname+'/src/'+item,to:__dirname+'/'+dirpath+'/'+item}\n      copyPathArr.push(obj);\n    }\n  })\n  return copyPathArr;\n}\n```\n\n**1、配置文件中用到了node.js模块`path`、`fs`、`process`**\n- [path](http://nodejs.cn/api/path.html): node.js环境中因操作系统不同，文件路径也有有所差异eg:`\\`、`/`,为了统一化并快速获取根目录，在node中才有了`__dirname`这个全局变量，可以返回当前文件的**绝对路径**。\n> 切记`__dirname`是node中的全局变量，如何验证？ 可以创建个js文件，\n```javascript\n// index.js\nconsole.log('__dirname', __dirname);\n```\n> 终端在此目录执行`node index.js`命令， 会发现输出当前磁盘**根目录**  <font color=\"green\">【因为这是在node环境执行的脚本】</font>\n> 你若新建index.html引入index.js文件的时候，会发现控制台输出 `undefined`, 因为浏览器环境根本没有这个变量。\n- [fs](http://nodejs.cn/api/fs.html): fs.readdirSync(dirPath)读取`src`目录下的文件， 并返回数组形式的文件名，eg:['assets', 'css', 'js]等。\n- [process](http://nodejs.cn/api/process.html#processenv):对象提供有关当前 Node.js 进程的信息、用户环境信息等，如：node安装目录等。\n\n**2、配置文件中用到了webpack插件`copy-webapck-plugin`**\n- [copy-webapck-plugin](https://www.npmjs.com/package/copy-webpack-plugin):简单暴力只需要按照文档配置入口出口，就可以将文件copy一份到出口中。\n> 可以将一些不需要处理的文件（图片、jquery、等）直接copy一份\n- webpack自带属性`DefinePlugin`：可以将node.js环境中的变量托管到**js**代码中实现互通\n> 打包的时候会自动赋值\n```javascript\n// webpack.config.js 文件\nnew webpack.definePlugin({\n    'process.env.actCodeUUID':JSON.stringify(actCodeUUID)\n})\n// index.js文件访问\nconsole.log(process) // undefined\nconsole.log(process.env.actCodeUUID) // 有值\n\n```","slug":"typescript-webpack","published":1,"updated":"2022-03-20T02:40:14.340Z","_id":"cl0iw2rdf000litoz5bw88ul6","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>当只做几个单页面的时候，并不需要用到其他框架，可以考虑ts+jquery+webpack简单方便,<a href=\"https://github.com/Even-cxw/TypeScript/tree/main/ts05-webpack-jquery\">代码地址</a>。</p>\n</blockquote>\n<h1 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h1><ul>\n<li>node -v <code>v10.15.3</code></li>\n<li>npm -v  <code>7.20.6</code></li>\n<li>tsc -v  <code>4.4.3</code> <font color=\"red\">【若没有，请全局安装<code>npm install typescript -g</code>】</font></li>\n<li>webpack -v  <code>5.52.1</code></li>\n<li>webpack-cli -v <code>3.3.12</code> <font color=\"red\">【webpack-cli下载版本过高，会导致版本不兼容等】</font></li>\n<li>webpack-dev-server -v  <code>3.11.2</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><blockquote>\n<p>跟其他项目一样有个<font color=\"red\">【src】</font>，执行打包命令行后，会有个dist文件夹，里面才是上线的代码</p>\n</blockquote>\n<ul>\n<li><code>src/asset</code>: 存放第三方库eg:<strong>jqeury</strong>等，webpack不会做打包处理，直接原封copy</li>\n<li><code>src/css</code> : 样式文件夹</li>\n<li><code>src/images</code> : 图片文件夹</li>\n<li><code>src/js</code> : typescript转移后生成的js</li>\n<li><code>src/ts</code> : ts文件</li>\n<li><code>src/index.html</code> : 跟页面<font color=\"red\">【需要手动引入js等文件】</font></li>\n</ul>\n<h1 id=\"npm初始化\"><a href=\"#npm初始化\" class=\"headerlink\" title=\"npm初始化\"></a>npm初始化</h1><ul>\n<li>新建目录proect并在当前目录执行<code>npm init</code> 一路回车，会在当前目录下生成package.json</li>\n<li>修改package.json文件，找到<code>scripts</code>对象，<font color=\"red\">莫急、等webpack配置完才可运行</font><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=sit webpack-dev-server&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;sit&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=sit webpack&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;uat&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=uat webpack&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;pat&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=pat webpack&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>下载插件<code>npm install cross-env -S</code> <blockquote>\n<p>cross-env作用：当我们在打包的时候需要区分<strong>测试环境</strong>、<strong>生产环境</strong>，不同环境打包配置不一样，cross-env可以自定义变量传递到node.js环境中。<a href=\"https://www.npmjs.com/package/cross-env\">官方解释</a><br>如下命令：<code>cross-env NODE_ENV=sit</code> 相当于在<font color=\"red\">node.js</font>中执行了如下代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切记node.js环境</span></span><br><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> = <span class=\"string\">&#x27;sit&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以通过 process.env对象访问</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"typescript初始化\"><a href=\"#typescript初始化\" class=\"headerlink\" title=\"typescript初始化\"></a>typescript初始化</h1><ul>\n<li>执行<code>tsc --init</code> 会生成tsconfig.json配置文件</li>\n<li>修改配置文件，我的配置文件如下<blockquote>\n<p>如下配置执行<code>tsc</code>时，会自动检索<code>include</code>配置中的ts文件，输出到<code>outDir</code>配置js文件中，并转义成es5</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;removeComments&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">/*不输出注释*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">false</span>,<span class=\"comment\">/*生成目标文件 inline sourceMap*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;declaration&quot;</span>: <span class=\"literal\">false</span>,<span class=\"comment\">/*生成响应的 d.ts文件*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,<span class=\"comment\">/*启用所有严格类型检查选项*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strictFunctionTypes&quot;</span>: <span class=\"literal\">false</span>,<span class=\"comment\">/*不润徐函数参数双向协变*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,<span class=\"comment\">/*指定模块解析器*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;ES5&quot;</span>,<span class=\"comment\">/**/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;./src/js&quot;</span>,<span class=\"comment\">/*指定文件的输出目录*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>:[</span><br><span class=\"line\">      <span class=\"string\">&quot;ES5&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ESNext&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;DOM&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;DOM.Iterable&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ScriptHost&quot;</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&quot;./src/ts/*&quot;</span>]<span class=\"comment\">/*编译器需要编译的文件或目录，支持通配符*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h1><ul>\n<li>安装依赖<code>npm install webpack@5 webpack-cli@3 webpack-dev-server@3 -D</code></li>\n<li>安装依赖<code>npm install copy-webpack-plugin -D</code></li>\n<li>当前页面新建文件<code>webpack.config.js</code>  <blockquote>\n<p><code>mode</code>模式可根据大家爱好自行修改，当然模式不一样，打包后的代码也不一样。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CopyPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"title class_\">CleanWebpackPlugin</span>&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> actCodeUUIDSit = <span class=\"string\">&#x27;7ba408f51c5c42b98133eeec145e70ca&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> actCodeUUIDUat = <span class=\"string\">&#x27;ba408f51c5c42b98133eeec145e70ca&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> actCodeUUID = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> == <span class=\"string\">&#x27;sit&#x27;</span>?<span class=\"attr\">actCodeUUIDSit</span>:actCodeUUIDUat;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dirpath =<span class=\"string\">&#x27;dist/&#x27;</span> + process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> + <span class=\"string\">&#x27;/&#x27;</span>+ actCodeUUID;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">entryPath</span>(__dirname+<span class=\"string\">&#x27;/src/js&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, dirpath+<span class=\"string\">&#x27;/js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9999</span>,</span><br><span class=\"line\">    <span class=\"attr\">contentBase</span>: <span class=\"string\">&#x27;src&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/pfhd-external-gateway&#x27;</span>: &#123;</span><br><span class=\"line\">       <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://172.29.24.150&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">       <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">         <span class=\"string\">&#x27;^/pfhd-external-gateway&#x27;</span>: <span class=\"string\">&#x27;/pfhd-external-gateway&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// jquery:path.resolve(__dirname, &#x27;./src/js/jquery.js&#x27;)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   $:&#x27;jquery&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;process.env.actCodeUUID&#x27;</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(actCodeUUID),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CopyPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">patterns</span>:[</span><br><span class=\"line\">        ...<span class=\"title function_\">copyPath</span>(__dirname+<span class=\"string\">&#x27;/src&#x27;</span>)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 读取入口文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">entryPath</span>(<span class=\"params\">currentDirPath</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> entryObj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arrPath = fs.<span class=\"title function_\">readdirSync</span>(currentDirPath)</span><br><span class=\"line\">  arrPath.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    entryObj[item.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]] = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src/js/&#x27;</span>+item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> entryObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 读取需要copy的文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copyPath</span>(<span class=\"params\">currentDirPath</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> copyPathArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arrPath = fs.<span class=\"title function_\">readdirSync</span>(currentDirPath)</span><br><span class=\"line\">  arrPath.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;js&#x27;</span>) == -<span class=\"number\">1</span> &amp;&amp; item.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;ts&#x27;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">from</span>:__dirname+<span class=\"string\">&#x27;/src/&#x27;</span>+item,<span class=\"attr\">to</span>:__dirname+<span class=\"string\">&#x27;/&#x27;</span>+dirpath+<span class=\"string\">&#x27;/&#x27;</span>+item&#125;</span><br><span class=\"line\">      copyPathArr.<span class=\"title function_\">push</span>(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> copyPathArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>1、配置文件中用到了node.js模块<code>path</code>、<code>fs</code>、<code>process</code></strong></p>\n<ul>\n<li><a href=\"http://nodejs.cn/api/path.html\">path</a>: node.js环境中因操作系统不同，文件路径也有有所差异eg:<code>\\</code>、<code>/</code>,为了统一化并快速获取根目录，在node中才有了<code>__dirname</code>这个全局变量，可以返回当前文件的<strong>绝对路径</strong>。<blockquote>\n<p>切记<code>__dirname</code>是node中的全局变量，如何验证？ 可以创建个js文件，</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;__dirname&#x27;</span>, __dirname);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>终端在此目录执行<code>node index.js</code>命令， 会发现输出当前磁盘<strong>根目录</strong>  <font color=\"green\">【因为这是在node环境执行的脚本】</font><br>你若新建index.html引入index.js文件的时候，会发现控制台输出 <code>undefined</code>, 因为浏览器环境根本没有这个变量。</p>\n</blockquote>\n</li>\n<li><a href=\"http://nodejs.cn/api/fs.html\">fs</a>: fs.readdirSync(dirPath)读取<code>src</code>目录下的文件， 并返回数组形式的文件名，eg:[‘assets’, ‘css’, ‘js]等。</li>\n<li><a href=\"http://nodejs.cn/api/process.html#processenv\">process</a>:对象提供有关当前 Node.js 进程的信息、用户环境信息等，如：node安装目录等。</li>\n</ul>\n<p><strong>2、配置文件中用到了webpack插件<code>copy-webapck-plugin</code></strong></p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/copy-webpack-plugin\">copy-webapck-plugin</a>:简单暴力只需要按照文档配置入口出口，就可以将文件copy一份到出口中。<blockquote>\n<p>可以将一些不需要处理的文件（图片、jquery、等）直接copy一份</p>\n</blockquote>\n</li>\n<li>webpack自带属性<code>DefinePlugin</code>：可以将node.js环境中的变量托管到<strong>js</strong>代码中实现互通<blockquote>\n<p>打包的时候会自动赋值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js 文件</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title function_\">definePlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;process.env.actCodeUUID&#x27;</span>:<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(actCodeUUID)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// index.js文件访问</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">env</span>.<span class=\"property\">actCodeUUID</span>) <span class=\"comment\">// 有值</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>当只做几个单页面的时候，并不需要用到其他框架，可以考虑ts+jquery+webpack简单方便,<a href=\"https://github.com/Even-cxw/TypeScript/tree/main/ts05-webpack-jquery\">代码地址</a>。</p>\n</blockquote>\n<h1 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h1><ul>\n<li>node -v <code>v10.15.3</code></li>\n<li>npm -v  <code>7.20.6</code></li>\n<li>tsc -v  <code>4.4.3</code> <font color=\"red\">【若没有，请全局安装<code>npm install typescript -g</code>】</font></li>\n<li>webpack -v  <code>5.52.1</code></li>\n<li>webpack-cli -v <code>3.3.12</code> <font color=\"red\">【webpack-cli下载版本过高，会导致版本不兼容等】</font></li>\n<li>webpack-dev-server -v  <code>3.11.2</code></li>\n</ul>","more":"<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><blockquote>\n<p>跟其他项目一样有个<font color=\"red\">【src】</font>，执行打包命令行后，会有个dist文件夹，里面才是上线的代码</p>\n</blockquote>\n<ul>\n<li><code>src/asset</code>: 存放第三方库eg:<strong>jqeury</strong>等，webpack不会做打包处理，直接原封copy</li>\n<li><code>src/css</code> : 样式文件夹</li>\n<li><code>src/images</code> : 图片文件夹</li>\n<li><code>src/js</code> : typescript转移后生成的js</li>\n<li><code>src/ts</code> : ts文件</li>\n<li><code>src/index.html</code> : 跟页面<font color=\"red\">【需要手动引入js等文件】</font></li>\n</ul>\n<h1 id=\"npm初始化\"><a href=\"#npm初始化\" class=\"headerlink\" title=\"npm初始化\"></a>npm初始化</h1><ul>\n<li>新建目录proect并在当前目录执行<code>npm init</code> 一路回车，会在当前目录下生成package.json</li>\n<li>修改package.json文件，找到<code>scripts</code>对象，<font color=\"red\">莫急、等webpack配置完才可运行</font><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=sit webpack-dev-server&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;sit&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=sit webpack&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;uat&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=uat webpack&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;pat&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=pat webpack&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>下载插件<code>npm install cross-env -S</code> <blockquote>\n<p>cross-env作用：当我们在打包的时候需要区分<strong>测试环境</strong>、<strong>生产环境</strong>，不同环境打包配置不一样，cross-env可以自定义变量传递到node.js环境中。<a href=\"https://www.npmjs.com/package/cross-env\">官方解释</a><br>如下命令：<code>cross-env NODE_ENV=sit</code> 相当于在<font color=\"red\">node.js</font>中执行了如下代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切记node.js环境</span></span><br><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> = <span class=\"string\">&#x27;sit&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以通过 process.env对象访问</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"typescript初始化\"><a href=\"#typescript初始化\" class=\"headerlink\" title=\"typescript初始化\"></a>typescript初始化</h1><ul>\n<li>执行<code>tsc --init</code> 会生成tsconfig.json配置文件</li>\n<li>修改配置文件，我的配置文件如下<blockquote>\n<p>如下配置执行<code>tsc</code>时，会自动检索<code>include</code>配置中的ts文件，输出到<code>outDir</code>配置js文件中，并转义成es5</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;removeComments&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">/*不输出注释*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">false</span>,<span class=\"comment\">/*生成目标文件 inline sourceMap*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;declaration&quot;</span>: <span class=\"literal\">false</span>,<span class=\"comment\">/*生成响应的 d.ts文件*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,<span class=\"comment\">/*启用所有严格类型检查选项*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strictFunctionTypes&quot;</span>: <span class=\"literal\">false</span>,<span class=\"comment\">/*不润徐函数参数双向协变*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,<span class=\"comment\">/*指定模块解析器*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;ES5&quot;</span>,<span class=\"comment\">/**/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;./src/js&quot;</span>,<span class=\"comment\">/*指定文件的输出目录*/</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>:[</span><br><span class=\"line\">      <span class=\"string\">&quot;ES5&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ESNext&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;DOM&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;DOM.Iterable&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ScriptHost&quot;</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&quot;./src/ts/*&quot;</span>]<span class=\"comment\">/*编译器需要编译的文件或目录，支持通配符*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h1><ul>\n<li>安装依赖<code>npm install webpack@5 webpack-cli@3 webpack-dev-server@3 -D</code></li>\n<li>安装依赖<code>npm install copy-webpack-plugin -D</code></li>\n<li>当前页面新建文件<code>webpack.config.js</code>  <blockquote>\n<p><code>mode</code>模式可根据大家爱好自行修改，当然模式不一样，打包后的代码也不一样。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CopyPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"title class_\">CleanWebpackPlugin</span>&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> actCodeUUIDSit = <span class=\"string\">&#x27;7ba408f51c5c42b98133eeec145e70ca&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> actCodeUUIDUat = <span class=\"string\">&#x27;ba408f51c5c42b98133eeec145e70ca&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> actCodeUUID = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> == <span class=\"string\">&#x27;sit&#x27;</span>?<span class=\"attr\">actCodeUUIDSit</span>:actCodeUUIDUat;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dirpath =<span class=\"string\">&#x27;dist/&#x27;</span> + process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> + <span class=\"string\">&#x27;/&#x27;</span>+ actCodeUUID;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">entryPath</span>(__dirname+<span class=\"string\">&#x27;/src/js&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, dirpath+<span class=\"string\">&#x27;/js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9999</span>,</span><br><span class=\"line\">    <span class=\"attr\">contentBase</span>: <span class=\"string\">&#x27;src&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/pfhd-external-gateway&#x27;</span>: &#123;</span><br><span class=\"line\">       <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://172.29.24.150&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">       <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">         <span class=\"string\">&#x27;^/pfhd-external-gateway&#x27;</span>: <span class=\"string\">&#x27;/pfhd-external-gateway&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// jquery:path.resolve(__dirname, &#x27;./src/js/jquery.js&#x27;)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// new webpack.ProvidePlugin(&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   $:&#x27;jquery&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;),</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;process.env.actCodeUUID&#x27;</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(actCodeUUID),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CopyPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">patterns</span>:[</span><br><span class=\"line\">        ...<span class=\"title function_\">copyPath</span>(__dirname+<span class=\"string\">&#x27;/src&#x27;</span>)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 读取入口文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">entryPath</span>(<span class=\"params\">currentDirPath</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> entryObj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arrPath = fs.<span class=\"title function_\">readdirSync</span>(currentDirPath)</span><br><span class=\"line\">  arrPath.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    entryObj[item.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]] = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./src/js/&#x27;</span>+item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> entryObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 读取需要copy的文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copyPath</span>(<span class=\"params\">currentDirPath</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> copyPathArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arrPath = fs.<span class=\"title function_\">readdirSync</span>(currentDirPath)</span><br><span class=\"line\">  arrPath.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;js&#x27;</span>) == -<span class=\"number\">1</span> &amp;&amp; item.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;ts&#x27;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">from</span>:__dirname+<span class=\"string\">&#x27;/src/&#x27;</span>+item,<span class=\"attr\">to</span>:__dirname+<span class=\"string\">&#x27;/&#x27;</span>+dirpath+<span class=\"string\">&#x27;/&#x27;</span>+item&#125;</span><br><span class=\"line\">      copyPathArr.<span class=\"title function_\">push</span>(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> copyPathArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>1、配置文件中用到了node.js模块<code>path</code>、<code>fs</code>、<code>process</code></strong></p>\n<ul>\n<li><a href=\"http://nodejs.cn/api/path.html\">path</a>: node.js环境中因操作系统不同，文件路径也有有所差异eg:<code>\\</code>、<code>/</code>,为了统一化并快速获取根目录，在node中才有了<code>__dirname</code>这个全局变量，可以返回当前文件的<strong>绝对路径</strong>。<blockquote>\n<p>切记<code>__dirname</code>是node中的全局变量，如何验证？ 可以创建个js文件，</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;__dirname&#x27;</span>, __dirname);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>终端在此目录执行<code>node index.js</code>命令， 会发现输出当前磁盘<strong>根目录</strong>  <font color=\"green\">【因为这是在node环境执行的脚本】</font><br>你若新建index.html引入index.js文件的时候，会发现控制台输出 <code>undefined</code>, 因为浏览器环境根本没有这个变量。</p>\n</blockquote>\n</li>\n<li><a href=\"http://nodejs.cn/api/fs.html\">fs</a>: fs.readdirSync(dirPath)读取<code>src</code>目录下的文件， 并返回数组形式的文件名，eg:[‘assets’, ‘css’, ‘js]等。</li>\n<li><a href=\"http://nodejs.cn/api/process.html#processenv\">process</a>:对象提供有关当前 Node.js 进程的信息、用户环境信息等，如：node安装目录等。</li>\n</ul>\n<p><strong>2、配置文件中用到了webpack插件<code>copy-webapck-plugin</code></strong></p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/copy-webpack-plugin\">copy-webapck-plugin</a>:简单暴力只需要按照文档配置入口出口，就可以将文件copy一份到出口中。<blockquote>\n<p>可以将一些不需要处理的文件（图片、jquery、等）直接copy一份</p>\n</blockquote>\n</li>\n<li>webpack自带属性<code>DefinePlugin</code>：可以将node.js环境中的变量托管到<strong>js</strong>代码中实现互通<blockquote>\n<p>打包的时候会自动赋值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js 文件</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title function_\">definePlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;process.env.actCodeUUID&#x27;</span>:<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(actCodeUUID)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// index.js文件访问</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">env</span>.<span class=\"property\">actCodeUUID</span>) <span class=\"comment\">// 有值</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"vue","date":"2020-01-25T08:15:24.000Z","comments":1,"_content":"\n\n# vue-cli3\n\n## 吐槽！\n- 本身webapck的配置就一大堆，又来了vue-cli3的配置，虽然做了简化，但是感觉完全没必要去学，只要能看懂就行\n> vue-cli3已经出很久了，一直没有用最近在搞微前端，需要用vue-cli3里面的配置，突然一脸懵，真的是学不过来，哎！`简短记录下！`\n\n\n## 配置文件\n- webpack的位置文件是新建`webpack.config.js`\n- vue的配置文件是新建`vue.config.js`\n> 1. `publicPath`会将此参数，传递到`process.env.BASE_URL`\n> 2. 创建 .env文件设置变量名`VUE_APP_{变量名}`， 也会传递到`process.env.VUE_APP_{变量名}`\n```javascript\nmodule.exports = {\n  publicPath: '/subapp/sub-vue',\n  transpileDependencies: ['common'],\n  chainWebpack: config => config.resolve.symlinks(false),\n  configureWebpack: {\n    output: {\n      // 把子应用打包成 umd 库格式\n      library: `${name}-[name]`,\n      libraryTarget: 'umd',\n      jsonpFunction: `webpackJsonp_${name}`\n    }\n  },\n  devServer: {\n    port: process.env.VUE_APP_PORT,\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    }\n  }\n}\n```\n\n## 添加element-ui\n- 执行命令`vue add element`\n- 有俩个选项 1.全局引入 2.按需引入\n```\nFully import\nImport on demand\n```\n- 我选择的是第二种按需引入，会`自动修改我们的配置文件`\n```javascript\n1. 多个plugins文件\n2. bael.config.js文件修改\n3. mian.js自动引入\n```\n\n<!--more-->","source":"_posts/vue.md","raw":"---\ntitle: vue\ndate: 2020-01-25 16:15:24\ncategories: vue\ntags: [vue]\ncomments: true\n---\n\n\n# vue-cli3\n\n## 吐槽！\n- 本身webapck的配置就一大堆，又来了vue-cli3的配置，虽然做了简化，但是感觉完全没必要去学，只要能看懂就行\n> vue-cli3已经出很久了，一直没有用最近在搞微前端，需要用vue-cli3里面的配置，突然一脸懵，真的是学不过来，哎！`简短记录下！`\n\n\n## 配置文件\n- webpack的位置文件是新建`webpack.config.js`\n- vue的配置文件是新建`vue.config.js`\n> 1. `publicPath`会将此参数，传递到`process.env.BASE_URL`\n> 2. 创建 .env文件设置变量名`VUE_APP_{变量名}`， 也会传递到`process.env.VUE_APP_{变量名}`\n```javascript\nmodule.exports = {\n  publicPath: '/subapp/sub-vue',\n  transpileDependencies: ['common'],\n  chainWebpack: config => config.resolve.symlinks(false),\n  configureWebpack: {\n    output: {\n      // 把子应用打包成 umd 库格式\n      library: `${name}-[name]`,\n      libraryTarget: 'umd',\n      jsonpFunction: `webpackJsonp_${name}`\n    }\n  },\n  devServer: {\n    port: process.env.VUE_APP_PORT,\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    }\n  }\n}\n```\n\n## 添加element-ui\n- 执行命令`vue add element`\n- 有俩个选项 1.全局引入 2.按需引入\n```\nFully import\nImport on demand\n```\n- 我选择的是第二种按需引入，会`自动修改我们的配置文件`\n```javascript\n1. 多个plugins文件\n2. bael.config.js文件修改\n3. mian.js自动引入\n```\n\n<!--more-->","slug":"vue","published":1,"updated":"2022-03-20T02:40:14.340Z","_id":"cl0iw2rdk000titozadgb43o8","layout":"post","photos":[],"link":"","content":"<h1 id=\"vue-cli3\"><a href=\"#vue-cli3\" class=\"headerlink\" title=\"vue-cli3\"></a>vue-cli3</h1><h2 id=\"吐槽！\"><a href=\"#吐槽！\" class=\"headerlink\" title=\"吐槽！\"></a>吐槽！</h2><ul>\n<li>本身webapck的配置就一大堆，又来了vue-cli3的配置，虽然做了简化，但是感觉完全没必要去学，只要能看懂就行<blockquote>\n<p>vue-cli3已经出很久了，一直没有用最近在搞微前端，需要用vue-cli3里面的配置，突然一脸懵，真的是学不过来，哎！<code>简短记录下！</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ul>\n<li>webpack的位置文件是新建<code>webpack.config.js</code></li>\n<li>vue的配置文件是新建<code>vue.config.js</code><blockquote>\n<ol>\n<li><code>publicPath</code>会将此参数，传递到<code>process.env.BASE_URL</code></li>\n<li>创建 .env文件设置变量名<code>VUE_APP_&#123;变量名&#125;</code>， 也会传递到<code>process.env.VUE_APP_&#123;变量名&#125;</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;/subapp/sub-vue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">transpileDependencies</span>: [<span class=\"string\">&#x27;common&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> config.<span class=\"property\">resolve</span>.<span class=\"title function_\">symlinks</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 把子应用打包成 umd 库格式</span></span><br><span class=\"line\">      <span class=\"attr\">library</span>: <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>-[name]`</span>,</span><br><span class=\"line\">      <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">jsonpFunction</span>: <span class=\"string\">`webpackJsonp_<span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: process.<span class=\"property\">env</span>.<span class=\"property\">VUE_APP_PORT</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"添加element-ui\"><a href=\"#添加element-ui\" class=\"headerlink\" title=\"添加element-ui\"></a>添加element-ui</h2><ul>\n<li>执行命令<code>vue add element</code></li>\n<li>有俩个选项 1.全局引入 2.按需引入<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fully import</span><br><span class=\"line\">Import on demand</span><br></pre></td></tr></table></figure></li>\n<li>我选择的是第二种按需引入，会<code>自动修改我们的配置文件</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 多个plugins文件</span><br><span class=\"line\"><span class=\"number\">2.</span> bael.<span class=\"property\">config</span>.<span class=\"property\">js</span>文件修改</span><br><span class=\"line\"><span class=\"number\">3.</span> mian.<span class=\"property\">js</span>自动引入</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<h1 id=\"vue-cli3\"><a href=\"#vue-cli3\" class=\"headerlink\" title=\"vue-cli3\"></a>vue-cli3</h1><h2 id=\"吐槽！\"><a href=\"#吐槽！\" class=\"headerlink\" title=\"吐槽！\"></a>吐槽！</h2><ul>\n<li>本身webapck的配置就一大堆，又来了vue-cli3的配置，虽然做了简化，但是感觉完全没必要去学，只要能看懂就行<blockquote>\n<p>vue-cli3已经出很久了，一直没有用最近在搞微前端，需要用vue-cli3里面的配置，突然一脸懵，真的是学不过来，哎！<code>简短记录下！</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ul>\n<li>webpack的位置文件是新建<code>webpack.config.js</code></li>\n<li>vue的配置文件是新建<code>vue.config.js</code><blockquote>\n<ol>\n<li><code>publicPath</code>会将此参数，传递到<code>process.env.BASE_URL</code></li>\n<li>创建 .env文件设置变量名<code>VUE_APP_&#123;变量名&#125;</code>， 也会传递到<code>process.env.VUE_APP_&#123;变量名&#125;</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;/subapp/sub-vue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">transpileDependencies</span>: [<span class=\"string\">&#x27;common&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> config.<span class=\"property\">resolve</span>.<span class=\"title function_\">symlinks</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 把子应用打包成 umd 库格式</span></span><br><span class=\"line\">      <span class=\"attr\">library</span>: <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>-[name]`</span>,</span><br><span class=\"line\">      <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">jsonpFunction</span>: <span class=\"string\">`webpackJsonp_<span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: process.<span class=\"property\">env</span>.<span class=\"property\">VUE_APP_PORT</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"添加element-ui\"><a href=\"#添加element-ui\" class=\"headerlink\" title=\"添加element-ui\"></a>添加element-ui</h2><ul>\n<li>执行命令<code>vue add element</code></li>\n<li>有俩个选项 1.全局引入 2.按需引入<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fully import</span><br><span class=\"line\">Import on demand</span><br></pre></td></tr></table></figure></li>\n<li>我选择的是第二种按需引入，会<code>自动修改我们的配置文件</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 多个plugins文件</span><br><span class=\"line\"><span class=\"number\">2.</span> bael.<span class=\"property\">config</span>.<span class=\"property\">js</span>文件修改</span><br><span class=\"line\"><span class=\"number\">3.</span> mian.<span class=\"property\">js</span>自动引入</span><br></pre></td></tr></table></figure></li>\n</ul>","more":""},{"title":"webpack","date":"2021-12-20T08:15:24.000Z","comments":1,"_content":"\n----\n\n- 版本：\n\t`\"webpack\": \"^4.31.0\",`\n\t`\"webpack-cli\": \"^3.3.2\",`\n\t`\"webpack-dev-server\": \"^3.3.1\"`\n----\n\n# webpack环境搭建\n\n## 配置⽂文件名称\n- webpack 默认配置⽂文件:`webpack.config.js`\n- 可以通过 `webpack --config 指定配置⽂文件`\n- 当我们执行`webpack --config {文件名}` 命令的时候，具体做了哪些？\n1. 寻找`node_modules`文件下的`.bin`文件\n2. `.bin`在指向真实的配置文件包\n3. 配置文件会作为webpack(config)：`config`（便是module.export暴露出的对象）参数对象传递给webpack;\n```javascript\n// webpack.config.js 文件\n// 会将module.exports暴露的模块传递给webpack\nconst path = require('path')\nmodule.exports = {\n    mode: 'none',\n    entry: {\n        main: './src/a.js',\n    },\n    output: {\n        filename: 'a.[chunkhash].js',\n        path: path.join(__dirname, './dist'),\n    }\n}\n```\n\n## `node 执行webpack配置文件`\n- [如何开启webpack配置文件](https://webpack.docschina.org/api/node/) \n```javascript\n// node.js文件\nconst path = require('path')\nconst webpack = require('webpack')\nwebpack({\n    mode: 'none',\n    entry: {\n        main: './src/a.js',\n    },\n    output: {\n        filename: 'a.[chunkhash].js',\n        path: path.join(__dirname, './dist'),\n    }\n},(err) => {\n    console.log(err)\n})\n```\n\n----\n\n<!-- more -->\n\n## 通过npm srcript 运行 webpack\n\n- 碰到的问题， 在当前文件夹下`终端`执行 `webpack --config weback.conig.js` 一直报错,报错片段如下！\n```\nTypeError: compiler.plugin is not a function\n    at CommonsChunkPlugin.apply (/Users/even/Even/continue/packagingTools/webpack-study/webpack-CommonsChunkPlugin/CommonsChunkPlugin01/node_modules/webpack/lib/optimize/CommonsChunkPlugin.js:88:12)\n```\n> 查看当前环境版本 `webpack -v`\n```javascript\nwebpack: 5.66.0\nwebpack-cli: 4.9.1\nwebpack-dev-server 3.11.2\n```\n> 当前文件夹下`package.json`\n```json\n\"devDependencies\": {\n\"webpack\": \"^3.12.0\"\n}\n```\n> 配置文件webpack.conig.js\n```javascript\n// webpack.conig.js文件\nconst path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst packagejson = require(\"./package.json\");\n\nconst config = {\n    entry: {\n        first: './src/first.js',\n        second: './src/second.js',\n        vendor: Object.keys(packagejson.dependencies)//获取生产环境依赖的库\n    },\n    output: {\n        path: path.resolve(__dirname,'./dist'),\n        filename: '[name].js'\n    },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'vendor',\n            filename: '[name].js' \n        }),\n    ]\n}\nmodule.exports = config;\n```\n\n> 仔细看第二行 指向了webpack5全局的包，所以报错高版本并不兼容3，切换全局webpack成本有点大。\n- 突然想到如果在`package.json`里面执行命令，是否会指向当前文件的webpack3版本呢？ 果然真的成功了。。。。。\n```json\n\"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n},\n```\n----\n\n## webpack文件监听\n- 文件监听是在发现源码发⽣生变化时，⾃动重新构建出新的输出⽂文件。\n- webpack 开启监听模式，有两种⽅方式: 唯⼀一缺陷:`每次需要⼿手动刷新浏览器器`\n```javascript\n//启动 webpack 命令时，带上 --watch 参数 \n//在配置 webpack.config.js 中设置 watch: true\n```\n- ⽂文件监听的原理理分析\n```javascript\n//轮询判断⽂文件的最后编辑时间是否变化 某个⽂文件发⽣生了了变化，并不不会⽴立刻告诉监听者，⽽而是先缓存起来，等 aggregateTimeout\nmodule.export = {\n//默认 false，也就是不不开启\nwatch: true, //只有开启监听模式时，watchOptions才有意义 \n\twathcOptions: {\n\t\t//默认为空，不监听的文件或者文件夹，支持正则匹配\n\t\tignored: /node_modules/,\n\t\t//监听到变化发生后会等300ms再去执行，默认300ms\n\t\taggregateTimeout: 300, //判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次 \n\t\tpoll: 1000\n\t} \n}\n\n```\n\n## 文件指纹\n- 文件指纹: 打包后输出的⽂文件名的后缀,文件指纹如何生成?\n```javascript\n// Hash:和整个项⽬目的构建相关，只要项⽬目⽂文件有修改，整个项⽬目构建的 hash 值就会更更改,\n// Chunkhash:和 webpack 打包的 chunk 有关，不不同的 entry 会⽣生成不不同的 chunkhash 值\n// Contenthash:根据⽂文件内容来定义 hash ，⽂文件内容不不变，则 contenthash 不不变\n```\n\n## 使用webpack内置的stats\n- stats: 构建的统计信息\n```javascript\n// package.json 中使用 stats\n\"build:stats\": \"webpack --json > stats.json\"\n```\n\n## 多进程/多实例构建\n- 使用 HappyPack 解析资源\n\n- 使用 thread-loader\n\n\n\n# webpack常规配置\n\n## Entry的用法\n- 单入口：entry是一个字符串\n```javascript\nmodule.exports = {\n\tentry: './path/to/my/entry/file.js'\n};\n```\n- 多入口：entry是一个对象\n```javascript\nmodule.exports = { \n\tentry: {\n\t\tapp: './src/app.js',\n\t\tadminApp: './src/adminApp.js'\n\t}\n};\n```\n\n## Output 的⽤用法\n- 单⼊入⼝口配置\n```javascript\nmodule.exports = {\n\tentry: './path/to/my/entry/file.js' \n\toutput: {\n\t\tfilename: 'bundle.js'\n\t\tpath: __dirname + '/dist' \n\t}\n};\n```\n- 多⼊入⼝口配置\n```javascript\nmodule.exports = { \n\tentry: {\n\t\tapp: './src/app.js',\n\t\tsearch: './src/search.js' },\n\t\toutput: {\n\t\tfilename: '[name].js', path: __dirname + '/dist'\n\t} \n};\n```\n## 核⼼心概念之 Loaders\n- loaders的用法\n```javascript\nconst path = require('path');\nmodule.exports = { \n\toutput: {\n\tfilename: 'bundle.js' },\n\tmodule: { \n\t\trules: [\n\t\t\t{ \n\t\t\t\ttest: /\\.txt$/,   // test 指定匹配规则\n\t\t\t  use: 'raw-loader' // use 指定使⽤用的 loader 名称\n\t\t\t} \n\t\t]\n\t} \n};\n```\n\n## 核⼼心概念之 Plugins\n- 插件⽤用于 bundle ⽂文件的优化，资源管理理和环境变量量注⼊入\n```javascript\nconst path = require('path');\nmodule.exports = { \n\toutput: {filename: 'bundle.js' },\n\tplugins: [\n\t\tnew HtmlWebpackPlugin({template: './src/index.html'}) // 放到 plugins 数组⾥里里\n\t] \n};\n\n```\n\n\n## 核⼼心概念之 Mode\n- [Mode](https://webpack.docschina.org/configuration/mode/)⽤用来指定当前的构建环境是:production、development 还是 none\n\n1. source map : 通过 source map 定位到源代码\n> mode production 的情况下默认开启开发环境开启，\n```javascript\n// eval: 使⽤用eval包裹模块代码 \n// source map: 产⽣生.map⽂文件 \n//cheap: 不不包含列列信息\n//nline: 将.map作为DataURI嵌⼊入，不不单独⽣生成.map⽂文件 \n//module:包含loader的sourcemap\ndevtool: 'source-map'\n```\n2. tree shaking(摇树优化) : 只抽离bundle中有用的代码\n> mode production 的情况下默认开启开发环境开启，\n\n3. scope hoisting : 解决大量闭包代码\n> mode production 的情况下默认开启开发环境开启，\n> 原理理:将所有模块的代码按照引⽤用顺序放在⼀一个函数作⽤用域⾥里里，然后适当的重命名⼀一\n些变量量以防⽌止变量量名冲突\n\n\n## webpack打包库\n> [参考文章](https://zhuanlan.zhihu.com/p/108216236) [官网解释](https://webpack.docschina.org/configuration/mode/)\n- library : 指定的全局变量\n- libraryTarget : 暴露方式，是commonjs、commonjs2、umd还是this、var等\n![](/images/library.jpg)\n- 如何指对 .min 压缩 `npm install terser-webpack-plugin@1.3.0`\n```javascript \nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n    entry: {\n        'large-number': './src/index.js',\n        'large-number.min': './src/index.js'\n    },\n    output: {\n        filename: '[name].js',\n        library: 'largeNumber',\n        libraryTarget: 'umd',\n        libraryExport: 'default'\n    },\n    mode: 'none',\n    optimization: {\n        minimize: true,\n        minimizer: [\n            new TerserPlugin({\n                include: /\\.min\\.js$/,\n            })\n        ]\n    }\n}\n```\n\n## 路径 [借鉴博客](https://zhuanlan.zhihu.com/p/36354511)\n\n- 官网说：如果服务器下有文件需要设置webpack的publicPath配置，但又是为什么？\n1. 我们先了解一下路径问题：\n> 绝对路径指文件的完整路径，包括文件传输的协议HTTP、FTP等，一般用于网站的外部链接，\n> 相对路径是指相对于当前文件的路径，它包含了从当前文件指向目的文件的路径，适用于网站的内部链接。\n> 根路径的设置以“/”开头，后面紧跟文件路径，例如：/download/index.html。根路径必须在配置好的`服务器环境中`才能使用。\n2. 如何使用根路径：\n```javascript\n<script src=\"/subVue/b.js\"></script>\n```\n> 选择`路径`文件夹  利用http-server开服务  [代码]()\n> 完全模拟生产环境服务器下的文件了，直接点击index.html就可以加载到`b.js`文件。\n3. 修改webpack的publicPath其实就是修改了`script`引入路径变成根路径。代码如下\n```javascript\n// 当我们把publickPath设置成subVue时，html-webpack-plugin 插件自动替换根路径\n<script src=\"/subVue/b.js\"></script>\n```\n\n\n### output.path\n- [官网地址](https://webpack.js.org/configuration/output/#outputpath): 参数`绝对路径`，将压缩好的代码打包到当前位置。\n\n### output.publicPath\n- 打包的配置\n- [官网地址](https://www.webpackjs.com/guides/public-path/): 参数`相对路径`是`相对于build之后的index.html的`，打包后得到的html中可以看到。\n- 项目中引用css，js，img等资源时候的一个基础路径 `静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径`\n\n### devServer.publicPath\n- 在开发阶段，我们借用devServer启动一个开发服务器进行开发，这里也会配置一个publicPath，这里的publicPath路径下的打包文件可以在浏览器中访问。\n\n### __webpack_public_path__ \n- [官网地址](https://webpack.js.org/api/module-variables/#importmetawebpackhot):决定了output.publicPath的值，用于来指定应用程序中所有的资源的基本路径.\n- 这个变脸可以让我们在js代码中指定 output.publicPath变量；\n\n## externals\n- [externals](https://webpack.docschina.org/configuration/externals/):防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。\n\n\n## 多个webpack配置合并\n- 当使用`webpack-merge`合并代码时,第二个参数会覆盖第一个。\n```javascript\n// webpack-base.js\nconst path = require('path')\nmodule.exports = {\n    entry: {\n        main: './src/a.js'\n    },\n    output: {\n        filename: 'a.[chunckhash].js',\n        path: path.join(__dirname, './dist')\n    }\n}\n// webpack01.js\nconst path = require('path');\nconst webpack = require('webpack');\nconst {merge} = require('webpack-merge');\nconst base = require('./webpack-base.js')\nlet webpackConfig = merge(base,{\n    output: {\n        filename: 'a.[chunckhash].js',\n        path: path.join(__dirname, './dist2')\n    }\n})\nwebpack(webpackConfig,(err) => {\n    console.log(err);\n})\n```\n> 执行命令 node node.js\n\n\n## 设置环境变量\n### cross-env 插件\n- 以下命令会将环境变量`APP_ID`的值 插入`process.env`对象中\n```javascript\n// 下载插件\nnpm install cross-env -S\n// 使用 在命令行中\ncross-env APP_ID=111111 node ./test.js\n```\n\n### npm run {命令} --APP_ID=111111\n- 也可以通过npm方式插入环境变量-执行命令`npm run dev --APP_ID=111111` 切记： 一定是要在run后面跟参数；\n```json\n// package.json文件下的\n\"scripts\": {\n    \"dev\": \"node ./test.js\",\n}\n```\n> `--`:代表前缀`npm_config_`\n> `APP_ID`转移成小写，最后会看到属性名为 `npm_config_app_id`,值为`11111`\n> 会将环境变量插入`process.env`对象中\n- 当然也可以放多个参数如 `npm run dev --APP_ID=111111 --APP=22222`等\n\n## 如何删除文件\n### rimraf \n- [npm包](https://www.npmjs.com/package/rimraf)`rimraf`\n```javascript\n// node包 代码\nconst rm = require('rimraf');\nconst path = require('path')\nrm(path.join(__dirname,'./dist/index01.js'),function(err) {\n    if (err) throw err;\n})\n```\n### clean-webpack-plugin \n- [webpack插件](https://www.npmjs.com/package/clean-webpack-plugin)`clean-webpack-plugin`\n```javascript\n// webpack插件代码\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nplugins: [\n    new CleanWebpackPlugin(),\n]\n```\n### script命令删除\n```javascript\nrm -rf ./dist && webpack\n```\n> 俩者差距还是很大的，一个是node包好处是可以删除任意文件任意目录。一个是webpack插件只能删除打包的路径并全量删除。\n\n----\n\n# webpack优化\n\n## CommonsChunkPlugin - 3之后已废弃\n- [文章中大佬写的和很详细](https://segmentfault.com/a/1190000012828879),他是关于webapck3的相关配置；\n- [分离出第三方库、自定义公共模块、webpack运行文件]()\n- [单独分离出第三方库、自定义公共模块、webpack运行文件]()\n- [抽离第三方库和自定义公共模块]()\n\n## webpack5 - SplitChunks\n- chunks选项，决定要提取那些模块。\n\n> 默认是async：只提取异步加载的模块出来打包到一个文件中。\n> 异步加载的模块：通过import('xxx')或require(['xxx'],() =>{})加载的模块。\n> initial：提取同步加载和异步加载模块，如果xxx在项目中异步加载了，也同步加载了，那么xxx这个模块会被提取两次，分别打包到不同的文件中。\n> 同步加载的模块：通过 import xxx或require('xxx')加载的模块。\n> all：不管异步加载还是同步加载的模块都提取出来，打包到一个文件中。\n\n- minSize选项：规定被提取的模块在压缩前的大小最小值，单位为字节，默认为30000，只有超过了30000字节才会被提取。\n- maxSize选项：把提取出来的模块打包生成的文件大小不能超过maxSize值，如果超过了，要对其进行分割并打包生成新的文件。单位为字节，默认为0，表示不限制大小。\n- minChunks选项：表示要被提取的模块最小被引用次数，引用次数超过或等于minChunks值，才能被提取。\n- maxAsyncRequests选项：最大的按需(异步)加载次数，默认为 6。\n- maxInitialRequests选项：打包后的入口文件加载时，还能同时加载js文件的数量（包括入口文件），默认为4。\n> 先说一下优先级 maxInitialRequests / maxAsyncRequests <maxSize<minSize。\n- automaticNameDelimiter选项：打包生成的js文件名的分割符，默认为~。\n- name选项：打包生成js文件的名称。\n- cacheGroups选项，核心重点，配置提取模块的方案。里面每一项代表一个提取模块的方案。下面是cacheGroups每项中特有的选项，其余选项和外面一致，若cacheGroups每项中有，就按配置的，没有就使用外面配置的。\n- test选项：用来匹配要提取的模块的资源路径或名称。值是正则或函数。\n- priority选项：方案的优先级，值越大表示提取模块时优先采用此方案。默认值为0。\n- reuseExistingChunk选项：true/false。为true时，如果当前要提取的模块，在已经在打包生成的js文件中存在，则将重用该模块，而不是把当前要提取的模块打包生成新的js文件。\n- enforce选项：true/false。为true时，忽略minSize，minChunks，maxAsyncRequests和maxInitialRequests外面选项\n\n## 多个入口文件合并\n1. 在a.js 引入b.js, webpack打包的时候自动会合成\n```javascript\n// a.js\nimport a from './b.js'\n// 配置文件只有a入口就可\nlet path = require('path')\nmodule.exports = {\n    mode: 'node',\n    entry: './src/a.js',\n    output: {\n        filename: 'bunld.js',\n        path: path.join(__dirname,'./dist'),\n    }\n}\n```\n2. 配置入口的时候多个入口\n```javascript\nlet path = require('path')\nmodule.exports = {\n    mode: 'node',\n    entry: {\n        main: ['./src/a.js', './src/b.js']\n    },\n    output: {\n        filename: 'bunld.js',\n        path: path.join(__dirname,'./dist'),\n    }\n}\n```\n\n----\n\n## 多个入口文件分别打包\n- 其实分别打包文件就是将`entry`变成对象而已，是不是很简单\n\n```javascript\nlet path = require('path')\nmodule.exports = {\n    mode: 'node',\n    entry: {\n        a: './src/a.js',\n        b: './src/b.js',\n    },\n    output: {\n        filename: '[name].[chunkhash].js',\n        path: path.join(__dirname,'./dist')\n    }\n}\n```\n\n----\n\n# webpack插件\n\n## css文件压缩\n- npm install optimize-css-assets-webpack-plugin -D\n- npm install cssnano -D\n```javascript\nmodule.exports = { \n\tentry: {\n\t\tapp: './src/app.js',\n\t\tsearch: './src/search.js' \n\t},\n\toutput: {\n\t\tfilename: '[name][chunkhash:8].js', path: __dirname + '/dist'\n\t}, \n\tplugins: [\n\t\tnew OptimizeCSSAssetsPlugin({ assetNameRegExp: /\\.css$/g, cssProcessor: require('cssnano’)\n\t]\n```\n\n\n## 自动清理构建目录\n- [借鉴博客](https://juejin.cn/post/6844903853708541959) [html-webpack-plugin](https://www.npmjs.com/package/html-webpack-plugin) \n```javascript\nnew HtmlWebpackPlugin({\n\t\ttemplate: path.join(__dirname, 'src/search.html'), // 模板路径\n\t\tfilename: 'search.html', // 文件名称\n\t\tchunks: ['search'], // 生成的html用哪些chunk\n\t\tinject: true, // 自动注入\n\t\tminify: {\n\t\t\t\thtml5: true,\n\t\t\t\tcollapseWhitespace: true,\n\t\t\t\tpreserveLineBreaks: false,\n\t\t\t\tminifyCSS: true,\n\t\t\t\tminifyJS: true,\n\t\t\t\tremoveComments: false\n\t\t}\n}) \n```\n\n## 自动清理理构建目录\n - npm install aotoprefixer -D\n - npm install postcss-loader -D\n ```javascript\n{\n\t\ttest: /.less$/,\n\t\tuse: [\n\t\t\t\t'css-loader',\n\t\t\t\t'less-loader',\n\t\t\t\t{\n\t\t\t\t\t\tloader: 'postcss-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tplugins: () => [\n\t\t\t\t\t\t\t\t\t\trequire('autoprefixer')({\n\t\t\t\t\t\t\t\t\t\t\t\tbrowsers: ['last 2 version', '>1%', 'ios 7']\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t},\n\t\t]\n},\n ```\n\n## 资源内联的意义\n1. raw-loader 内联 html\n- `注意版本问题` npm install raw-loader@0.5.1\n```javascript\n<script>${require('raw-loader!babel-loader!. /meta.html')}</script>\n```\n\n2. raw-loader 内联 JS\n```javascript\n<script>${require('raw-loader!babel-loader!../node_modules/lib-flexible')}</script>\n```\n\n## DefinePlugin - 定义环境变量\n- [webpack.DefinePlugin](https://webpack.docschina.org/plugins/define-plugin#root):编译时将你代码中的变量替换为其他值或表达式\n```javascript\n// a.js文件\nconsole.log('a文件')\nlet a = NAME;\n// webpack.config.js\nplugins: [\n    new webpack.DefinePlugin({\n        'NAME': 'Even',\n    }),\n]\n// 打包好后的文件\nconsole.log('a文件')\nlet a = Even;\n```\n- 会搜索打包文件变量`NAME`替换成`Even`变量。此时代码会报错，因为`let a = Even;`并没有定义。\n- 如果想让`Even`是字符串请如下配置\n```javascript\n// webpack.config.js\nplugins: [\n    new webpack.DefinePlugin({\n        'NAME': \"'Even'\",\n    }),\n]\n```\n\n## ExtractTextplugin - 文件提取\n- 只在weback3的时候才可使用\n- [ExtractTextplugin](https://www.npmjs.com/package/extract-text-webpack-plugin)\n\n## mini-css-extract-plugin - css提取\n- webpack4之后开始使用此插件\n```javascript\n// 下载\nnpm install mini-css-extract-plugin -D\n// webpack中引用\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n// 使用时候需要在俩处配置 \n// 1. 规则中\n{\n    test: /\\.(less|css)$/,\n    use: [\n        {\n            loader: MiniCssExtractPlugin.loader,\n        },\n        'css-loader',\n        {\n            loader: 'less-loader',\n            options: {\n                lessOptions: {\n                    javascriptEnabled: true,\n                },\n            }\n        }\n    ],\n},\n// 2. 插件中\nnew MiniCssExtractPlugin({\n    filename: 'css/base.css',\n    chunkFilename: '[id].css',\n}),\n```\n\n# webpack解析器\n## webpack-loader\n- [loader](https://www.webpackjs.com/loaders/url-loader/)官网会发现loader大概有7个模块,**1、文件，2、JSON，3、转换编译，4、模板，5、样式，6、清理和测试，7、框架**\n- webpack因为只识别`js`文件，所以需要这些loader来处理文件转成js,个个大神的开源代码和维护都在社区有明显标注\n- 常规选项配置\n1. test: 要检测的文件\n2. loader: 要使用的插件\n3. include: 解析包含的文件\n4. exclude: 解析要排除的文件\n5. options: 插件高级配置选项\n6. use: [] 多个插件配置时使用\n\n### vue-loader\n- 细心的朋友会发现[vue-loader](https://vue-loader.vuejs.org/zh/)并不在上面[webpack-loader](https://www.webpackjs.com/loaders/url-loader/)里面, `why?`.\n- **个人理解**: `.vue`是复杂的文件，文档loader都是处理单个文件,比如`.json`文件里面全是json数据，而`.vue`里面有三种**1.style,2.script,3.html**。\n- 所以：为了把`vue`文件拆分成loader`（如：style-loader、html-loader、script-loader）`能够解析的文件,才有了`vue-loader`插件。[单独的配置文档](https://vue-loader.vuejs.org/zh/)\n```javascript\n// webpack.config.js\n// 所有的vue项目，这个插件是必不可少的\nconst { VueLoaderPlugin } = require('vue-loader')\nplugins: [\n    new VueLoaderPlugin()\n]\n```\n> 完全理解设计者的初衷，一个页面写所有的js、css、html真的很炫酷，不向其他开发者为了显示自己所谓的高端操作，`解耦后的代码`真的很难下咽,一个函数能搞定的事情非要给你弄三个文件，6个函数。。。\n\n### url-loader\n- 看到webpack代码,不是很理解`limit,name的作用`，于是去webpack官网找了很久。。。。才发现他是loader的配置。\n```js\n{\ntest: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\nloader: 'url-loader',\n    options: {\n        limit: 10000,\n        name: path.join(\"../build\", APP_ID, 'img/[name].[hash:7].[ext]')\n    }\n},\n```\n- limit:低于指定的限制时，可以返回一个 DataURL。\n- name:这个参数让我很困惑,url-loader并没有对此字段做解释，查了(url-loader)[https://github.com/webpack-contrib/file-loader]之后才找到.\n\n### css-loader\n- 代码如下！ [文档](https://www.npmjs.com/package/css-loader)\n```javascript\n// index.js\nimport '../css/base.css';\n```\n```css\n// base.less\n#phone {\n    background-image: url('../assets/actrulebtn.png');\n}\n```\n- 问题：在入口文件引入css时,css-loader将url自动处理了，并在`publickpath`中输出了图片,自信看文档有个url选项，是否修改url配置，当设置`url:false`时，不会做额外处理。\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: \"css-loader\",\n        options: {\n          url: false,\n        },\n      },\n    ],\n  },\n};\n```\n\n\n## 规范代码\n[esLint官网](https://eslint.bootcss.com/docs/user-guide/configuring)\n- 新增`.eslintrc.js`文件\n```javascript\nmodule.exports = {\n    \"parser\": \"babel-eslint\", // 使用解析器\n    \"extends\": \"airbnb\",  // 继承airbnb\n    // 当前想启用的环境\n    \"env\": {\n        \"browser\": true,\n        \"node\": true\n    },\n    // 定义规则\n    \"rules\": {\n        \"indent\": [\"error\", 4]\n    }\n};\n```\n- npm 下载\n```javascript\n\"babel-eslint\": \"^10.0.1\",\n\"eslint\": \"^5.16.0\",\n\"eslint-config-airbnb\": \"^17.1.0\",\n\"eslint-config-airbnb-base\": \"^13.1.0\",\n\"eslint-loader\": \"^2.1.2\",\n\"eslint-plugin-import\": \"^2.17.3\",\n\"eslint-plugin-jsx-a11y\": \"^6.2.1\",\n\"eslint-plugin-react\": \"^7.13.0\",\n```\n\n\n## webpack如何暴露库","source":"_posts/webpack.md","raw":"---\ntitle: webpack\ndate: 2021-12-20 16:15:24\ncategories: webpack\ntags: [webpack]\ncomments: true\n---\n\n----\n\n- 版本：\n\t`\"webpack\": \"^4.31.0\",`\n\t`\"webpack-cli\": \"^3.3.2\",`\n\t`\"webpack-dev-server\": \"^3.3.1\"`\n----\n\n# webpack环境搭建\n\n## 配置⽂文件名称\n- webpack 默认配置⽂文件:`webpack.config.js`\n- 可以通过 `webpack --config 指定配置⽂文件`\n- 当我们执行`webpack --config {文件名}` 命令的时候，具体做了哪些？\n1. 寻找`node_modules`文件下的`.bin`文件\n2. `.bin`在指向真实的配置文件包\n3. 配置文件会作为webpack(config)：`config`（便是module.export暴露出的对象）参数对象传递给webpack;\n```javascript\n// webpack.config.js 文件\n// 会将module.exports暴露的模块传递给webpack\nconst path = require('path')\nmodule.exports = {\n    mode: 'none',\n    entry: {\n        main: './src/a.js',\n    },\n    output: {\n        filename: 'a.[chunkhash].js',\n        path: path.join(__dirname, './dist'),\n    }\n}\n```\n\n## `node 执行webpack配置文件`\n- [如何开启webpack配置文件](https://webpack.docschina.org/api/node/) \n```javascript\n// node.js文件\nconst path = require('path')\nconst webpack = require('webpack')\nwebpack({\n    mode: 'none',\n    entry: {\n        main: './src/a.js',\n    },\n    output: {\n        filename: 'a.[chunkhash].js',\n        path: path.join(__dirname, './dist'),\n    }\n},(err) => {\n    console.log(err)\n})\n```\n\n----\n\n<!-- more -->\n\n## 通过npm srcript 运行 webpack\n\n- 碰到的问题， 在当前文件夹下`终端`执行 `webpack --config weback.conig.js` 一直报错,报错片段如下！\n```\nTypeError: compiler.plugin is not a function\n    at CommonsChunkPlugin.apply (/Users/even/Even/continue/packagingTools/webpack-study/webpack-CommonsChunkPlugin/CommonsChunkPlugin01/node_modules/webpack/lib/optimize/CommonsChunkPlugin.js:88:12)\n```\n> 查看当前环境版本 `webpack -v`\n```javascript\nwebpack: 5.66.0\nwebpack-cli: 4.9.1\nwebpack-dev-server 3.11.2\n```\n> 当前文件夹下`package.json`\n```json\n\"devDependencies\": {\n\"webpack\": \"^3.12.0\"\n}\n```\n> 配置文件webpack.conig.js\n```javascript\n// webpack.conig.js文件\nconst path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst packagejson = require(\"./package.json\");\n\nconst config = {\n    entry: {\n        first: './src/first.js',\n        second: './src/second.js',\n        vendor: Object.keys(packagejson.dependencies)//获取生产环境依赖的库\n    },\n    output: {\n        path: path.resolve(__dirname,'./dist'),\n        filename: '[name].js'\n    },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'vendor',\n            filename: '[name].js' \n        }),\n    ]\n}\nmodule.exports = config;\n```\n\n> 仔细看第二行 指向了webpack5全局的包，所以报错高版本并不兼容3，切换全局webpack成本有点大。\n- 突然想到如果在`package.json`里面执行命令，是否会指向当前文件的webpack3版本呢？ 果然真的成功了。。。。。\n```json\n\"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n},\n```\n----\n\n## webpack文件监听\n- 文件监听是在发现源码发⽣生变化时，⾃动重新构建出新的输出⽂文件。\n- webpack 开启监听模式，有两种⽅方式: 唯⼀一缺陷:`每次需要⼿手动刷新浏览器器`\n```javascript\n//启动 webpack 命令时，带上 --watch 参数 \n//在配置 webpack.config.js 中设置 watch: true\n```\n- ⽂文件监听的原理理分析\n```javascript\n//轮询判断⽂文件的最后编辑时间是否变化 某个⽂文件发⽣生了了变化，并不不会⽴立刻告诉监听者，⽽而是先缓存起来，等 aggregateTimeout\nmodule.export = {\n//默认 false，也就是不不开启\nwatch: true, //只有开启监听模式时，watchOptions才有意义 \n\twathcOptions: {\n\t\t//默认为空，不监听的文件或者文件夹，支持正则匹配\n\t\tignored: /node_modules/,\n\t\t//监听到变化发生后会等300ms再去执行，默认300ms\n\t\taggregateTimeout: 300, //判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次 \n\t\tpoll: 1000\n\t} \n}\n\n```\n\n## 文件指纹\n- 文件指纹: 打包后输出的⽂文件名的后缀,文件指纹如何生成?\n```javascript\n// Hash:和整个项⽬目的构建相关，只要项⽬目⽂文件有修改，整个项⽬目构建的 hash 值就会更更改,\n// Chunkhash:和 webpack 打包的 chunk 有关，不不同的 entry 会⽣生成不不同的 chunkhash 值\n// Contenthash:根据⽂文件内容来定义 hash ，⽂文件内容不不变，则 contenthash 不不变\n```\n\n## 使用webpack内置的stats\n- stats: 构建的统计信息\n```javascript\n// package.json 中使用 stats\n\"build:stats\": \"webpack --json > stats.json\"\n```\n\n## 多进程/多实例构建\n- 使用 HappyPack 解析资源\n\n- 使用 thread-loader\n\n\n\n# webpack常规配置\n\n## Entry的用法\n- 单入口：entry是一个字符串\n```javascript\nmodule.exports = {\n\tentry: './path/to/my/entry/file.js'\n};\n```\n- 多入口：entry是一个对象\n```javascript\nmodule.exports = { \n\tentry: {\n\t\tapp: './src/app.js',\n\t\tadminApp: './src/adminApp.js'\n\t}\n};\n```\n\n## Output 的⽤用法\n- 单⼊入⼝口配置\n```javascript\nmodule.exports = {\n\tentry: './path/to/my/entry/file.js' \n\toutput: {\n\t\tfilename: 'bundle.js'\n\t\tpath: __dirname + '/dist' \n\t}\n};\n```\n- 多⼊入⼝口配置\n```javascript\nmodule.exports = { \n\tentry: {\n\t\tapp: './src/app.js',\n\t\tsearch: './src/search.js' },\n\t\toutput: {\n\t\tfilename: '[name].js', path: __dirname + '/dist'\n\t} \n};\n```\n## 核⼼心概念之 Loaders\n- loaders的用法\n```javascript\nconst path = require('path');\nmodule.exports = { \n\toutput: {\n\tfilename: 'bundle.js' },\n\tmodule: { \n\t\trules: [\n\t\t\t{ \n\t\t\t\ttest: /\\.txt$/,   // test 指定匹配规则\n\t\t\t  use: 'raw-loader' // use 指定使⽤用的 loader 名称\n\t\t\t} \n\t\t]\n\t} \n};\n```\n\n## 核⼼心概念之 Plugins\n- 插件⽤用于 bundle ⽂文件的优化，资源管理理和环境变量量注⼊入\n```javascript\nconst path = require('path');\nmodule.exports = { \n\toutput: {filename: 'bundle.js' },\n\tplugins: [\n\t\tnew HtmlWebpackPlugin({template: './src/index.html'}) // 放到 plugins 数组⾥里里\n\t] \n};\n\n```\n\n\n## 核⼼心概念之 Mode\n- [Mode](https://webpack.docschina.org/configuration/mode/)⽤用来指定当前的构建环境是:production、development 还是 none\n\n1. source map : 通过 source map 定位到源代码\n> mode production 的情况下默认开启开发环境开启，\n```javascript\n// eval: 使⽤用eval包裹模块代码 \n// source map: 产⽣生.map⽂文件 \n//cheap: 不不包含列列信息\n//nline: 将.map作为DataURI嵌⼊入，不不单独⽣生成.map⽂文件 \n//module:包含loader的sourcemap\ndevtool: 'source-map'\n```\n2. tree shaking(摇树优化) : 只抽离bundle中有用的代码\n> mode production 的情况下默认开启开发环境开启，\n\n3. scope hoisting : 解决大量闭包代码\n> mode production 的情况下默认开启开发环境开启，\n> 原理理:将所有模块的代码按照引⽤用顺序放在⼀一个函数作⽤用域⾥里里，然后适当的重命名⼀一\n些变量量以防⽌止变量量名冲突\n\n\n## webpack打包库\n> [参考文章](https://zhuanlan.zhihu.com/p/108216236) [官网解释](https://webpack.docschina.org/configuration/mode/)\n- library : 指定的全局变量\n- libraryTarget : 暴露方式，是commonjs、commonjs2、umd还是this、var等\n![](/images/library.jpg)\n- 如何指对 .min 压缩 `npm install terser-webpack-plugin@1.3.0`\n```javascript \nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n    entry: {\n        'large-number': './src/index.js',\n        'large-number.min': './src/index.js'\n    },\n    output: {\n        filename: '[name].js',\n        library: 'largeNumber',\n        libraryTarget: 'umd',\n        libraryExport: 'default'\n    },\n    mode: 'none',\n    optimization: {\n        minimize: true,\n        minimizer: [\n            new TerserPlugin({\n                include: /\\.min\\.js$/,\n            })\n        ]\n    }\n}\n```\n\n## 路径 [借鉴博客](https://zhuanlan.zhihu.com/p/36354511)\n\n- 官网说：如果服务器下有文件需要设置webpack的publicPath配置，但又是为什么？\n1. 我们先了解一下路径问题：\n> 绝对路径指文件的完整路径，包括文件传输的协议HTTP、FTP等，一般用于网站的外部链接，\n> 相对路径是指相对于当前文件的路径，它包含了从当前文件指向目的文件的路径，适用于网站的内部链接。\n> 根路径的设置以“/”开头，后面紧跟文件路径，例如：/download/index.html。根路径必须在配置好的`服务器环境中`才能使用。\n2. 如何使用根路径：\n```javascript\n<script src=\"/subVue/b.js\"></script>\n```\n> 选择`路径`文件夹  利用http-server开服务  [代码]()\n> 完全模拟生产环境服务器下的文件了，直接点击index.html就可以加载到`b.js`文件。\n3. 修改webpack的publicPath其实就是修改了`script`引入路径变成根路径。代码如下\n```javascript\n// 当我们把publickPath设置成subVue时，html-webpack-plugin 插件自动替换根路径\n<script src=\"/subVue/b.js\"></script>\n```\n\n\n### output.path\n- [官网地址](https://webpack.js.org/configuration/output/#outputpath): 参数`绝对路径`，将压缩好的代码打包到当前位置。\n\n### output.publicPath\n- 打包的配置\n- [官网地址](https://www.webpackjs.com/guides/public-path/): 参数`相对路径`是`相对于build之后的index.html的`，打包后得到的html中可以看到。\n- 项目中引用css，js，img等资源时候的一个基础路径 `静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径`\n\n### devServer.publicPath\n- 在开发阶段，我们借用devServer启动一个开发服务器进行开发，这里也会配置一个publicPath，这里的publicPath路径下的打包文件可以在浏览器中访问。\n\n### __webpack_public_path__ \n- [官网地址](https://webpack.js.org/api/module-variables/#importmetawebpackhot):决定了output.publicPath的值，用于来指定应用程序中所有的资源的基本路径.\n- 这个变脸可以让我们在js代码中指定 output.publicPath变量；\n\n## externals\n- [externals](https://webpack.docschina.org/configuration/externals/):防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。\n\n\n## 多个webpack配置合并\n- 当使用`webpack-merge`合并代码时,第二个参数会覆盖第一个。\n```javascript\n// webpack-base.js\nconst path = require('path')\nmodule.exports = {\n    entry: {\n        main: './src/a.js'\n    },\n    output: {\n        filename: 'a.[chunckhash].js',\n        path: path.join(__dirname, './dist')\n    }\n}\n// webpack01.js\nconst path = require('path');\nconst webpack = require('webpack');\nconst {merge} = require('webpack-merge');\nconst base = require('./webpack-base.js')\nlet webpackConfig = merge(base,{\n    output: {\n        filename: 'a.[chunckhash].js',\n        path: path.join(__dirname, './dist2')\n    }\n})\nwebpack(webpackConfig,(err) => {\n    console.log(err);\n})\n```\n> 执行命令 node node.js\n\n\n## 设置环境变量\n### cross-env 插件\n- 以下命令会将环境变量`APP_ID`的值 插入`process.env`对象中\n```javascript\n// 下载插件\nnpm install cross-env -S\n// 使用 在命令行中\ncross-env APP_ID=111111 node ./test.js\n```\n\n### npm run {命令} --APP_ID=111111\n- 也可以通过npm方式插入环境变量-执行命令`npm run dev --APP_ID=111111` 切记： 一定是要在run后面跟参数；\n```json\n// package.json文件下的\n\"scripts\": {\n    \"dev\": \"node ./test.js\",\n}\n```\n> `--`:代表前缀`npm_config_`\n> `APP_ID`转移成小写，最后会看到属性名为 `npm_config_app_id`,值为`11111`\n> 会将环境变量插入`process.env`对象中\n- 当然也可以放多个参数如 `npm run dev --APP_ID=111111 --APP=22222`等\n\n## 如何删除文件\n### rimraf \n- [npm包](https://www.npmjs.com/package/rimraf)`rimraf`\n```javascript\n// node包 代码\nconst rm = require('rimraf');\nconst path = require('path')\nrm(path.join(__dirname,'./dist/index01.js'),function(err) {\n    if (err) throw err;\n})\n```\n### clean-webpack-plugin \n- [webpack插件](https://www.npmjs.com/package/clean-webpack-plugin)`clean-webpack-plugin`\n```javascript\n// webpack插件代码\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nplugins: [\n    new CleanWebpackPlugin(),\n]\n```\n### script命令删除\n```javascript\nrm -rf ./dist && webpack\n```\n> 俩者差距还是很大的，一个是node包好处是可以删除任意文件任意目录。一个是webpack插件只能删除打包的路径并全量删除。\n\n----\n\n# webpack优化\n\n## CommonsChunkPlugin - 3之后已废弃\n- [文章中大佬写的和很详细](https://segmentfault.com/a/1190000012828879),他是关于webapck3的相关配置；\n- [分离出第三方库、自定义公共模块、webpack运行文件]()\n- [单独分离出第三方库、自定义公共模块、webpack运行文件]()\n- [抽离第三方库和自定义公共模块]()\n\n## webpack5 - SplitChunks\n- chunks选项，决定要提取那些模块。\n\n> 默认是async：只提取异步加载的模块出来打包到一个文件中。\n> 异步加载的模块：通过import('xxx')或require(['xxx'],() =>{})加载的模块。\n> initial：提取同步加载和异步加载模块，如果xxx在项目中异步加载了，也同步加载了，那么xxx这个模块会被提取两次，分别打包到不同的文件中。\n> 同步加载的模块：通过 import xxx或require('xxx')加载的模块。\n> all：不管异步加载还是同步加载的模块都提取出来，打包到一个文件中。\n\n- minSize选项：规定被提取的模块在压缩前的大小最小值，单位为字节，默认为30000，只有超过了30000字节才会被提取。\n- maxSize选项：把提取出来的模块打包生成的文件大小不能超过maxSize值，如果超过了，要对其进行分割并打包生成新的文件。单位为字节，默认为0，表示不限制大小。\n- minChunks选项：表示要被提取的模块最小被引用次数，引用次数超过或等于minChunks值，才能被提取。\n- maxAsyncRequests选项：最大的按需(异步)加载次数，默认为 6。\n- maxInitialRequests选项：打包后的入口文件加载时，还能同时加载js文件的数量（包括入口文件），默认为4。\n> 先说一下优先级 maxInitialRequests / maxAsyncRequests <maxSize<minSize。\n- automaticNameDelimiter选项：打包生成的js文件名的分割符，默认为~。\n- name选项：打包生成js文件的名称。\n- cacheGroups选项，核心重点，配置提取模块的方案。里面每一项代表一个提取模块的方案。下面是cacheGroups每项中特有的选项，其余选项和外面一致，若cacheGroups每项中有，就按配置的，没有就使用外面配置的。\n- test选项：用来匹配要提取的模块的资源路径或名称。值是正则或函数。\n- priority选项：方案的优先级，值越大表示提取模块时优先采用此方案。默认值为0。\n- reuseExistingChunk选项：true/false。为true时，如果当前要提取的模块，在已经在打包生成的js文件中存在，则将重用该模块，而不是把当前要提取的模块打包生成新的js文件。\n- enforce选项：true/false。为true时，忽略minSize，minChunks，maxAsyncRequests和maxInitialRequests外面选项\n\n## 多个入口文件合并\n1. 在a.js 引入b.js, webpack打包的时候自动会合成\n```javascript\n// a.js\nimport a from './b.js'\n// 配置文件只有a入口就可\nlet path = require('path')\nmodule.exports = {\n    mode: 'node',\n    entry: './src/a.js',\n    output: {\n        filename: 'bunld.js',\n        path: path.join(__dirname,'./dist'),\n    }\n}\n```\n2. 配置入口的时候多个入口\n```javascript\nlet path = require('path')\nmodule.exports = {\n    mode: 'node',\n    entry: {\n        main: ['./src/a.js', './src/b.js']\n    },\n    output: {\n        filename: 'bunld.js',\n        path: path.join(__dirname,'./dist'),\n    }\n}\n```\n\n----\n\n## 多个入口文件分别打包\n- 其实分别打包文件就是将`entry`变成对象而已，是不是很简单\n\n```javascript\nlet path = require('path')\nmodule.exports = {\n    mode: 'node',\n    entry: {\n        a: './src/a.js',\n        b: './src/b.js',\n    },\n    output: {\n        filename: '[name].[chunkhash].js',\n        path: path.join(__dirname,'./dist')\n    }\n}\n```\n\n----\n\n# webpack插件\n\n## css文件压缩\n- npm install optimize-css-assets-webpack-plugin -D\n- npm install cssnano -D\n```javascript\nmodule.exports = { \n\tentry: {\n\t\tapp: './src/app.js',\n\t\tsearch: './src/search.js' \n\t},\n\toutput: {\n\t\tfilename: '[name][chunkhash:8].js', path: __dirname + '/dist'\n\t}, \n\tplugins: [\n\t\tnew OptimizeCSSAssetsPlugin({ assetNameRegExp: /\\.css$/g, cssProcessor: require('cssnano’)\n\t]\n```\n\n\n## 自动清理构建目录\n- [借鉴博客](https://juejin.cn/post/6844903853708541959) [html-webpack-plugin](https://www.npmjs.com/package/html-webpack-plugin) \n```javascript\nnew HtmlWebpackPlugin({\n\t\ttemplate: path.join(__dirname, 'src/search.html'), // 模板路径\n\t\tfilename: 'search.html', // 文件名称\n\t\tchunks: ['search'], // 生成的html用哪些chunk\n\t\tinject: true, // 自动注入\n\t\tminify: {\n\t\t\t\thtml5: true,\n\t\t\t\tcollapseWhitespace: true,\n\t\t\t\tpreserveLineBreaks: false,\n\t\t\t\tminifyCSS: true,\n\t\t\t\tminifyJS: true,\n\t\t\t\tremoveComments: false\n\t\t}\n}) \n```\n\n## 自动清理理构建目录\n - npm install aotoprefixer -D\n - npm install postcss-loader -D\n ```javascript\n{\n\t\ttest: /.less$/,\n\t\tuse: [\n\t\t\t\t'css-loader',\n\t\t\t\t'less-loader',\n\t\t\t\t{\n\t\t\t\t\t\tloader: 'postcss-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tplugins: () => [\n\t\t\t\t\t\t\t\t\t\trequire('autoprefixer')({\n\t\t\t\t\t\t\t\t\t\t\t\tbrowsers: ['last 2 version', '>1%', 'ios 7']\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t},\n\t\t]\n},\n ```\n\n## 资源内联的意义\n1. raw-loader 内联 html\n- `注意版本问题` npm install raw-loader@0.5.1\n```javascript\n<script>${require('raw-loader!babel-loader!. /meta.html')}</script>\n```\n\n2. raw-loader 内联 JS\n```javascript\n<script>${require('raw-loader!babel-loader!../node_modules/lib-flexible')}</script>\n```\n\n## DefinePlugin - 定义环境变量\n- [webpack.DefinePlugin](https://webpack.docschina.org/plugins/define-plugin#root):编译时将你代码中的变量替换为其他值或表达式\n```javascript\n// a.js文件\nconsole.log('a文件')\nlet a = NAME;\n// webpack.config.js\nplugins: [\n    new webpack.DefinePlugin({\n        'NAME': 'Even',\n    }),\n]\n// 打包好后的文件\nconsole.log('a文件')\nlet a = Even;\n```\n- 会搜索打包文件变量`NAME`替换成`Even`变量。此时代码会报错，因为`let a = Even;`并没有定义。\n- 如果想让`Even`是字符串请如下配置\n```javascript\n// webpack.config.js\nplugins: [\n    new webpack.DefinePlugin({\n        'NAME': \"'Even'\",\n    }),\n]\n```\n\n## ExtractTextplugin - 文件提取\n- 只在weback3的时候才可使用\n- [ExtractTextplugin](https://www.npmjs.com/package/extract-text-webpack-plugin)\n\n## mini-css-extract-plugin - css提取\n- webpack4之后开始使用此插件\n```javascript\n// 下载\nnpm install mini-css-extract-plugin -D\n// webpack中引用\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n// 使用时候需要在俩处配置 \n// 1. 规则中\n{\n    test: /\\.(less|css)$/,\n    use: [\n        {\n            loader: MiniCssExtractPlugin.loader,\n        },\n        'css-loader',\n        {\n            loader: 'less-loader',\n            options: {\n                lessOptions: {\n                    javascriptEnabled: true,\n                },\n            }\n        }\n    ],\n},\n// 2. 插件中\nnew MiniCssExtractPlugin({\n    filename: 'css/base.css',\n    chunkFilename: '[id].css',\n}),\n```\n\n# webpack解析器\n## webpack-loader\n- [loader](https://www.webpackjs.com/loaders/url-loader/)官网会发现loader大概有7个模块,**1、文件，2、JSON，3、转换编译，4、模板，5、样式，6、清理和测试，7、框架**\n- webpack因为只识别`js`文件，所以需要这些loader来处理文件转成js,个个大神的开源代码和维护都在社区有明显标注\n- 常规选项配置\n1. test: 要检测的文件\n2. loader: 要使用的插件\n3. include: 解析包含的文件\n4. exclude: 解析要排除的文件\n5. options: 插件高级配置选项\n6. use: [] 多个插件配置时使用\n\n### vue-loader\n- 细心的朋友会发现[vue-loader](https://vue-loader.vuejs.org/zh/)并不在上面[webpack-loader](https://www.webpackjs.com/loaders/url-loader/)里面, `why?`.\n- **个人理解**: `.vue`是复杂的文件，文档loader都是处理单个文件,比如`.json`文件里面全是json数据，而`.vue`里面有三种**1.style,2.script,3.html**。\n- 所以：为了把`vue`文件拆分成loader`（如：style-loader、html-loader、script-loader）`能够解析的文件,才有了`vue-loader`插件。[单独的配置文档](https://vue-loader.vuejs.org/zh/)\n```javascript\n// webpack.config.js\n// 所有的vue项目，这个插件是必不可少的\nconst { VueLoaderPlugin } = require('vue-loader')\nplugins: [\n    new VueLoaderPlugin()\n]\n```\n> 完全理解设计者的初衷，一个页面写所有的js、css、html真的很炫酷，不向其他开发者为了显示自己所谓的高端操作，`解耦后的代码`真的很难下咽,一个函数能搞定的事情非要给你弄三个文件，6个函数。。。\n\n### url-loader\n- 看到webpack代码,不是很理解`limit,name的作用`，于是去webpack官网找了很久。。。。才发现他是loader的配置。\n```js\n{\ntest: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\nloader: 'url-loader',\n    options: {\n        limit: 10000,\n        name: path.join(\"../build\", APP_ID, 'img/[name].[hash:7].[ext]')\n    }\n},\n```\n- limit:低于指定的限制时，可以返回一个 DataURL。\n- name:这个参数让我很困惑,url-loader并没有对此字段做解释，查了(url-loader)[https://github.com/webpack-contrib/file-loader]之后才找到.\n\n### css-loader\n- 代码如下！ [文档](https://www.npmjs.com/package/css-loader)\n```javascript\n// index.js\nimport '../css/base.css';\n```\n```css\n// base.less\n#phone {\n    background-image: url('../assets/actrulebtn.png');\n}\n```\n- 问题：在入口文件引入css时,css-loader将url自动处理了，并在`publickpath`中输出了图片,自信看文档有个url选项，是否修改url配置，当设置`url:false`时，不会做额外处理。\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: \"css-loader\",\n        options: {\n          url: false,\n        },\n      },\n    ],\n  },\n};\n```\n\n\n## 规范代码\n[esLint官网](https://eslint.bootcss.com/docs/user-guide/configuring)\n- 新增`.eslintrc.js`文件\n```javascript\nmodule.exports = {\n    \"parser\": \"babel-eslint\", // 使用解析器\n    \"extends\": \"airbnb\",  // 继承airbnb\n    // 当前想启用的环境\n    \"env\": {\n        \"browser\": true,\n        \"node\": true\n    },\n    // 定义规则\n    \"rules\": {\n        \"indent\": [\"error\", 4]\n    }\n};\n```\n- npm 下载\n```javascript\n\"babel-eslint\": \"^10.0.1\",\n\"eslint\": \"^5.16.0\",\n\"eslint-config-airbnb\": \"^17.1.0\",\n\"eslint-config-airbnb-base\": \"^13.1.0\",\n\"eslint-loader\": \"^2.1.2\",\n\"eslint-plugin-import\": \"^2.17.3\",\n\"eslint-plugin-jsx-a11y\": \"^6.2.1\",\n\"eslint-plugin-react\": \"^7.13.0\",\n```\n\n\n## webpack如何暴露库","slug":"webpack","published":1,"updated":"2022-03-20T02:40:14.340Z","_id":"cl0iw2rdm000xitozfaq8ces3","layout":"post","photos":[],"link":"","content":"<hr>\n<ul>\n<li>版本：<br>  <code>&quot;webpack&quot;: &quot;^4.31.0&quot;,</code><br>  <code>&quot;webpack-cli&quot;: &quot;^3.3.2&quot;,</code><br>  <code>&quot;webpack-dev-server&quot;: &quot;^3.3.1&quot;</code></li>\n</ul>\n<hr>\n<h1 id=\"webpack环境搭建\"><a href=\"#webpack环境搭建\" class=\"headerlink\" title=\"webpack环境搭建\"></a>webpack环境搭建</h1><h2 id=\"配置⽂文件名称\"><a href=\"#配置⽂文件名称\" class=\"headerlink\" title=\"配置⽂文件名称\"></a>配置⽂文件名称</h2><ul>\n<li>webpack 默认配置⽂文件:<code>webpack.config.js</code></li>\n<li>可以通过 <code>webpack --config 指定配置⽂文件</code></li>\n<li>当我们执行<code>webpack --config &#123;文件名&#125;</code> 命令的时候，具体做了哪些？</li>\n</ul>\n<ol>\n<li>寻找<code>node_modules</code>文件下的<code>.bin</code>文件</li>\n<li><code>.bin</code>在指向真实的配置文件包</li>\n<li>配置文件会作为webpack(config)：<code>config</code>（便是module.export暴露出的对象）参数对象传递给webpack;<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js 文件</span></span><br><span class=\"line\"><span class=\"comment\">// 会将module.exports暴露的模块传递给webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"node-执行webpack配置文件\"><a href=\"#node-执行webpack配置文件\" class=\"headerlink\" title=\"node 执行webpack配置文件\"></a><code>node 执行webpack配置文件</code></h2><ul>\n<li><a href=\"https://webpack.docschina.org/api/node/\">如何开启webpack配置文件</a> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node.js文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<h2 id=\"通过npm-srcript-运行-webpack\"><a href=\"#通过npm-srcript-运行-webpack\" class=\"headerlink\" title=\"通过npm srcript 运行 webpack\"></a>通过npm srcript 运行 webpack</h2><ul>\n<li>碰到的问题， 在当前文件夹下<code>终端</code>执行 <code>webpack --config weback.conig.js</code> 一直报错,报错片段如下！<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TypeError: compiler.plugin is not a function</span><br><span class=\"line\">    at CommonsChunkPlugin.apply (/Users/even/Even/continue/packagingTools/webpack-study/webpack-CommonsChunkPlugin/CommonsChunkPlugin01/node_modules/webpack/lib/optimize/CommonsChunkPlugin.js:88:12)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>查看当前环境版本 <code>webpack -v</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">webpack</span>: <span class=\"number\">5.66</span><span class=\"number\">.0</span></span><br><span class=\"line\">webpack-<span class=\"attr\">cli</span>: <span class=\"number\">4.9</span><span class=\"number\">.1</span></span><br><span class=\"line\">webpack-dev-server <span class=\"number\">3.11</span><span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当前文件夹下<code>package.json</code></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;webpack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.12.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置文件webpack.conig.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.conig.js文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> packagejson = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package.json&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">first</span>: <span class=\"string\">&#x27;./src/first.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">second</span>: <span class=\"string\">&#x27;./src/second.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">vendor</span>: <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(packagejson.<span class=\"property\">dependencies</span>)<span class=\"comment\">//获取生产环境依赖的库</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.<span class=\"property\">optimize</span>.<span class=\"title class_\">CommonsChunkPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vendor&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span> </span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = config;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>仔细看第二行 指向了webpack5全局的包，所以报错高版本并不兼容3，切换全局webpack成本有点大。</p>\n</blockquote>\n<ul>\n<li>突然想到如果在<code>package.json</code>里面执行命令，是否会指向当前文件的webpack3版本呢？ 果然真的成功了。。。。。<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"webpack文件监听\"><a href=\"#webpack文件监听\" class=\"headerlink\" title=\"webpack文件监听\"></a>webpack文件监听</h2><ul>\n<li>文件监听是在发现源码发⽣生变化时，⾃动重新构建出新的输出⽂文件。</li>\n<li>webpack 开启监听模式，有两种⽅方式: 唯⼀一缺陷:<code>每次需要⼿手动刷新浏览器器</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动 webpack 命令时，带上 --watch 参数 </span></span><br><span class=\"line\"><span class=\"comment\">//在配置 webpack.config.js 中设置 watch: true</span></span><br></pre></td></tr></table></figure></li>\n<li>⽂文件监听的原理理分析<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//轮询判断⽂文件的最后编辑时间是否变化 某个⽂文件发⽣生了了变化，并不不会⽴立刻告诉监听者，⽽而是先缓存起来，等 aggregateTimeout</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">export</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//默认 false，也就是不不开启</span></span><br><span class=\"line\"><span class=\"attr\">watch</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//只有开启监听模式时，watchOptions才有意义 </span></span><br><span class=\"line\">\t<span class=\"attr\">wathcOptions</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//默认为空，不监听的文件或者文件夹，支持正则匹配</span></span><br><span class=\"line\">\t\t<span class=\"attr\">ignored</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">//监听到变化发生后会等300ms再去执行，默认300ms</span></span><br><span class=\"line\">\t\t<span class=\"attr\">aggregateTimeout</span>: <span class=\"number\">300</span>, <span class=\"comment\">//判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次 </span></span><br><span class=\"line\">\t\t<span class=\"attr\">poll</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><ul>\n<li>文件指纹: 打包后输出的⽂文件名的后缀,文件指纹如何生成?<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hash:和整个项⽬目的构建相关，只要项⽬目⽂文件有修改，整个项⽬目构建的 hash 值就会更更改,</span></span><br><span class=\"line\"><span class=\"comment\">// Chunkhash:和 webpack 打包的 chunk 有关，不不同的 entry 会⽣生成不不同的 chunkhash 值</span></span><br><span class=\"line\"><span class=\"comment\">// Contenthash:根据⽂文件内容来定义 hash ，⽂文件内容不不变，则 contenthash 不不变</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用webpack内置的stats\"><a href=\"#使用webpack内置的stats\" class=\"headerlink\" title=\"使用webpack内置的stats\"></a>使用webpack内置的stats</h2><ul>\n<li>stats: 构建的统计信息<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json 中使用 stats</span></span><br><span class=\"line\"><span class=\"string\">&quot;build:stats&quot;</span>: <span class=\"string\">&quot;webpack --json &gt; stats.json&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"多进程-多实例构建\"><a href=\"#多进程-多实例构建\" class=\"headerlink\" title=\"多进程/多实例构建\"></a>多进程/多实例构建</h2><ul>\n<li><p>使用 HappyPack 解析资源</p>\n</li>\n<li><p>使用 thread-loader</p>\n</li>\n</ul>\n<h1 id=\"webpack常规配置\"><a href=\"#webpack常规配置\" class=\"headerlink\" title=\"webpack常规配置\"></a>webpack常规配置</h1><h2 id=\"Entry的用法\"><a href=\"#Entry的用法\" class=\"headerlink\" title=\"Entry的用法\"></a>Entry的用法</h2><ul>\n<li>单入口：entry是一个字符串<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>多入口：entry是一个对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">adminApp</span>: <span class=\"string\">&#x27;./src/adminApp.js&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Output-的⽤用法\"><a href=\"#Output-的⽤用法\" class=\"headerlink\" title=\"Output 的⽤用法\"></a>Output 的⽤用法</h2><ul>\n<li>单⼊入⼝口配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span> </span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>多⼊入⼝口配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span> &#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>, <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"核⼼心概念之-Loaders\"><a href=\"#核⼼心概念之-Loaders\" class=\"headerlink\" title=\"核⼼心概念之 Loaders\"></a>核⼼心概念之 Loaders</h2></li>\n<li>loaders的用法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span> &#125;,</span><br><span class=\"line\">\t<span class=\"attr\">module</span>: &#123; </span><br><span class=\"line\">\t\t<span class=\"attr\">rules</span>: [</span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.txt$/</span>,   <span class=\"comment\">// test 指定匹配规则</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">use</span>: <span class=\"string\">&#x27;raw-loader&#x27;</span> <span class=\"comment\">// use 指定使⽤用的 loader 名称</span></span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"核⼼心概念之-Plugins\"><a href=\"#核⼼心概念之-Plugins\" class=\"headerlink\" title=\"核⼼心概念之 Plugins\"></a>核⼼心概念之 Plugins</h2><ul>\n<li>插件⽤用于 bundle ⽂文件的优化，资源管理理和环境变量量注⼊入<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span> &#125;,</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;<span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span>&#125;) <span class=\"comment\">// 放到 plugins 数组⾥里里</span></span><br><span class=\"line\">\t] </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"核⼼心概念之-Mode\"><a href=\"#核⼼心概念之-Mode\" class=\"headerlink\" title=\"核⼼心概念之 Mode\"></a>核⼼心概念之 Mode</h2><ul>\n<li><a href=\"https://webpack.docschina.org/configuration/mode/\">Mode</a>⽤用来指定当前的构建环境是:production、development 还是 none</li>\n</ul>\n<ol>\n<li><p>source map : 通过 source map 定位到源代码</p>\n<blockquote>\n<p>mode production 的情况下默认开启开发环境开启，</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eval: 使⽤用eval包裹模块代码 </span></span><br><span class=\"line\"><span class=\"comment\">// source map: 产⽣生.map⽂文件 </span></span><br><span class=\"line\"><span class=\"comment\">//cheap: 不不包含列列信息</span></span><br><span class=\"line\"><span class=\"comment\">//nline: 将.map作为DataURI嵌⼊入，不不单独⽣生成.map⽂文件 </span></span><br><span class=\"line\"><span class=\"comment\">//module:包含loader的sourcemap</span></span><br><span class=\"line\"><span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>tree shaking(摇树优化) : 只抽离bundle中有用的代码</p>\n<blockquote>\n<p>mode production 的情况下默认开启开发环境开启，</p>\n</blockquote>\n</li>\n<li><p>scope hoisting : 解决大量闭包代码</p>\n<blockquote>\n<p>mode production 的情况下默认开启开发环境开启，<br>原理理:将所有模块的代码按照引⽤用顺序放在⼀一个函数作⽤用域⾥里里，然后适当的重命名⼀一<br>些变量量以防⽌止变量量名冲突</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"webpack打包库\"><a href=\"#webpack打包库\" class=\"headerlink\" title=\"webpack打包库\"></a>webpack打包库</h2><blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/108216236\">参考文章</a> <a href=\"https://webpack.docschina.org/configuration/mode/\">官网解释</a></p>\n</blockquote>\n<ul>\n<li>library : 指定的全局变量</li>\n<li>libraryTarget : 暴露方式，是commonjs、commonjs2、umd还是this、var等<br><img src=\"/images/library.jpg\"></li>\n<li>如何指对 .min 压缩 <code>npm install terser-webpack-plugin@1.3.0</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;large-number&#x27;</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;large-number.min&#x27;</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">library</span>: <span class=\"string\">&#x27;largeNumber&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">libraryExport</span>: <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">include</span>: <span class=\"regexp\">/\\.min\\.js$/</span>,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"路径-借鉴博客\"><a href=\"#路径-借鉴博客\" class=\"headerlink\" title=\"路径 借鉴博客\"></a>路径 <a href=\"https://zhuanlan.zhihu.com/p/36354511\">借鉴博客</a></h2><ul>\n<li>官网说：如果服务器下有文件需要设置webpack的publicPath配置，但又是为什么？</li>\n</ul>\n<ol>\n<li>我们先了解一下路径问题：<blockquote>\n<p>绝对路径指文件的完整路径，包括文件传输的协议HTTP、FTP等，一般用于网站的外部链接，<br>相对路径是指相对于当前文件的路径，它包含了从当前文件指向目的文件的路径，适用于网站的内部链接。<br>根路径的设置以“/”开头，后面紧跟文件路径，例如：/download/index.html。根路径必须在配置好的<code>服务器环境中</code>才能使用。</p>\n</blockquote>\n</li>\n<li>如何使用根路径：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;/subVue/b.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>选择<code>路径</code>文件夹  利用http-server开服务  <a href=\"\">代码</a><br>完全模拟生产环境服务器下的文件了，直接点击index.html就可以加载到<code>b.js</code>文件。</p>\n</blockquote>\n</li>\n<li>修改webpack的publicPath其实就是修改了<code>script</code>引入路径变成根路径。代码如下<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当我们把publickPath设置成subVue时，html-webpack-plugin 插件自动替换根路径</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;/subVue/b.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"output-path\"><a href=\"#output-path\" class=\"headerlink\" title=\"output.path\"></a>output.path</h3><ul>\n<li><a href=\"https://webpack.js.org/configuration/output/#outputpath\">官网地址</a>: 参数<code>绝对路径</code>，将压缩好的代码打包到当前位置。</li>\n</ul>\n<h3 id=\"output-publicPath\"><a href=\"#output-publicPath\" class=\"headerlink\" title=\"output.publicPath\"></a>output.publicPath</h3><ul>\n<li>打包的配置</li>\n<li><a href=\"https://www.webpackjs.com/guides/public-path/\">官网地址</a>: 参数<code>相对路径</code>是<code>相对于build之后的index.html的</code>，打包后得到的html中可以看到。</li>\n<li>项目中引用css，js，img等资源时候的一个基础路径 <code>静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径</code></li>\n</ul>\n<h3 id=\"devServer-publicPath\"><a href=\"#devServer-publicPath\" class=\"headerlink\" title=\"devServer.publicPath\"></a>devServer.publicPath</h3><ul>\n<li>在开发阶段，我们借用devServer启动一个开发服务器进行开发，这里也会配置一个publicPath，这里的publicPath路径下的打包文件可以在浏览器中访问。</li>\n</ul>\n<h3 id=\"webpack-public-path\"><a href=\"#webpack-public-path\" class=\"headerlink\" title=\"webpack_public_path\"></a><strong>webpack_public_path</strong></h3><ul>\n<li><a href=\"https://webpack.js.org/api/module-variables/#importmetawebpackhot\">官网地址</a>:决定了output.publicPath的值，用于来指定应用程序中所有的资源的基本路径.</li>\n<li>这个变脸可以让我们在js代码中指定 output.publicPath变量；</li>\n</ul>\n<h2 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h2><ul>\n<li><a href=\"https://webpack.docschina.org/configuration/externals/\">externals</a>:防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。</li>\n</ul>\n<h2 id=\"多个webpack配置合并\"><a href=\"#多个webpack配置合并\" class=\"headerlink\" title=\"多个webpack配置合并\"></a>多个webpack配置合并</h2><ul>\n<li>当使用<code>webpack-merge</code>合并代码时,第二个参数会覆盖第一个。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack-base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunckhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// webpack01.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;merge&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> base = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack-base.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackConfig = <span class=\"title function_\">merge</span>(base,&#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunckhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist2&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">webpack</span>(webpackConfig,<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行命令 node node.js</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><h3 id=\"cross-env-插件\"><a href=\"#cross-env-插件\" class=\"headerlink\" title=\"cross-env 插件\"></a>cross-env 插件</h3><ul>\n<li>以下命令会将环境变量<code>APP_ID</code>的值 插入<code>process.env</code>对象中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载插件</span></span><br><span class=\"line\">npm install cross-env -S</span><br><span class=\"line\"><span class=\"comment\">// 使用 在命令行中</span></span><br><span class=\"line\">cross-env <span class=\"variable constant_\">APP_ID</span>=<span class=\"number\">111111</span> node ./test.<span class=\"property\">js</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"npm-run-命令-–APP-ID-111111\"><a href=\"#npm-run-命令-–APP-ID-111111\" class=\"headerlink\" title=\"npm run {命令} –APP_ID=111111\"></a>npm run {命令} –APP_ID=111111</h3><ul>\n<li>也可以通过npm方式插入环境变量-执行命令<code>npm run dev --APP_ID=111111</code> 切记： 一定是要在run后面跟参数；<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json文件下的</span></span><br><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node ./test.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--</code>:代表前缀<code>npm_config_</code><br><code>APP_ID</code>转移成小写，最后会看到属性名为 <code>npm_config_app_id</code>,值为<code>11111</code><br>会将环境变量插入<code>process.env</code>对象中</p>\n</blockquote>\n</li>\n<li>当然也可以放多个参数如 <code>npm run dev --APP_ID=111111 --APP=22222</code>等</li>\n</ul>\n<h2 id=\"如何删除文件\"><a href=\"#如何删除文件\" class=\"headerlink\" title=\"如何删除文件\"></a>如何删除文件</h2><h3 id=\"rimraf\"><a href=\"#rimraf\" class=\"headerlink\" title=\"rimraf\"></a>rimraf</h3><ul>\n<li><a href=\"https://www.npmjs.com/package/rimraf\">npm包</a><code>rimraf</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node包 代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rm = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rimraf&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">rm</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist/index01.js&#x27;</span>),<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h3></li>\n<li><a href=\"https://www.npmjs.com/package/clean-webpack-plugin\">webpack插件</a><code>clean-webpack-plugin</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack插件代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"title class_\">CleanWebpackPlugin</span>&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"script命令删除\"><a href=\"#script命令删除\" class=\"headerlink\" title=\"script命令删除\"></a>script命令删除</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ./dist &amp;&amp; webpack</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>俩者差距还是很大的，一个是node包好处是可以删除任意文件任意目录。一个是webpack插件只能删除打包的路径并全量删除。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h1 id=\"webpack优化\"><a href=\"#webpack优化\" class=\"headerlink\" title=\"webpack优化\"></a>webpack优化</h1><h2 id=\"CommonsChunkPlugin-3之后已废弃\"><a href=\"#CommonsChunkPlugin-3之后已废弃\" class=\"headerlink\" title=\"CommonsChunkPlugin - 3之后已废弃\"></a>CommonsChunkPlugin - 3之后已废弃</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000012828879\">文章中大佬写的和很详细</a>,他是关于webapck3的相关配置；</li>\n<li><a href=\"\">分离出第三方库、自定义公共模块、webpack运行文件</a></li>\n<li><a href=\"\">单独分离出第三方库、自定义公共模块、webpack运行文件</a></li>\n<li><a href=\"\">抽离第三方库和自定义公共模块</a></li>\n</ul>\n<h2 id=\"webpack5-SplitChunks\"><a href=\"#webpack5-SplitChunks\" class=\"headerlink\" title=\"webpack5 - SplitChunks\"></a>webpack5 - SplitChunks</h2><ul>\n<li>chunks选项，决定要提取那些模块。</li>\n</ul>\n<blockquote>\n<p>默认是async：只提取异步加载的模块出来打包到一个文件中。<br>异步加载的模块：通过import(‘xxx’)或require([‘xxx’],() =&gt;{})加载的模块。<br>initial：提取同步加载和异步加载模块，如果xxx在项目中异步加载了，也同步加载了，那么xxx这个模块会被提取两次，分别打包到不同的文件中。<br>同步加载的模块：通过 import xxx或require(‘xxx’)加载的模块。<br>all：不管异步加载还是同步加载的模块都提取出来，打包到一个文件中。</p>\n</blockquote>\n<ul>\n<li>minSize选项：规定被提取的模块在压缩前的大小最小值，单位为字节，默认为30000，只有超过了30000字节才会被提取。</li>\n<li>maxSize选项：把提取出来的模块打包生成的文件大小不能超过maxSize值，如果超过了，要对其进行分割并打包生成新的文件。单位为字节，默认为0，表示不限制大小。</li>\n<li>minChunks选项：表示要被提取的模块最小被引用次数，引用次数超过或等于minChunks值，才能被提取。</li>\n<li>maxAsyncRequests选项：最大的按需(异步)加载次数，默认为 6。</li>\n<li>maxInitialRequests选项：打包后的入口文件加载时，还能同时加载js文件的数量（包括入口文件），默认为4。<blockquote>\n<p>先说一下优先级 maxInitialRequests / maxAsyncRequests &lt;maxSize&lt;minSize。</p>\n</blockquote>\n</li>\n<li>automaticNameDelimiter选项：打包生成的js文件名的分割符，默认为~。</li>\n<li>name选项：打包生成js文件的名称。</li>\n<li>cacheGroups选项，核心重点，配置提取模块的方案。里面每一项代表一个提取模块的方案。下面是cacheGroups每项中特有的选项，其余选项和外面一致，若cacheGroups每项中有，就按配置的，没有就使用外面配置的。</li>\n<li>test选项：用来匹配要提取的模块的资源路径或名称。值是正则或函数。</li>\n<li>priority选项：方案的优先级，值越大表示提取模块时优先采用此方案。默认值为0。</li>\n<li>reuseExistingChunk选项：true/false。为true时，如果当前要提取的模块，在已经在打包生成的js文件中存在，则将重用该模块，而不是把当前要提取的模块打包生成新的js文件。</li>\n<li>enforce选项：true/false。为true时，忽略minSize，minChunks，maxAsyncRequests和maxInitialRequests外面选项</li>\n</ul>\n<h2 id=\"多个入口文件合并\"><a href=\"#多个入口文件合并\" class=\"headerlink\" title=\"多个入口文件合并\"></a>多个入口文件合并</h2><ol>\n<li>在a.js 引入b.js, webpack打包的时候自动会合成<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./b.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 配置文件只有a入口就可</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bunld.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>配置入口的时候多个入口<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: [<span class=\"string\">&#x27;./src/a.js&#x27;</span>, <span class=\"string\">&#x27;./src/b.js&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bunld.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"多个入口文件分别打包\"><a href=\"#多个入口文件分别打包\" class=\"headerlink\" title=\"多个入口文件分别打包\"></a>多个入口文件分别打包</h2><ul>\n<li>其实分别打包文件就是将<code>entry</code>变成对象而已，是不是很简单</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">a</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">b</span>: <span class=\"string\">&#x27;./src/b.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"webpack插件\"><a href=\"#webpack插件\" class=\"headerlink\" title=\"webpack插件\"></a>webpack插件</h1><h2 id=\"css文件压缩\"><a href=\"#css文件压缩\" class=\"headerlink\" title=\"css文件压缩\"></a>css文件压缩</h2><ul>\n<li>npm install optimize-css-assets-webpack-plugin -D</li>\n<li>npm install cssnano -D<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span> </span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name][chunkhash:8].js&#x27;</span>, <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">OptimizeCSSAssetsPlugin</span>(&#123; <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>, <span class=\"attr\">cssProcessor</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano’)</span></span><br><span class=\"line\"><span class=\"string\">\t]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"自动清理构建目录\"><a href=\"#自动清理构建目录\" class=\"headerlink\" title=\"自动清理构建目录\"></a>自动清理构建目录</h2><ul>\n<li><a href=\"https://juejin.cn/post/6844903853708541959\">借鉴博客</a> <a href=\"https://www.npmjs.com/package/html-webpack-plugin\">html-webpack-plugin</a> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">template</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;src/search.html&#x27;</span>), <span class=\"comment\">// 模板路径</span></span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;search.html&#x27;</span>, <span class=\"comment\">// 文件名称</span></span><br><span class=\"line\">\t\t<span class=\"attr\">chunks</span>: [<span class=\"string\">&#x27;search&#x27;</span>], <span class=\"comment\">// 生成的html用哪些chunk</span></span><br><span class=\"line\">\t\t<span class=\"attr\">inject</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动注入</span></span><br><span class=\"line\">\t\t<span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"自动清理理构建目录\"><a href=\"#自动清理理构建目录\" class=\"headerlink\" title=\"自动清理理构建目录\"></a>自动清理理构建目录</h2><ul>\n<li>npm install aotoprefixer -D</li>\n<li>npm install postcss-loader -D<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/.less$/</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">use</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&#x27;less-loader&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">plugins</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;last 2 version&#x27;</span>, <span class=\"string\">&#x27;&gt;1%&#x27;</span>, <span class=\"string\">&#x27;ios 7&#x27;</span>]</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t]</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"资源内联的意义\"><a href=\"#资源内联的意义\" class=\"headerlink\" title=\"资源内联的意义\"></a>资源内联的意义</h2><ol>\n<li>raw-loader 内联 html</li>\n</ol>\n<ul>\n<li><code>注意版本问题</code> npm install <a href=\"mailto:&#x72;&#x61;&#119;&#45;&#108;&#x6f;&#x61;&#100;&#101;&#x72;&#x40;&#48;&#46;&#x35;&#46;&#49;\">&#x72;&#x61;&#119;&#45;&#108;&#x6f;&#x61;&#100;&#101;&#x72;&#x40;&#48;&#46;&#x35;&#46;&#49;</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;$&#123;<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;raw-loader!babel-loader!. /meta.html&#x27;</span>)&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>raw-loader 内联 JS<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;$&#123;<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;raw-loader!babel-loader!../node_modules/lib-flexible&#x27;</span>)&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"DefinePlugin-定义环境变量\"><a href=\"#DefinePlugin-定义环境变量\" class=\"headerlink\" title=\"DefinePlugin - 定义环境变量\"></a>DefinePlugin - 定义环境变量</h2><ul>\n<li><a href=\"https://webpack.docschina.org/plugins/define-plugin#root\">webpack.DefinePlugin</a>:编译时将你代码中的变量替换为其他值或表达式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a文件&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"variable constant_\">NAME</span>;</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">// 打包好后的文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a文件&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title class_\">Even</span>;</span><br></pre></td></tr></table></figure></li>\n<li>会搜索打包文件变量<code>NAME</code>替换成<code>Even</code>变量。此时代码会报错，因为<code>let a = Even;</code>并没有定义。</li>\n<li>如果想让<code>Even</code>是字符串请如下配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&quot;&#x27;Even&#x27;&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"ExtractTextplugin-文件提取\"><a href=\"#ExtractTextplugin-文件提取\" class=\"headerlink\" title=\"ExtractTextplugin - 文件提取\"></a>ExtractTextplugin - 文件提取</h2><ul>\n<li>只在weback3的时候才可使用</li>\n<li><a href=\"https://www.npmjs.com/package/extract-text-webpack-plugin\">ExtractTextplugin</a></li>\n</ul>\n<h2 id=\"mini-css-extract-plugin-css提取\"><a href=\"#mini-css-extract-plugin-css提取\" class=\"headerlink\" title=\"mini-css-extract-plugin - css提取\"></a>mini-css-extract-plugin - css提取</h2><ul>\n<li>webpack4之后开始使用此插件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载</span></span><br><span class=\"line\">npm install mini-css-extract-plugin -D</span><br><span class=\"line\"><span class=\"comment\">// webpack中引用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用时候需要在俩处配置 </span></span><br><span class=\"line\"><span class=\"comment\">// 1. 规则中</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(less|css)$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;less-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">lessOptions</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">javascriptEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 2. 插件中</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/base.css&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[id].css&#x27;</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"webpack解析器\"><a href=\"#webpack解析器\" class=\"headerlink\" title=\"webpack解析器\"></a>webpack解析器</h1><h2 id=\"webpack-loader\"><a href=\"#webpack-loader\" class=\"headerlink\" title=\"webpack-loader\"></a>webpack-loader</h2><ul>\n<li><a href=\"https://www.webpackjs.com/loaders/url-loader/\">loader</a>官网会发现loader大概有7个模块,<strong>1、文件，2、JSON，3、转换编译，4、模板，5、样式，6、清理和测试，7、框架</strong></li>\n<li>webpack因为只识别<code>js</code>文件，所以需要这些loader来处理文件转成js,个个大神的开源代码和维护都在社区有明显标注</li>\n<li>常规选项配置</li>\n</ul>\n<ol>\n<li>test: 要检测的文件</li>\n<li>loader: 要使用的插件</li>\n<li>include: 解析包含的文件</li>\n<li>exclude: 解析要排除的文件</li>\n<li>options: 插件高级配置选项</li>\n<li>use: [] 多个插件配置时使用</li>\n</ol>\n<h3 id=\"vue-loader\"><a href=\"#vue-loader\" class=\"headerlink\" title=\"vue-loader\"></a>vue-loader</h3><ul>\n<li>细心的朋友会发现<a href=\"https://vue-loader.vuejs.org/zh/\">vue-loader</a>并不在上面<a href=\"https://www.webpackjs.com/loaders/url-loader/\">webpack-loader</a>里面, <code>why?</code>.</li>\n<li><strong>个人理解</strong>: <code>.vue</code>是复杂的文件，文档loader都是处理单个文件,比如<code>.json</code>文件里面全是json数据，而<code>.vue</code>里面有三种<strong>1.style,2.script,3.html</strong>。</li>\n<li>所以：为了把<code>vue</code>文件拆分成loader<code>（如：style-loader、html-loader、script-loader）</code>能够解析的文件,才有了<code>vue-loader</code>插件。<a href=\"https://vue-loader.vuejs.org/zh/\">单独的配置文档</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// 所有的vue项目，这个插件是必不可少的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">VueLoaderPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-loader&#x27;</span>)</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">VueLoaderPlugin</span>()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完全理解设计者的初衷，一个页面写所有的js、css、html真的很炫酷，不向其他开发者为了显示自己所谓的高端操作，<code>解耦后的代码</code>真的很难下咽,一个函数能搞定的事情非要给你弄三个文件，6个函数。。。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"url-loader\"><a href=\"#url-loader\" class=\"headerlink\" title=\"url-loader\"></a>url-loader</h3><ul>\n<li>看到webpack代码,不是很理解<code>limit,name的作用</code>，于是去webpack官网找了很久。。。。才发现他是loader的配置。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\"><span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">limit</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: path.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;../build&quot;</span>, <span class=\"variable constant_\">APP_ID</span>, <span class=\"string\">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li>limit:低于指定的限制时，可以返回一个 DataURL。</li>\n<li>name:这个参数让我很困惑,url-loader并没有对此字段做解释，查了(url-loader)[<a href=\"https://github.com/webpack-contrib/file-loader]%E4%B9%8B%E5%90%8E%E6%89%8D%E6%89%BE%E5%88%B0\">https://github.com/webpack-contrib/file-loader]之后才找到</a>.</li>\n</ul>\n<h3 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a>css-loader</h3><ul>\n<li>代码如下！ <a href=\"https://www.npmjs.com/package/css-loader\">文档</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../css/base.css&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// base<span class=\"selector-class\">.less</span></span><br><span class=\"line\"><span class=\"selector-id\">#phone</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;../assets/actrulebtn.png&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>问题：在入口文件引入css时,css-loader将url自动处理了，并在<code>publickpath</code>中输出了图片,自信看文档有个url选项，是否修改url配置，当设置<code>url:false</code>时，不会做额外处理。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"规范代码\"><a href=\"#规范代码\" class=\"headerlink\" title=\"规范代码\"></a>规范代码</h2><p><a href=\"https://eslint.bootcss.com/docs/user-guide/configuring\">esLint官网</a></p>\n<ul>\n<li>新增<code>.eslintrc.js</code>文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;parser&quot;</span>: <span class=\"string\">&quot;babel-eslint&quot;</span>, <span class=\"comment\">// 使用解析器</span></span><br><span class=\"line\">    <span class=\"string\">&quot;extends&quot;</span>: <span class=\"string\">&quot;airbnb&quot;</span>,  <span class=\"comment\">// 继承airbnb</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前想启用的环境</span></span><br><span class=\"line\">    <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;browser&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;node&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 定义规则</span></span><br><span class=\"line\">    <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;indent&quot;</span>: [<span class=\"string\">&quot;error&quot;</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>npm 下载<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;babel-eslint&quot;</span>: <span class=\"string\">&quot;^10.0.1&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint&quot;</span>: <span class=\"string\">&quot;^5.16.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-config-airbnb&quot;</span>: <span class=\"string\">&quot;^17.1.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-config-airbnb-base&quot;</span>: <span class=\"string\">&quot;^13.1.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-loader&quot;</span>: <span class=\"string\">&quot;^2.1.2&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-plugin-import&quot;</span>: <span class=\"string\">&quot;^2.17.3&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-plugin-jsx-a11y&quot;</span>: <span class=\"string\">&quot;^6.2.1&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-plugin-react&quot;</span>: <span class=\"string\">&quot;^7.13.0&quot;</span>,</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"webpack如何暴露库\"><a href=\"#webpack如何暴露库\" class=\"headerlink\" title=\"webpack如何暴露库\"></a>webpack如何暴露库</h2>","site":{"data":{}},"excerpt":"<hr>\n<ul>\n<li>版本：<br>  <code>&quot;webpack&quot;: &quot;^4.31.0&quot;,</code><br>  <code>&quot;webpack-cli&quot;: &quot;^3.3.2&quot;,</code><br>  <code>&quot;webpack-dev-server&quot;: &quot;^3.3.1&quot;</code></li>\n</ul>\n<hr>\n<h1 id=\"webpack环境搭建\"><a href=\"#webpack环境搭建\" class=\"headerlink\" title=\"webpack环境搭建\"></a>webpack环境搭建</h1><h2 id=\"配置⽂文件名称\"><a href=\"#配置⽂文件名称\" class=\"headerlink\" title=\"配置⽂文件名称\"></a>配置⽂文件名称</h2><ul>\n<li>webpack 默认配置⽂文件:<code>webpack.config.js</code></li>\n<li>可以通过 <code>webpack --config 指定配置⽂文件</code></li>\n<li>当我们执行<code>webpack --config &#123;文件名&#125;</code> 命令的时候，具体做了哪些？</li>\n</ul>\n<ol>\n<li>寻找<code>node_modules</code>文件下的<code>.bin</code>文件</li>\n<li><code>.bin</code>在指向真实的配置文件包</li>\n<li>配置文件会作为webpack(config)：<code>config</code>（便是module.export暴露出的对象）参数对象传递给webpack;<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js 文件</span></span><br><span class=\"line\"><span class=\"comment\">// 会将module.exports暴露的模块传递给webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"node-执行webpack配置文件\"><a href=\"#node-执行webpack配置文件\" class=\"headerlink\" title=\"node 执行webpack配置文件\"></a><code>node 执行webpack配置文件</code></h2><ul>\n<li><a href=\"https://webpack.docschina.org/api/node/\">如何开启webpack配置文件</a> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node.js文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>","more":"<h2 id=\"通过npm-srcript-运行-webpack\"><a href=\"#通过npm-srcript-运行-webpack\" class=\"headerlink\" title=\"通过npm srcript 运行 webpack\"></a>通过npm srcript 运行 webpack</h2><ul>\n<li>碰到的问题， 在当前文件夹下<code>终端</code>执行 <code>webpack --config weback.conig.js</code> 一直报错,报错片段如下！<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TypeError: compiler.plugin is not a function</span><br><span class=\"line\">    at CommonsChunkPlugin.apply (/Users/even/Even/continue/packagingTools/webpack-study/webpack-CommonsChunkPlugin/CommonsChunkPlugin01/node_modules/webpack/lib/optimize/CommonsChunkPlugin.js:88:12)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>查看当前环境版本 <code>webpack -v</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">webpack</span>: <span class=\"number\">5.66</span><span class=\"number\">.0</span></span><br><span class=\"line\">webpack-<span class=\"attr\">cli</span>: <span class=\"number\">4.9</span><span class=\"number\">.1</span></span><br><span class=\"line\">webpack-dev-server <span class=\"number\">3.11</span><span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当前文件夹下<code>package.json</code></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;webpack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.12.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置文件webpack.conig.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.conig.js文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> packagejson = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./package.json&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">first</span>: <span class=\"string\">&#x27;./src/first.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">second</span>: <span class=\"string\">&#x27;./src/second.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">vendor</span>: <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(packagejson.<span class=\"property\">dependencies</span>)<span class=\"comment\">//获取生产环境依赖的库</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.<span class=\"property\">optimize</span>.<span class=\"title class_\">CommonsChunkPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vendor&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span> </span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = config;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>仔细看第二行 指向了webpack5全局的包，所以报错高版本并不兼容3，切换全局webpack成本有点大。</p>\n</blockquote>\n<ul>\n<li>突然想到如果在<code>package.json</code>里面执行命令，是否会指向当前文件的webpack3版本呢？ 果然真的成功了。。。。。<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"webpack文件监听\"><a href=\"#webpack文件监听\" class=\"headerlink\" title=\"webpack文件监听\"></a>webpack文件监听</h2><ul>\n<li>文件监听是在发现源码发⽣生变化时，⾃动重新构建出新的输出⽂文件。</li>\n<li>webpack 开启监听模式，有两种⽅方式: 唯⼀一缺陷:<code>每次需要⼿手动刷新浏览器器</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动 webpack 命令时，带上 --watch 参数 </span></span><br><span class=\"line\"><span class=\"comment\">//在配置 webpack.config.js 中设置 watch: true</span></span><br></pre></td></tr></table></figure></li>\n<li>⽂文件监听的原理理分析<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//轮询判断⽂文件的最后编辑时间是否变化 某个⽂文件发⽣生了了变化，并不不会⽴立刻告诉监听者，⽽而是先缓存起来，等 aggregateTimeout</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">export</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//默认 false，也就是不不开启</span></span><br><span class=\"line\"><span class=\"attr\">watch</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//只有开启监听模式时，watchOptions才有意义 </span></span><br><span class=\"line\">\t<span class=\"attr\">wathcOptions</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//默认为空，不监听的文件或者文件夹，支持正则匹配</span></span><br><span class=\"line\">\t\t<span class=\"attr\">ignored</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">//监听到变化发生后会等300ms再去执行，默认300ms</span></span><br><span class=\"line\">\t\t<span class=\"attr\">aggregateTimeout</span>: <span class=\"number\">300</span>, <span class=\"comment\">//判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次 </span></span><br><span class=\"line\">\t\t<span class=\"attr\">poll</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><ul>\n<li>文件指纹: 打包后输出的⽂文件名的后缀,文件指纹如何生成?<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hash:和整个项⽬目的构建相关，只要项⽬目⽂文件有修改，整个项⽬目构建的 hash 值就会更更改,</span></span><br><span class=\"line\"><span class=\"comment\">// Chunkhash:和 webpack 打包的 chunk 有关，不不同的 entry 会⽣生成不不同的 chunkhash 值</span></span><br><span class=\"line\"><span class=\"comment\">// Contenthash:根据⽂文件内容来定义 hash ，⽂文件内容不不变，则 contenthash 不不变</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用webpack内置的stats\"><a href=\"#使用webpack内置的stats\" class=\"headerlink\" title=\"使用webpack内置的stats\"></a>使用webpack内置的stats</h2><ul>\n<li>stats: 构建的统计信息<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json 中使用 stats</span></span><br><span class=\"line\"><span class=\"string\">&quot;build:stats&quot;</span>: <span class=\"string\">&quot;webpack --json &gt; stats.json&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"多进程-多实例构建\"><a href=\"#多进程-多实例构建\" class=\"headerlink\" title=\"多进程/多实例构建\"></a>多进程/多实例构建</h2><ul>\n<li><p>使用 HappyPack 解析资源</p>\n</li>\n<li><p>使用 thread-loader</p>\n</li>\n</ul>\n<h1 id=\"webpack常规配置\"><a href=\"#webpack常规配置\" class=\"headerlink\" title=\"webpack常规配置\"></a>webpack常规配置</h1><h2 id=\"Entry的用法\"><a href=\"#Entry的用法\" class=\"headerlink\" title=\"Entry的用法\"></a>Entry的用法</h2><ul>\n<li>单入口：entry是一个字符串<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>多入口：entry是一个对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">adminApp</span>: <span class=\"string\">&#x27;./src/adminApp.js&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Output-的⽤用法\"><a href=\"#Output-的⽤用法\" class=\"headerlink\" title=\"Output 的⽤用法\"></a>Output 的⽤用法</h2><ul>\n<li>单⼊入⼝口配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span> </span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>多⼊入⼝口配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span> &#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>, <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"核⼼心概念之-Loaders\"><a href=\"#核⼼心概念之-Loaders\" class=\"headerlink\" title=\"核⼼心概念之 Loaders\"></a>核⼼心概念之 Loaders</h2></li>\n<li>loaders的用法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span> &#125;,</span><br><span class=\"line\">\t<span class=\"attr\">module</span>: &#123; </span><br><span class=\"line\">\t\t<span class=\"attr\">rules</span>: [</span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.txt$/</span>,   <span class=\"comment\">// test 指定匹配规则</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">use</span>: <span class=\"string\">&#x27;raw-loader&#x27;</span> <span class=\"comment\">// use 指定使⽤用的 loader 名称</span></span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"核⼼心概念之-Plugins\"><a href=\"#核⼼心概念之-Plugins\" class=\"headerlink\" title=\"核⼼心概念之 Plugins\"></a>核⼼心概念之 Plugins</h2><ul>\n<li>插件⽤用于 bundle ⽂文件的优化，资源管理理和环境变量量注⼊入<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span> &#125;,</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;<span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span>&#125;) <span class=\"comment\">// 放到 plugins 数组⾥里里</span></span><br><span class=\"line\">\t] </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"核⼼心概念之-Mode\"><a href=\"#核⼼心概念之-Mode\" class=\"headerlink\" title=\"核⼼心概念之 Mode\"></a>核⼼心概念之 Mode</h2><ul>\n<li><a href=\"https://webpack.docschina.org/configuration/mode/\">Mode</a>⽤用来指定当前的构建环境是:production、development 还是 none</li>\n</ul>\n<ol>\n<li><p>source map : 通过 source map 定位到源代码</p>\n<blockquote>\n<p>mode production 的情况下默认开启开发环境开启，</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eval: 使⽤用eval包裹模块代码 </span></span><br><span class=\"line\"><span class=\"comment\">// source map: 产⽣生.map⽂文件 </span></span><br><span class=\"line\"><span class=\"comment\">//cheap: 不不包含列列信息</span></span><br><span class=\"line\"><span class=\"comment\">//nline: 将.map作为DataURI嵌⼊入，不不单独⽣生成.map⽂文件 </span></span><br><span class=\"line\"><span class=\"comment\">//module:包含loader的sourcemap</span></span><br><span class=\"line\"><span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>tree shaking(摇树优化) : 只抽离bundle中有用的代码</p>\n<blockquote>\n<p>mode production 的情况下默认开启开发环境开启，</p>\n</blockquote>\n</li>\n<li><p>scope hoisting : 解决大量闭包代码</p>\n<blockquote>\n<p>mode production 的情况下默认开启开发环境开启，<br>原理理:将所有模块的代码按照引⽤用顺序放在⼀一个函数作⽤用域⾥里里，然后适当的重命名⼀一<br>些变量量以防⽌止变量量名冲突</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"webpack打包库\"><a href=\"#webpack打包库\" class=\"headerlink\" title=\"webpack打包库\"></a>webpack打包库</h2><blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/108216236\">参考文章</a> <a href=\"https://webpack.docschina.org/configuration/mode/\">官网解释</a></p>\n</blockquote>\n<ul>\n<li>library : 指定的全局变量</li>\n<li>libraryTarget : 暴露方式，是commonjs、commonjs2、umd还是this、var等<br><img src=\"/images/library.jpg\"></li>\n<li>如何指对 .min 压缩 <code>npm install terser-webpack-plugin@1.3.0</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;large-number&#x27;</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;large-number.min&#x27;</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">library</span>: <span class=\"string\">&#x27;largeNumber&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">libraryExport</span>: <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">include</span>: <span class=\"regexp\">/\\.min\\.js$/</span>,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"路径-借鉴博客\"><a href=\"#路径-借鉴博客\" class=\"headerlink\" title=\"路径 借鉴博客\"></a>路径 <a href=\"https://zhuanlan.zhihu.com/p/36354511\">借鉴博客</a></h2><ul>\n<li>官网说：如果服务器下有文件需要设置webpack的publicPath配置，但又是为什么？</li>\n</ul>\n<ol>\n<li>我们先了解一下路径问题：<blockquote>\n<p>绝对路径指文件的完整路径，包括文件传输的协议HTTP、FTP等，一般用于网站的外部链接，<br>相对路径是指相对于当前文件的路径，它包含了从当前文件指向目的文件的路径，适用于网站的内部链接。<br>根路径的设置以“/”开头，后面紧跟文件路径，例如：/download/index.html。根路径必须在配置好的<code>服务器环境中</code>才能使用。</p>\n</blockquote>\n</li>\n<li>如何使用根路径：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;/subVue/b.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>选择<code>路径</code>文件夹  利用http-server开服务  <a href=\"\">代码</a><br>完全模拟生产环境服务器下的文件了，直接点击index.html就可以加载到<code>b.js</code>文件。</p>\n</blockquote>\n</li>\n<li>修改webpack的publicPath其实就是修改了<code>script</code>引入路径变成根路径。代码如下<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当我们把publickPath设置成subVue时，html-webpack-plugin 插件自动替换根路径</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;/subVue/b.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"output-path\"><a href=\"#output-path\" class=\"headerlink\" title=\"output.path\"></a>output.path</h3><ul>\n<li><a href=\"https://webpack.js.org/configuration/output/#outputpath\">官网地址</a>: 参数<code>绝对路径</code>，将压缩好的代码打包到当前位置。</li>\n</ul>\n<h3 id=\"output-publicPath\"><a href=\"#output-publicPath\" class=\"headerlink\" title=\"output.publicPath\"></a>output.publicPath</h3><ul>\n<li>打包的配置</li>\n<li><a href=\"https://www.webpackjs.com/guides/public-path/\">官网地址</a>: 参数<code>相对路径</code>是<code>相对于build之后的index.html的</code>，打包后得到的html中可以看到。</li>\n<li>项目中引用css，js，img等资源时候的一个基础路径 <code>静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径</code></li>\n</ul>\n<h3 id=\"devServer-publicPath\"><a href=\"#devServer-publicPath\" class=\"headerlink\" title=\"devServer.publicPath\"></a>devServer.publicPath</h3><ul>\n<li>在开发阶段，我们借用devServer启动一个开发服务器进行开发，这里也会配置一个publicPath，这里的publicPath路径下的打包文件可以在浏览器中访问。</li>\n</ul>\n<h3 id=\"webpack-public-path\"><a href=\"#webpack-public-path\" class=\"headerlink\" title=\"webpack_public_path\"></a><strong>webpack_public_path</strong></h3><ul>\n<li><a href=\"https://webpack.js.org/api/module-variables/#importmetawebpackhot\">官网地址</a>:决定了output.publicPath的值，用于来指定应用程序中所有的资源的基本路径.</li>\n<li>这个变脸可以让我们在js代码中指定 output.publicPath变量；</li>\n</ul>\n<h2 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h2><ul>\n<li><a href=\"https://webpack.docschina.org/configuration/externals/\">externals</a>:防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。</li>\n</ul>\n<h2 id=\"多个webpack配置合并\"><a href=\"#多个webpack配置合并\" class=\"headerlink\" title=\"多个webpack配置合并\"></a>多个webpack配置合并</h2><ul>\n<li>当使用<code>webpack-merge</code>合并代码时,第二个参数会覆盖第一个。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack-base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunckhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// webpack01.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;merge&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> base = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack-base.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> webpackConfig = <span class=\"title function_\">merge</span>(base,&#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;a.[chunckhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./dist2&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">webpack</span>(webpackConfig,<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行命令 node node.js</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><h3 id=\"cross-env-插件\"><a href=\"#cross-env-插件\" class=\"headerlink\" title=\"cross-env 插件\"></a>cross-env 插件</h3><ul>\n<li>以下命令会将环境变量<code>APP_ID</code>的值 插入<code>process.env</code>对象中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载插件</span></span><br><span class=\"line\">npm install cross-env -S</span><br><span class=\"line\"><span class=\"comment\">// 使用 在命令行中</span></span><br><span class=\"line\">cross-env <span class=\"variable constant_\">APP_ID</span>=<span class=\"number\">111111</span> node ./test.<span class=\"property\">js</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"npm-run-命令-–APP-ID-111111\"><a href=\"#npm-run-命令-–APP-ID-111111\" class=\"headerlink\" title=\"npm run {命令} –APP_ID=111111\"></a>npm run {命令} –APP_ID=111111</h3><ul>\n<li>也可以通过npm方式插入环境变量-执行命令<code>npm run dev --APP_ID=111111</code> 切记： 一定是要在run后面跟参数；<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json文件下的</span></span><br><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node ./test.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--</code>:代表前缀<code>npm_config_</code><br><code>APP_ID</code>转移成小写，最后会看到属性名为 <code>npm_config_app_id</code>,值为<code>11111</code><br>会将环境变量插入<code>process.env</code>对象中</p>\n</blockquote>\n</li>\n<li>当然也可以放多个参数如 <code>npm run dev --APP_ID=111111 --APP=22222</code>等</li>\n</ul>\n<h2 id=\"如何删除文件\"><a href=\"#如何删除文件\" class=\"headerlink\" title=\"如何删除文件\"></a>如何删除文件</h2><h3 id=\"rimraf\"><a href=\"#rimraf\" class=\"headerlink\" title=\"rimraf\"></a>rimraf</h3><ul>\n<li><a href=\"https://www.npmjs.com/package/rimraf\">npm包</a><code>rimraf</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// node包 代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rm = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rimraf&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">rm</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist/index01.js&#x27;</span>),<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h3></li>\n<li><a href=\"https://www.npmjs.com/package/clean-webpack-plugin\">webpack插件</a><code>clean-webpack-plugin</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack插件代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"title class_\">CleanWebpackPlugin</span>&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"script命令删除\"><a href=\"#script命令删除\" class=\"headerlink\" title=\"script命令删除\"></a>script命令删除</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ./dist &amp;&amp; webpack</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>俩者差距还是很大的，一个是node包好处是可以删除任意文件任意目录。一个是webpack插件只能删除打包的路径并全量删除。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h1 id=\"webpack优化\"><a href=\"#webpack优化\" class=\"headerlink\" title=\"webpack优化\"></a>webpack优化</h1><h2 id=\"CommonsChunkPlugin-3之后已废弃\"><a href=\"#CommonsChunkPlugin-3之后已废弃\" class=\"headerlink\" title=\"CommonsChunkPlugin - 3之后已废弃\"></a>CommonsChunkPlugin - 3之后已废弃</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000012828879\">文章中大佬写的和很详细</a>,他是关于webapck3的相关配置；</li>\n<li><a href=\"\">分离出第三方库、自定义公共模块、webpack运行文件</a></li>\n<li><a href=\"\">单独分离出第三方库、自定义公共模块、webpack运行文件</a></li>\n<li><a href=\"\">抽离第三方库和自定义公共模块</a></li>\n</ul>\n<h2 id=\"webpack5-SplitChunks\"><a href=\"#webpack5-SplitChunks\" class=\"headerlink\" title=\"webpack5 - SplitChunks\"></a>webpack5 - SplitChunks</h2><ul>\n<li>chunks选项，决定要提取那些模块。</li>\n</ul>\n<blockquote>\n<p>默认是async：只提取异步加载的模块出来打包到一个文件中。<br>异步加载的模块：通过import(‘xxx’)或require([‘xxx’],() =&gt;{})加载的模块。<br>initial：提取同步加载和异步加载模块，如果xxx在项目中异步加载了，也同步加载了，那么xxx这个模块会被提取两次，分别打包到不同的文件中。<br>同步加载的模块：通过 import xxx或require(‘xxx’)加载的模块。<br>all：不管异步加载还是同步加载的模块都提取出来，打包到一个文件中。</p>\n</blockquote>\n<ul>\n<li>minSize选项：规定被提取的模块在压缩前的大小最小值，单位为字节，默认为30000，只有超过了30000字节才会被提取。</li>\n<li>maxSize选项：把提取出来的模块打包生成的文件大小不能超过maxSize值，如果超过了，要对其进行分割并打包生成新的文件。单位为字节，默认为0，表示不限制大小。</li>\n<li>minChunks选项：表示要被提取的模块最小被引用次数，引用次数超过或等于minChunks值，才能被提取。</li>\n<li>maxAsyncRequests选项：最大的按需(异步)加载次数，默认为 6。</li>\n<li>maxInitialRequests选项：打包后的入口文件加载时，还能同时加载js文件的数量（包括入口文件），默认为4。<blockquote>\n<p>先说一下优先级 maxInitialRequests / maxAsyncRequests &lt;maxSize&lt;minSize。</p>\n</blockquote>\n</li>\n<li>automaticNameDelimiter选项：打包生成的js文件名的分割符，默认为~。</li>\n<li>name选项：打包生成js文件的名称。</li>\n<li>cacheGroups选项，核心重点，配置提取模块的方案。里面每一项代表一个提取模块的方案。下面是cacheGroups每项中特有的选项，其余选项和外面一致，若cacheGroups每项中有，就按配置的，没有就使用外面配置的。</li>\n<li>test选项：用来匹配要提取的模块的资源路径或名称。值是正则或函数。</li>\n<li>priority选项：方案的优先级，值越大表示提取模块时优先采用此方案。默认值为0。</li>\n<li>reuseExistingChunk选项：true/false。为true时，如果当前要提取的模块，在已经在打包生成的js文件中存在，则将重用该模块，而不是把当前要提取的模块打包生成新的js文件。</li>\n<li>enforce选项：true/false。为true时，忽略minSize，minChunks，maxAsyncRequests和maxInitialRequests外面选项</li>\n</ul>\n<h2 id=\"多个入口文件合并\"><a href=\"#多个入口文件合并\" class=\"headerlink\" title=\"多个入口文件合并\"></a>多个入口文件合并</h2><ol>\n<li>在a.js 引入b.js, webpack打包的时候自动会合成<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./b.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 配置文件只有a入口就可</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bunld.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>配置入口的时候多个入口<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">main</span>: [<span class=\"string\">&#x27;./src/a.js&#x27;</span>, <span class=\"string\">&#x27;./src/b.js&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bunld.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"多个入口文件分别打包\"><a href=\"#多个入口文件分别打包\" class=\"headerlink\" title=\"多个入口文件分别打包\"></a>多个入口文件分别打包</h2><ul>\n<li>其实分别打包文件就是将<code>entry</code>变成对象而已，是不是很简单</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">a</span>: <span class=\"string\">&#x27;./src/a.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">b</span>: <span class=\"string\">&#x27;./src/b.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./dist&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"webpack插件\"><a href=\"#webpack插件\" class=\"headerlink\" title=\"webpack插件\"></a>webpack插件</h1><h2 id=\"css文件压缩\"><a href=\"#css文件压缩\" class=\"headerlink\" title=\"css文件压缩\"></a>css文件压缩</h2><ul>\n<li>npm install optimize-css-assets-webpack-plugin -D</li>\n<li>npm install cssnano -D<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; </span><br><span class=\"line\">\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span> </span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name][chunkhash:8].js&#x27;</span>, <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">OptimizeCSSAssetsPlugin</span>(&#123; <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>, <span class=\"attr\">cssProcessor</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano’)</span></span><br><span class=\"line\"><span class=\"string\">\t]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"自动清理构建目录\"><a href=\"#自动清理构建目录\" class=\"headerlink\" title=\"自动清理构建目录\"></a>自动清理构建目录</h2><ul>\n<li><a href=\"https://juejin.cn/post/6844903853708541959\">借鉴博客</a> <a href=\"https://www.npmjs.com/package/html-webpack-plugin\">html-webpack-plugin</a> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">template</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;src/search.html&#x27;</span>), <span class=\"comment\">// 模板路径</span></span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&#x27;search.html&#x27;</span>, <span class=\"comment\">// 文件名称</span></span><br><span class=\"line\">\t\t<span class=\"attr\">chunks</span>: [<span class=\"string\">&#x27;search&#x27;</span>], <span class=\"comment\">// 生成的html用哪些chunk</span></span><br><span class=\"line\">\t\t<span class=\"attr\">inject</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动注入</span></span><br><span class=\"line\">\t\t<span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"自动清理理构建目录\"><a href=\"#自动清理理构建目录\" class=\"headerlink\" title=\"自动清理理构建目录\"></a>自动清理理构建目录</h2><ul>\n<li>npm install aotoprefixer -D</li>\n<li>npm install postcss-loader -D<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/.less$/</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">use</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&#x27;less-loader&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">plugins</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;last 2 version&#x27;</span>, <span class=\"string\">&#x27;&gt;1%&#x27;</span>, <span class=\"string\">&#x27;ios 7&#x27;</span>]</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t]</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"资源内联的意义\"><a href=\"#资源内联的意义\" class=\"headerlink\" title=\"资源内联的意义\"></a>资源内联的意义</h2><ol>\n<li>raw-loader 内联 html</li>\n</ol>\n<ul>\n<li><code>注意版本问题</code> npm install <a href=\"mailto:&#x72;&#x61;&#119;&#45;&#108;&#x6f;&#x61;&#100;&#101;&#x72;&#x40;&#48;&#46;&#x35;&#46;&#49;\">&#x72;&#x61;&#119;&#45;&#108;&#x6f;&#x61;&#100;&#101;&#x72;&#x40;&#48;&#46;&#x35;&#46;&#49;</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;$&#123;<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;raw-loader!babel-loader!. /meta.html&#x27;</span>)&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>raw-loader 内联 JS<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;$&#123;<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;raw-loader!babel-loader!../node_modules/lib-flexible&#x27;</span>)&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"DefinePlugin-定义环境变量\"><a href=\"#DefinePlugin-定义环境变量\" class=\"headerlink\" title=\"DefinePlugin - 定义环境变量\"></a>DefinePlugin - 定义环境变量</h2><ul>\n<li><a href=\"https://webpack.docschina.org/plugins/define-plugin#root\">webpack.DefinePlugin</a>:编译时将你代码中的变量替换为其他值或表达式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a文件&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"variable constant_\">NAME</span>;</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">// 打包好后的文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a文件&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title class_\">Even</span>;</span><br></pre></td></tr></table></figure></li>\n<li>会搜索打包文件变量<code>NAME</code>替换成<code>Even</code>变量。此时代码会报错，因为<code>let a = Even;</code>并没有定义。</li>\n<li>如果想让<code>Even</code>是字符串请如下配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&quot;&#x27;Even&#x27;&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"ExtractTextplugin-文件提取\"><a href=\"#ExtractTextplugin-文件提取\" class=\"headerlink\" title=\"ExtractTextplugin - 文件提取\"></a>ExtractTextplugin - 文件提取</h2><ul>\n<li>只在weback3的时候才可使用</li>\n<li><a href=\"https://www.npmjs.com/package/extract-text-webpack-plugin\">ExtractTextplugin</a></li>\n</ul>\n<h2 id=\"mini-css-extract-plugin-css提取\"><a href=\"#mini-css-extract-plugin-css提取\" class=\"headerlink\" title=\"mini-css-extract-plugin - css提取\"></a>mini-css-extract-plugin - css提取</h2><ul>\n<li>webpack4之后开始使用此插件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载</span></span><br><span class=\"line\">npm install mini-css-extract-plugin -D</span><br><span class=\"line\"><span class=\"comment\">// webpack中引用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用时候需要在俩处配置 </span></span><br><span class=\"line\"><span class=\"comment\">// 1. 规则中</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(less|css)$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;less-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">lessOptions</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">javascriptEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 2. 插件中</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/base.css&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[id].css&#x27;</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"webpack解析器\"><a href=\"#webpack解析器\" class=\"headerlink\" title=\"webpack解析器\"></a>webpack解析器</h1><h2 id=\"webpack-loader\"><a href=\"#webpack-loader\" class=\"headerlink\" title=\"webpack-loader\"></a>webpack-loader</h2><ul>\n<li><a href=\"https://www.webpackjs.com/loaders/url-loader/\">loader</a>官网会发现loader大概有7个模块,<strong>1、文件，2、JSON，3、转换编译，4、模板，5、样式，6、清理和测试，7、框架</strong></li>\n<li>webpack因为只识别<code>js</code>文件，所以需要这些loader来处理文件转成js,个个大神的开源代码和维护都在社区有明显标注</li>\n<li>常规选项配置</li>\n</ul>\n<ol>\n<li>test: 要检测的文件</li>\n<li>loader: 要使用的插件</li>\n<li>include: 解析包含的文件</li>\n<li>exclude: 解析要排除的文件</li>\n<li>options: 插件高级配置选项</li>\n<li>use: [] 多个插件配置时使用</li>\n</ol>\n<h3 id=\"vue-loader\"><a href=\"#vue-loader\" class=\"headerlink\" title=\"vue-loader\"></a>vue-loader</h3><ul>\n<li>细心的朋友会发现<a href=\"https://vue-loader.vuejs.org/zh/\">vue-loader</a>并不在上面<a href=\"https://www.webpackjs.com/loaders/url-loader/\">webpack-loader</a>里面, <code>why?</code>.</li>\n<li><strong>个人理解</strong>: <code>.vue</code>是复杂的文件，文档loader都是处理单个文件,比如<code>.json</code>文件里面全是json数据，而<code>.vue</code>里面有三种<strong>1.style,2.script,3.html</strong>。</li>\n<li>所以：为了把<code>vue</code>文件拆分成loader<code>（如：style-loader、html-loader、script-loader）</code>能够解析的文件,才有了<code>vue-loader</code>插件。<a href=\"https://vue-loader.vuejs.org/zh/\">单独的配置文档</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// 所有的vue项目，这个插件是必不可少的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">VueLoaderPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-loader&#x27;</span>)</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">VueLoaderPlugin</span>()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完全理解设计者的初衷，一个页面写所有的js、css、html真的很炫酷，不向其他开发者为了显示自己所谓的高端操作，<code>解耦后的代码</code>真的很难下咽,一个函数能搞定的事情非要给你弄三个文件，6个函数。。。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"url-loader\"><a href=\"#url-loader\" class=\"headerlink\" title=\"url-loader\"></a>url-loader</h3><ul>\n<li>看到webpack代码,不是很理解<code>limit,name的作用</code>，于是去webpack官网找了很久。。。。才发现他是loader的配置。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\"><span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">limit</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: path.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;../build&quot;</span>, <span class=\"variable constant_\">APP_ID</span>, <span class=\"string\">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></li>\n<li>limit:低于指定的限制时，可以返回一个 DataURL。</li>\n<li>name:这个参数让我很困惑,url-loader并没有对此字段做解释，查了(url-loader)[<a href=\"https://github.com/webpack-contrib/file-loader]%E4%B9%8B%E5%90%8E%E6%89%8D%E6%89%BE%E5%88%B0\">https://github.com/webpack-contrib/file-loader]之后才找到</a>.</li>\n</ul>\n<h3 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a>css-loader</h3><ul>\n<li>代码如下！ <a href=\"https://www.npmjs.com/package/css-loader\">文档</a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../css/base.css&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// base<span class=\"selector-class\">.less</span></span><br><span class=\"line\"><span class=\"selector-id\">#phone</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;../assets/actrulebtn.png&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>问题：在入口文件引入css时,css-loader将url自动处理了，并在<code>publickpath</code>中输出了图片,自信看文档有个url选项，是否修改url配置，当设置<code>url:false</code>时，不会做额外处理。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"规范代码\"><a href=\"#规范代码\" class=\"headerlink\" title=\"规范代码\"></a>规范代码</h2><p><a href=\"https://eslint.bootcss.com/docs/user-guide/configuring\">esLint官网</a></p>\n<ul>\n<li>新增<code>.eslintrc.js</code>文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;parser&quot;</span>: <span class=\"string\">&quot;babel-eslint&quot;</span>, <span class=\"comment\">// 使用解析器</span></span><br><span class=\"line\">    <span class=\"string\">&quot;extends&quot;</span>: <span class=\"string\">&quot;airbnb&quot;</span>,  <span class=\"comment\">// 继承airbnb</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前想启用的环境</span></span><br><span class=\"line\">    <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;browser&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;node&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 定义规则</span></span><br><span class=\"line\">    <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;indent&quot;</span>: [<span class=\"string\">&quot;error&quot;</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>npm 下载<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;babel-eslint&quot;</span>: <span class=\"string\">&quot;^10.0.1&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint&quot;</span>: <span class=\"string\">&quot;^5.16.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-config-airbnb&quot;</span>: <span class=\"string\">&quot;^17.1.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-config-airbnb-base&quot;</span>: <span class=\"string\">&quot;^13.1.0&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-loader&quot;</span>: <span class=\"string\">&quot;^2.1.2&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-plugin-import&quot;</span>: <span class=\"string\">&quot;^2.17.3&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-plugin-jsx-a11y&quot;</span>: <span class=\"string\">&quot;^6.2.1&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint-plugin-react&quot;</span>: <span class=\"string\">&quot;^7.13.0&quot;</span>,</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"webpack如何暴露库\"><a href=\"#webpack如何暴露库\" class=\"headerlink\" title=\"webpack如何暴露库\"></a>webpack如何暴露库</h2>"},{"title":"canvas","date":"2021-12-06T08:15:24.000Z","comments":0,"_content":"\n> 18年的时候用phase.js框架开发了一年的游戏，其实也是基于canvas的，但是api更接近dom的操作，最近有时间来搞一下canvas。\n\n## 保存状态`save`,`restore`\n[代码]()\n- 设想：当你给字体设置红色之后，想恢复默认颜色，你是否还需要在设置一次？答案是`否`,可以通过restore来恢复默认值\n```javascript\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nctx.save(); // 将当前状态放入栈中\n// 代码一\nctx.font = \"48px serif\";\nctx.fillStyle = 'red';\nctx.fillText(\"Hello world\", 50, 50);\n\nctx.restore() // 恢复到最近的保存状态的方法\nctx.font = \"48px serif\";\nctx.fillText(\"Hello world\", 50, 100);\n```\n> 不光可以恢复颜色，translate等位移量也可以恢复。\n\n- 也可以执行俩次`restore`，回归到`上上个状态`；\n```javascript\nctx.save(); // 将当前状态放入栈中\nctx.font = \"48px serif\";\nctx.fillStyle = 'red';\nctx.save(); // 将当前状态放入栈中\nctx.fillText(\"Hello world\", 50, 50);\nctx.restore()\nctx.restore()\nctx.font = \"48px serif\";\nctx.fillText(\"Hello world\", 50, 100);\n```\n\n\n## 旋转偏移量-基点\n[代码]()\n> 当我们做旋转动画的时候，肯定要知道是相对于哪一点旋转的，dom是默认自身中心点，而canvas是想对于`原始点`，可以通过translate改变原始点。（官网话术）\n- 虽然这么`说`其实在真正的编码中还会碰到很多其他问题，其实canvas编码顺序是很重要的，间接影响效果。\n- 代码一先translate在rotate,基点相对于translate的点。\n```javascript\nctx.fillStyle = 'red';\nctx.translate(20, 20);\nctx.rotate(20 * Math.PI / 180);\nctx.fillRect(0, 0, 50, 50);\n```\n> 如图他的基点 - 每次旋转左上角都不会发生位移\n![](/images/origin01.png)\n\n- 代码一先rotate在translate,基点相对于rotate之前的点。\n```javascript\nctx.restore(); // 恢复到最近的保存状态的方法\nctx.fillStyle = 'green';\nctx.rotate(20 * Math.PI / 180);\nctx.translate(20, 20);\nctx.fillRect(0, 0, 50, 50);\n```\n> 如图他的基点 - 每次旋转相对于左上角。\n![](/images/origin02.png)\n\n<!--more-->\n\n- 参照中心点旋转\n```javascript\nctx.restore(); // 恢复到最近的保存状态的方法\nctx.fillStyle = 'green';\nctx.rotate(60 * Math.PI / 180);\nctx.translate(-25, -25); // -25是宽度的一半\nctx.fillRect(0, 0, 50, 50);\n```\n\n## 将时间与旋转角度相关联\n- 如何实现： `每一秒钟旋转角度+6度！`初始角度为0.  \n```javascript\n// 1. 获取当前秒数 => new Date().getSeconds()\n// 2. 将当前秒数*6 => 6*Math.PI/180\nlet angle = (6*Math.PI/180)*new Date().getSeconds()\n```\n> 这样就可以根据当前时间转换角度。 在做canvas的rotate动画时经常使用。\n\n\n## canvas适配\n- 为什么要适配？看到过很多同学这么写达到适配效果。`切记`这样写虽然可以，但是当你操作canvas事件，用到`x`,`y`,坐标的时候会发现`坐标不准确的问题`。\n> [一个刮刮乐的demo]()可以为大家用来测试,有俩个`canvas`切换canvas发现设置了`style`的`canvas`坐标点失效\n```javascript\n<canvas id=\"canvas\" style=\"width: 100%;height: 100%;\"></canvas>\n<canvas id=\"canvas\"></canvas>\n```\n- canvas有自己的`width`, `height`属性是`px`单位，也无法设置成`vw`、`rem`等适配单位。\n> 大家第一想法是算屏幕宽高给canvas赋值，[demo代码！！！]()\n```javascript\nvar clientWidth,clientHeight;\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext(\"2d\");\nresizeCanvas();\nwindow.addEventListener('resize', function() {\n    resizeCanvas();\n})\nfunction resizeCanvas() {\n    // 获取屏幕宽高\n    // 谷歌浏览器 document.documentElement.clientWidth\n    // ie浏览器 document.body.clientHeight\n    clientWidth = document.body.clientWidth || document.documentElement.clientWidth;\n    clientHeight = document.body.clientHeight || document.documentElement.clientHeight;\n    canvas.width = clientWidth;\n    canvas.height = clientHeight;\n    console.log(clientWidth,clientHeight)\n}\nctx.fillStyle = 'green';\nctx.fillRect(20, 10, clientWidth/10, clientHeight/10);\n```\n- 可以从git上下载demo,  刚开始绿色矩形正常渲染，当你改变屏幕宽度执行了`resizeCanvas`方法的时候，发现`矩形消失了`。我们只是改变了宽高。\n> 既然`消失`,那我们是不是可以每次随着重置canvas宽高来`重新绘矩形`, [demo代码！！]()\n```javascript\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext(\"2d\");\nresizeCanvas();\nwindow.addEventListener('resize', function() {\n    resizeCanvas();\n})\nfunction resizeCanvas() {\n    // 获取屏幕宽高\n    // 谷歌浏览器 document.documentElement.clientWidth\n    // ie浏览器 document.body.clientHeight\n    var clientWidth = document.body.clientWidth || document.documentElement.clientWidth;\n    var clientHeight = document.body.clientHeight || document.documentElement.clientHeight;\n    canvas.width = clientWidth;\n    canvas.height = clientHeight;\n    console.log(clientWidth,clientHeight)\n    renderCanvas(clientWidth,clientHeight)\n}\n// 从新绘制\nfunction renderCanvas(clientWidth,clientHeight) {\n    ctx.fillStyle = 'green';\n    ctx.fillRect(20, 10, clientWidth/10, clientHeight/10);\n}\n```\n\n- canvas铺满整个屏幕会出现失真，所以我们可以设置一个比例如`4：3`展示,剩下的就`留白`或者`留黑`。\n> 1. 找到宽高最小的`值`如`iponex => (宽:375, 高：812)`, 找到宽`375/x = 4/3`便可以推出高度x值。\n> eg: 如果手机屏幕横过来宽高调换`iponex => (宽:812, 高：375)`，找到宽`x/375 = 4/3`便可以推出宽度x值。\n> [gitHub代码demo]()\n```css\nhtml,\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n* {\n    margin: 0;\n    padding: 0;\n}\n.canvas-wrapper {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%,-50%);\n}\n```\n```html\n<div class=\"canvas-wrapper\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n```\n```javascript\n// js\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext(\"2d\");\nresizeCanvas();\nwindow.addEventListener('resize', function () {\n    resizeCanvas();\n})\nfunction resizeCanvas() {\n// 获取屏幕宽高\n// 谷歌浏览器 document.documentElement.clientWidth\n// ie浏览器 document.body.clientHeight\nvar clientWidth = document.body.clientWidth || document.documentElement.clientWidth;\nvar clientHeight = document.body.clientHeight || document.documentElement.clientHeight;\nconsole.log(clientWidth, clientHeight)\n// 设计图纸800/600。\nvar whRate = 800/600;\nvar cwidth,cheight;pr\nif(clientWidth - clientHeight > 0) {\n    // 宽大于高， 以高度为基准\n    cheight = clientHeight\n    cwidth = cheight*whRate\n} else {\n    cwidth = clientWidth\n    cheight = cwidth/whRate\n}\ncanvas.width = cwidth;\ncanvas.height = cwidth;\nctx.fillStyle = 'black';\nctx.fillRect(0, 0, cwidth, cwidth);\n}\n```\n\n- 容器适配解决了，但是内容该如何适配呢？我们可以参照其他适配方案定义`方法`,将传递的`x,y,width,height`按照比列转换-达到适配效果！\n> [demo代码]()\n```javascript\n// 将涉及x,y等坐标的加上calcX等方法。\nctx.fillRect(calcX(50), calcY(50), calcX(50), calcY(50));\nfunction calcX(X) {\n    return X/designWidth*cwidth\n}\nfunction calcY(Y) {\n    return Y/designHeight*cheight\n}\n```","source":"_posts/canvas.md","raw":"---\ntitle: canvas\ndate: 2021-12-06 16:15:24\ncategories: canvas\ntags: [canvas]\ncomments: false\n---\n\n> 18年的时候用phase.js框架开发了一年的游戏，其实也是基于canvas的，但是api更接近dom的操作，最近有时间来搞一下canvas。\n\n## 保存状态`save`,`restore`\n[代码]()\n- 设想：当你给字体设置红色之后，想恢复默认颜色，你是否还需要在设置一次？答案是`否`,可以通过restore来恢复默认值\n```javascript\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nctx.save(); // 将当前状态放入栈中\n// 代码一\nctx.font = \"48px serif\";\nctx.fillStyle = 'red';\nctx.fillText(\"Hello world\", 50, 50);\n\nctx.restore() // 恢复到最近的保存状态的方法\nctx.font = \"48px serif\";\nctx.fillText(\"Hello world\", 50, 100);\n```\n> 不光可以恢复颜色，translate等位移量也可以恢复。\n\n- 也可以执行俩次`restore`，回归到`上上个状态`；\n```javascript\nctx.save(); // 将当前状态放入栈中\nctx.font = \"48px serif\";\nctx.fillStyle = 'red';\nctx.save(); // 将当前状态放入栈中\nctx.fillText(\"Hello world\", 50, 50);\nctx.restore()\nctx.restore()\nctx.font = \"48px serif\";\nctx.fillText(\"Hello world\", 50, 100);\n```\n\n\n## 旋转偏移量-基点\n[代码]()\n> 当我们做旋转动画的时候，肯定要知道是相对于哪一点旋转的，dom是默认自身中心点，而canvas是想对于`原始点`，可以通过translate改变原始点。（官网话术）\n- 虽然这么`说`其实在真正的编码中还会碰到很多其他问题，其实canvas编码顺序是很重要的，间接影响效果。\n- 代码一先translate在rotate,基点相对于translate的点。\n```javascript\nctx.fillStyle = 'red';\nctx.translate(20, 20);\nctx.rotate(20 * Math.PI / 180);\nctx.fillRect(0, 0, 50, 50);\n```\n> 如图他的基点 - 每次旋转左上角都不会发生位移\n![](/images/origin01.png)\n\n- 代码一先rotate在translate,基点相对于rotate之前的点。\n```javascript\nctx.restore(); // 恢复到最近的保存状态的方法\nctx.fillStyle = 'green';\nctx.rotate(20 * Math.PI / 180);\nctx.translate(20, 20);\nctx.fillRect(0, 0, 50, 50);\n```\n> 如图他的基点 - 每次旋转相对于左上角。\n![](/images/origin02.png)\n\n<!--more-->\n\n- 参照中心点旋转\n```javascript\nctx.restore(); // 恢复到最近的保存状态的方法\nctx.fillStyle = 'green';\nctx.rotate(60 * Math.PI / 180);\nctx.translate(-25, -25); // -25是宽度的一半\nctx.fillRect(0, 0, 50, 50);\n```\n\n## 将时间与旋转角度相关联\n- 如何实现： `每一秒钟旋转角度+6度！`初始角度为0.  \n```javascript\n// 1. 获取当前秒数 => new Date().getSeconds()\n// 2. 将当前秒数*6 => 6*Math.PI/180\nlet angle = (6*Math.PI/180)*new Date().getSeconds()\n```\n> 这样就可以根据当前时间转换角度。 在做canvas的rotate动画时经常使用。\n\n\n## canvas适配\n- 为什么要适配？看到过很多同学这么写达到适配效果。`切记`这样写虽然可以，但是当你操作canvas事件，用到`x`,`y`,坐标的时候会发现`坐标不准确的问题`。\n> [一个刮刮乐的demo]()可以为大家用来测试,有俩个`canvas`切换canvas发现设置了`style`的`canvas`坐标点失效\n```javascript\n<canvas id=\"canvas\" style=\"width: 100%;height: 100%;\"></canvas>\n<canvas id=\"canvas\"></canvas>\n```\n- canvas有自己的`width`, `height`属性是`px`单位，也无法设置成`vw`、`rem`等适配单位。\n> 大家第一想法是算屏幕宽高给canvas赋值，[demo代码！！！]()\n```javascript\nvar clientWidth,clientHeight;\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext(\"2d\");\nresizeCanvas();\nwindow.addEventListener('resize', function() {\n    resizeCanvas();\n})\nfunction resizeCanvas() {\n    // 获取屏幕宽高\n    // 谷歌浏览器 document.documentElement.clientWidth\n    // ie浏览器 document.body.clientHeight\n    clientWidth = document.body.clientWidth || document.documentElement.clientWidth;\n    clientHeight = document.body.clientHeight || document.documentElement.clientHeight;\n    canvas.width = clientWidth;\n    canvas.height = clientHeight;\n    console.log(clientWidth,clientHeight)\n}\nctx.fillStyle = 'green';\nctx.fillRect(20, 10, clientWidth/10, clientHeight/10);\n```\n- 可以从git上下载demo,  刚开始绿色矩形正常渲染，当你改变屏幕宽度执行了`resizeCanvas`方法的时候，发现`矩形消失了`。我们只是改变了宽高。\n> 既然`消失`,那我们是不是可以每次随着重置canvas宽高来`重新绘矩形`, [demo代码！！]()\n```javascript\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext(\"2d\");\nresizeCanvas();\nwindow.addEventListener('resize', function() {\n    resizeCanvas();\n})\nfunction resizeCanvas() {\n    // 获取屏幕宽高\n    // 谷歌浏览器 document.documentElement.clientWidth\n    // ie浏览器 document.body.clientHeight\n    var clientWidth = document.body.clientWidth || document.documentElement.clientWidth;\n    var clientHeight = document.body.clientHeight || document.documentElement.clientHeight;\n    canvas.width = clientWidth;\n    canvas.height = clientHeight;\n    console.log(clientWidth,clientHeight)\n    renderCanvas(clientWidth,clientHeight)\n}\n// 从新绘制\nfunction renderCanvas(clientWidth,clientHeight) {\n    ctx.fillStyle = 'green';\n    ctx.fillRect(20, 10, clientWidth/10, clientHeight/10);\n}\n```\n\n- canvas铺满整个屏幕会出现失真，所以我们可以设置一个比例如`4：3`展示,剩下的就`留白`或者`留黑`。\n> 1. 找到宽高最小的`值`如`iponex => (宽:375, 高：812)`, 找到宽`375/x = 4/3`便可以推出高度x值。\n> eg: 如果手机屏幕横过来宽高调换`iponex => (宽:812, 高：375)`，找到宽`x/375 = 4/3`便可以推出宽度x值。\n> [gitHub代码demo]()\n```css\nhtml,\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n* {\n    margin: 0;\n    padding: 0;\n}\n.canvas-wrapper {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%,-50%);\n}\n```\n```html\n<div class=\"canvas-wrapper\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n```\n```javascript\n// js\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext(\"2d\");\nresizeCanvas();\nwindow.addEventListener('resize', function () {\n    resizeCanvas();\n})\nfunction resizeCanvas() {\n// 获取屏幕宽高\n// 谷歌浏览器 document.documentElement.clientWidth\n// ie浏览器 document.body.clientHeight\nvar clientWidth = document.body.clientWidth || document.documentElement.clientWidth;\nvar clientHeight = document.body.clientHeight || document.documentElement.clientHeight;\nconsole.log(clientWidth, clientHeight)\n// 设计图纸800/600。\nvar whRate = 800/600;\nvar cwidth,cheight;pr\nif(clientWidth - clientHeight > 0) {\n    // 宽大于高， 以高度为基准\n    cheight = clientHeight\n    cwidth = cheight*whRate\n} else {\n    cwidth = clientWidth\n    cheight = cwidth/whRate\n}\ncanvas.width = cwidth;\ncanvas.height = cwidth;\nctx.fillStyle = 'black';\nctx.fillRect(0, 0, cwidth, cwidth);\n}\n```\n\n- 容器适配解决了，但是内容该如何适配呢？我们可以参照其他适配方案定义`方法`,将传递的`x,y,width,height`按照比列转换-达到适配效果！\n> [demo代码]()\n```javascript\n// 将涉及x,y等坐标的加上calcX等方法。\nctx.fillRect(calcX(50), calcY(50), calcX(50), calcY(50));\nfunction calcX(X) {\n    return X/designWidth*cwidth\n}\nfunction calcY(Y) {\n    return Y/designHeight*cheight\n}\n```","slug":"canvas","published":1,"updated":"2022-03-20T02:40:14.337Z","_id":"cl0iw2rdm000zitozhzkz3fjr","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>18年的时候用phase.js框架开发了一年的游戏，其实也是基于canvas的，但是api更接近dom的操作，最近有时间来搞一下canvas。</p>\n</blockquote>\n<h2 id=\"保存状态save-restore\"><a href=\"#保存状态save-restore\" class=\"headerlink\" title=\"保存状态save,restore\"></a>保存状态<code>save</code>,<code>restore</code></h2><p><a href=\"\">代码</a></p>\n<ul>\n<li><p>设想：当你给字体设置红色之后，想恢复默认颜色，你是否还需要在设置一次？答案是<code>否</code>,可以通过restore来恢复默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">save</span>(); <span class=\"comment\">// 将当前状态放入栈中</span></span><br><span class=\"line\"><span class=\"comment\">// 代码一</span></span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.<span class=\"title function_\">restore</span>() <span class=\"comment\">// 恢复到最近的保存状态的方法</span></span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不光可以恢复颜色，translate等位移量也可以恢复。</p>\n</blockquote>\n</li>\n<li><p>也可以执行俩次<code>restore</code>，回归到<code>上上个状态</code>；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">save</span>(); <span class=\"comment\">// 将当前状态放入栈中</span></span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">save</span>(); <span class=\"comment\">// 将当前状态放入栈中</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">restore</span>()</span><br><span class=\"line\">ctx.<span class=\"title function_\">restore</span>()</span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"旋转偏移量-基点\"><a href=\"#旋转偏移量-基点\" class=\"headerlink\" title=\"旋转偏移量-基点\"></a>旋转偏移量-基点</h2><p><a href=\"\">代码</a></p>\n<blockquote>\n<p>当我们做旋转动画的时候，肯定要知道是相对于哪一点旋转的，dom是默认自身中心点，而canvas是想对于<code>原始点</code>，可以通过translate改变原始点。（官网话术）</p>\n</blockquote>\n<ul>\n<li><p>虽然这么<code>说</code>其实在真正的编码中还会碰到很多其他问题，其实canvas编码顺序是很重要的，间接影响效果。</p>\n</li>\n<li><p>代码一先translate在rotate,基点相对于translate的点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">translate</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">rotate</span>(<span class=\"number\">20</span> * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如图他的基点 - 每次旋转左上角都不会发生位移<br><img src=\"/images/origin01.png\"></p>\n</blockquote>\n</li>\n<li><p>代码一先rotate在translate,基点相对于rotate之前的点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">restore</span>(); <span class=\"comment\">// 恢复到最近的保存状态的方法</span></span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">rotate</span>(<span class=\"number\">20</span> * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">translate</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如图他的基点 - 每次旋转相对于左上角。<br><img src=\"/images/origin02.png\"></p>\n</blockquote>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li>参照中心点旋转<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">restore</span>(); <span class=\"comment\">// 恢复到最近的保存状态的方法</span></span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">rotate</span>(<span class=\"number\">60</span> * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">translate</span>(-<span class=\"number\">25</span>, -<span class=\"number\">25</span>); <span class=\"comment\">// -25是宽度的一半</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"将时间与旋转角度相关联\"><a href=\"#将时间与旋转角度相关联\" class=\"headerlink\" title=\"将时间与旋转角度相关联\"></a>将时间与旋转角度相关联</h2><ul>\n<li>如何实现： <code>每一秒钟旋转角度+6度！</code>初始角度为0.  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取当前秒数 =&gt; new Date().getSeconds()</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 将当前秒数*6 =&gt; 6*Math.PI/180</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> angle = (<span class=\"number\">6</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>/<span class=\"number\">180</span>)*<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getSeconds</span>()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样就可以根据当前时间转换角度。 在做canvas的rotate动画时经常使用。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"canvas适配\"><a href=\"#canvas适配\" class=\"headerlink\" title=\"canvas适配\"></a>canvas适配</h2><ul>\n<li><p>为什么要适配？看到过很多同学这么写达到适配效果。<code>切记</code>这样写虽然可以，但是当你操作canvas事件，用到<code>x</code>,<code>y</code>,坐标的时候会发现<code>坐标不准确的问题</code>。</p>\n<blockquote>\n<p><a href=\"\">一个刮刮乐的demo</a>可以为大家用来测试,有俩个<code>canvas</code>切换canvas发现设置了<code>style</code>的<code>canvas</code>坐标点失效</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=<span class=\"string\">&quot;canvas&quot;</span> style=<span class=\"string\">&quot;width: 100%;height: 100%;&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n<li><p>canvas有自己的<code>width</code>, <code>height</code>属性是<code>px</code>单位，也无法设置成<code>vw</code>、<code>rem</code>等适配单位。</p>\n<blockquote>\n<p>大家第一想法是算屏幕宽高给canvas赋值，<a href=\"\">demo代码！！！</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> clientWidth,clientHeight;</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resizeCanvas</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取屏幕宽高</span></span><br><span class=\"line\">    <span class=\"comment\">// 谷歌浏览器 document.documentElement.clientWidth</span></span><br><span class=\"line\">    <span class=\"comment\">// ie浏览器 document.body.clientHeight</span></span><br><span class=\"line\">    clientWidth = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    clientHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\">    canvas.<span class=\"property\">width</span> = clientWidth;</span><br><span class=\"line\">    canvas.<span class=\"property\">height</span> = clientHeight;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(clientWidth,clientHeight)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">20</span>, <span class=\"number\">10</span>, clientWidth/<span class=\"number\">10</span>, clientHeight/<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>可以从git上下载demo,  刚开始绿色矩形正常渲染，当你改变屏幕宽度执行了<code>resizeCanvas</code>方法的时候，发现<code>矩形消失了</code>。我们只是改变了宽高。</p>\n<blockquote>\n<p>既然<code>消失</code>,那我们是不是可以每次随着重置canvas宽高来<code>重新绘矩形</code>, <a href=\"\">demo代码！！</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resizeCanvas</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取屏幕宽高</span></span><br><span class=\"line\">    <span class=\"comment\">// 谷歌浏览器 document.documentElement.clientWidth</span></span><br><span class=\"line\">    <span class=\"comment\">// ie浏览器 document.body.clientHeight</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> clientWidth = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clientHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\">    canvas.<span class=\"property\">width</span> = clientWidth;</span><br><span class=\"line\">    canvas.<span class=\"property\">height</span> = clientHeight;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(clientWidth,clientHeight)</span><br><span class=\"line\">    <span class=\"title function_\">renderCanvas</span>(clientWidth,clientHeight)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 从新绘制</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderCanvas</span>(<span class=\"params\">clientWidth,clientHeight</span>) &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">    ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">20</span>, <span class=\"number\">10</span>, clientWidth/<span class=\"number\">10</span>, clientHeight/<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>canvas铺满整个屏幕会出现失真，所以我们可以设置一个比例如<code>4：3</code>展示,剩下的就<code>留白</code>或者<code>留黑</code>。</p>\n<blockquote>\n<ol>\n<li>找到宽高最小的<code>值</code>如<code>iponex =&gt; (宽:375, 高：812)</code>, 找到宽<code>375/x = 4/3</code>便可以推出高度x值。<br>eg: 如果手机屏幕横过来宽高调换<code>iponex =&gt; (宽:812, 高：375)</code>，找到宽<code>x/375 = 4/3</code>便可以推出宽度x值。<br><a href=\"\">gitHub代码demo</a></li>\n</ol>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.canvas-wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;canvas-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resizeCanvas</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 获取屏幕宽高</span></span><br><span class=\"line\"><span class=\"comment\">// 谷歌浏览器 document.documentElement.clientWidth</span></span><br><span class=\"line\"><span class=\"comment\">// ie浏览器 document.body.clientHeight</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> clientWidth = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clientHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(clientWidth, clientHeight)</span><br><span class=\"line\"><span class=\"comment\">// 设计图纸800/600。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> whRate = <span class=\"number\">800</span>/<span class=\"number\">600</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cwidth,cheight;pr</span><br><span class=\"line\"><span class=\"keyword\">if</span>(clientWidth - clientHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 宽大于高， 以高度为基准</span></span><br><span class=\"line\">    cheight = clientHeight</span><br><span class=\"line\">    cwidth = cheight*whRate</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    cwidth = clientWidth</span><br><span class=\"line\">    cheight = cwidth/whRate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">canvas.<span class=\"property\">width</span> = cwidth;</span><br><span class=\"line\">canvas.<span class=\"property\">height</span> = cwidth;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;black&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, cwidth, cwidth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>容器适配解决了，但是内容该如何适配呢？我们可以参照其他适配方案定义<code>方法</code>,将传递的<code>x,y,width,height</code>按照比列转换-达到适配效果！</p>\n<blockquote>\n<p><a href=\"\">demo代码</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将涉及x,y等坐标的加上calcX等方法。</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"title function_\">calcX</span>(<span class=\"number\">50</span>), <span class=\"title function_\">calcY</span>(<span class=\"number\">50</span>), <span class=\"title function_\">calcX</span>(<span class=\"number\">50</span>), <span class=\"title function_\">calcY</span>(<span class=\"number\">50</span>));</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calcX</span>(<span class=\"params\">X</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> X/designWidth*cwidth</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calcY</span>(<span class=\"params\">Y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y/designHeight*cheight</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>18年的时候用phase.js框架开发了一年的游戏，其实也是基于canvas的，但是api更接近dom的操作，最近有时间来搞一下canvas。</p>\n</blockquote>\n<h2 id=\"保存状态save-restore\"><a href=\"#保存状态save-restore\" class=\"headerlink\" title=\"保存状态save,restore\"></a>保存状态<code>save</code>,<code>restore</code></h2><p><a href=\"\">代码</a></p>\n<ul>\n<li><p>设想：当你给字体设置红色之后，想恢复默认颜色，你是否还需要在设置一次？答案是<code>否</code>,可以通过restore来恢复默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">save</span>(); <span class=\"comment\">// 将当前状态放入栈中</span></span><br><span class=\"line\"><span class=\"comment\">// 代码一</span></span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ctx.<span class=\"title function_\">restore</span>() <span class=\"comment\">// 恢复到最近的保存状态的方法</span></span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不光可以恢复颜色，translate等位移量也可以恢复。</p>\n</blockquote>\n</li>\n<li><p>也可以执行俩次<code>restore</code>，回归到<code>上上个状态</code>；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">save</span>(); <span class=\"comment\">// 将当前状态放入栈中</span></span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">save</span>(); <span class=\"comment\">// 将当前状态放入栈中</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">restore</span>()</span><br><span class=\"line\">ctx.<span class=\"title function_\">restore</span>()</span><br><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px serif&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"旋转偏移量-基点\"><a href=\"#旋转偏移量-基点\" class=\"headerlink\" title=\"旋转偏移量-基点\"></a>旋转偏移量-基点</h2><p><a href=\"\">代码</a></p>\n<blockquote>\n<p>当我们做旋转动画的时候，肯定要知道是相对于哪一点旋转的，dom是默认自身中心点，而canvas是想对于<code>原始点</code>，可以通过translate改变原始点。（官网话术）</p>\n</blockquote>\n<ul>\n<li><p>虽然这么<code>说</code>其实在真正的编码中还会碰到很多其他问题，其实canvas编码顺序是很重要的，间接影响效果。</p>\n</li>\n<li><p>代码一先translate在rotate,基点相对于translate的点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">translate</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">rotate</span>(<span class=\"number\">20</span> * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如图他的基点 - 每次旋转左上角都不会发生位移<br><img src=\"/images/origin01.png\"></p>\n</blockquote>\n</li>\n<li><p>代码一先rotate在translate,基点相对于rotate之前的点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">restore</span>(); <span class=\"comment\">// 恢复到最近的保存状态的方法</span></span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">rotate</span>(<span class=\"number\">20</span> * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">translate</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如图他的基点 - 每次旋转相对于左上角。<br><img src=\"/images/origin02.png\"></p>\n</blockquote>\n</li>\n</ul>","more":"<ul>\n<li>参照中心点旋转<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"title function_\">restore</span>(); <span class=\"comment\">// 恢复到最近的保存状态的方法</span></span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">rotate</span>(<span class=\"number\">60</span> * <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> / <span class=\"number\">180</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">translate</span>(-<span class=\"number\">25</span>, -<span class=\"number\">25</span>); <span class=\"comment\">// -25是宽度的一半</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"将时间与旋转角度相关联\"><a href=\"#将时间与旋转角度相关联\" class=\"headerlink\" title=\"将时间与旋转角度相关联\"></a>将时间与旋转角度相关联</h2><ul>\n<li>如何实现： <code>每一秒钟旋转角度+6度！</code>初始角度为0.  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取当前秒数 =&gt; new Date().getSeconds()</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 将当前秒数*6 =&gt; 6*Math.PI/180</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> angle = (<span class=\"number\">6</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>/<span class=\"number\">180</span>)*<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getSeconds</span>()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样就可以根据当前时间转换角度。 在做canvas的rotate动画时经常使用。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"canvas适配\"><a href=\"#canvas适配\" class=\"headerlink\" title=\"canvas适配\"></a>canvas适配</h2><ul>\n<li><p>为什么要适配？看到过很多同学这么写达到适配效果。<code>切记</code>这样写虽然可以，但是当你操作canvas事件，用到<code>x</code>,<code>y</code>,坐标的时候会发现<code>坐标不准确的问题</code>。</p>\n<blockquote>\n<p><a href=\"\">一个刮刮乐的demo</a>可以为大家用来测试,有俩个<code>canvas</code>切换canvas发现设置了<code>style</code>的<code>canvas</code>坐标点失效</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=<span class=\"string\">&quot;canvas&quot;</span> style=<span class=\"string\">&quot;width: 100%;height: 100%;&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n<li><p>canvas有自己的<code>width</code>, <code>height</code>属性是<code>px</code>单位，也无法设置成<code>vw</code>、<code>rem</code>等适配单位。</p>\n<blockquote>\n<p>大家第一想法是算屏幕宽高给canvas赋值，<a href=\"\">demo代码！！！</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> clientWidth,clientHeight;</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resizeCanvas</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取屏幕宽高</span></span><br><span class=\"line\">    <span class=\"comment\">// 谷歌浏览器 document.documentElement.clientWidth</span></span><br><span class=\"line\">    <span class=\"comment\">// ie浏览器 document.body.clientHeight</span></span><br><span class=\"line\">    clientWidth = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    clientHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\">    canvas.<span class=\"property\">width</span> = clientWidth;</span><br><span class=\"line\">    canvas.<span class=\"property\">height</span> = clientHeight;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(clientWidth,clientHeight)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">20</span>, <span class=\"number\">10</span>, clientWidth/<span class=\"number\">10</span>, clientHeight/<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>可以从git上下载demo,  刚开始绿色矩形正常渲染，当你改变屏幕宽度执行了<code>resizeCanvas</code>方法的时候，发现<code>矩形消失了</code>。我们只是改变了宽高。</p>\n<blockquote>\n<p>既然<code>消失</code>,那我们是不是可以每次随着重置canvas宽高来<code>重新绘矩形</code>, <a href=\"\">demo代码！！</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resizeCanvas</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取屏幕宽高</span></span><br><span class=\"line\">    <span class=\"comment\">// 谷歌浏览器 document.documentElement.clientWidth</span></span><br><span class=\"line\">    <span class=\"comment\">// ie浏览器 document.body.clientHeight</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> clientWidth = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clientHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\">    canvas.<span class=\"property\">width</span> = clientWidth;</span><br><span class=\"line\">    canvas.<span class=\"property\">height</span> = clientHeight;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(clientWidth,clientHeight)</span><br><span class=\"line\">    <span class=\"title function_\">renderCanvas</span>(clientWidth,clientHeight)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 从新绘制</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderCanvas</span>(<span class=\"params\">clientWidth,clientHeight</span>) &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">    ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">20</span>, <span class=\"number\">10</span>, clientWidth/<span class=\"number\">10</span>, clientHeight/<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>canvas铺满整个屏幕会出现失真，所以我们可以设置一个比例如<code>4：3</code>展示,剩下的就<code>留白</code>或者<code>留黑</code>。</p>\n<blockquote>\n<ol>\n<li>找到宽高最小的<code>值</code>如<code>iponex =&gt; (宽:375, 高：812)</code>, 找到宽<code>375/x = 4/3</code>便可以推出高度x值。<br>eg: 如果手机屏幕横过来宽高调换<code>iponex =&gt; (宽:812, 高：375)</code>，找到宽<code>x/375 = 4/3</code>便可以推出宽度x值。<br><a href=\"\">gitHub代码demo</a></li>\n</ol>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.canvas-wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;canvas-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resizeCanvas</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resizeCanvas</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 获取屏幕宽高</span></span><br><span class=\"line\"><span class=\"comment\">// 谷歌浏览器 document.documentElement.clientWidth</span></span><br><span class=\"line\"><span class=\"comment\">// ie浏览器 document.body.clientHeight</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> clientWidth = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clientHeight = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(clientWidth, clientHeight)</span><br><span class=\"line\"><span class=\"comment\">// 设计图纸800/600。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> whRate = <span class=\"number\">800</span>/<span class=\"number\">600</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cwidth,cheight;pr</span><br><span class=\"line\"><span class=\"keyword\">if</span>(clientWidth - clientHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 宽大于高， 以高度为基准</span></span><br><span class=\"line\">    cheight = clientHeight</span><br><span class=\"line\">    cwidth = cheight*whRate</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    cwidth = clientWidth</span><br><span class=\"line\">    cheight = cwidth/whRate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">canvas.<span class=\"property\">width</span> = cwidth;</span><br><span class=\"line\">canvas.<span class=\"property\">height</span> = cwidth;</span><br><span class=\"line\">ctx.<span class=\"property\">fillStyle</span> = <span class=\"string\">&#x27;black&#x27;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, cwidth, cwidth);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>容器适配解决了，但是内容该如何适配呢？我们可以参照其他适配方案定义<code>方法</code>,将传递的<code>x,y,width,height</code>按照比列转换-达到适配效果！</p>\n<blockquote>\n<p><a href=\"\">demo代码</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将涉及x,y等坐标的加上calcX等方法。</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">fillRect</span>(<span class=\"title function_\">calcX</span>(<span class=\"number\">50</span>), <span class=\"title function_\">calcY</span>(<span class=\"number\">50</span>), <span class=\"title function_\">calcX</span>(<span class=\"number\">50</span>), <span class=\"title function_\">calcY</span>(<span class=\"number\">50</span>));</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calcX</span>(<span class=\"params\">X</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> X/designWidth*cwidth</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calcY</span>(<span class=\"params\">Y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y/designHeight*cheight</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"解析URL","date":"2022-04-11T08:15:24.000Z","comments":0,"_content":"\n## URLSearchParams API\n- [URLSearchParams](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams)接口定义了一些实用的方法来处理URL\n- 但是```不会解析完整 URL```，需要传入类似location.search 但是如果字符串起始位置有 ? 的话会被去除。\n\n```js\nvar paramsString1 = \"http://example.com/search?query=%40\";\nvar searchParams1 = new URLSearchParams(paramsString1);\n\nsearchParams1.has(\"query\"); // false\nsearchParams1.has(\"http://example.com/search?query\"); // true\n\nsearchParams1.get(\"query\"); // null\nsearchParams1.get(\"http://example.com/search?query\"); // \"@\" (equivalent to decodeURIComponent('%40'))\n\nvar paramsString2 = \"?query=value\";\nvar searchParams2 = new URLSearchParams(paramsString2);\nsearchParams2.has(\"query\"); // true\n\nvar url = new URL(\"http://example.com/search?query=%40\");\nvar searchParams3 = new URLSearchParams(url.search);\nsearchParams3.has(\"query\") // true\n```\n\n----\n\n## 方法一：将URL参数解析成对象\n\n```js\n/**\n * @desc 将URL参数解析成对象\n * @param {string} url 1. url=https://www.baodu.com?nihao=111 2. ?nihao=111\n * @returns {object}\n */\nfunction parseURLToObj(url = '') {\n    if (!url) throw new Error('url参数错误');\n    let search = url.indexOf('?') ? url.split('?')[1] : url;\n    let params = {};\n    for (const [key, value] of new URLSearchParams(search)) {\n        params[key] = value;\n    }\n    return params;\n}\n```\n\n## 方法二：将对象解析成URL字符串\n\n```javascript\n/**\n * @desc 将对象解析成URL字符串\n * @param {object} params \n * @returns {string}\n */\nfunction parseObjToString(params = {}) {\n    let search = new URLSearchParams('');\n    Object.keys(params).forEach(key => {\n        search.append(key, params[key]);\n    })\n    return search.toString();\n}\n\n```\n\n<!--more-->\n\n## 方法三：向URL中添加某个参数\n\n```js\n/**\n * @desc 向URL中添加某个参数\n * @param {string} url \n * @param {object} params \n * @returns {string}\n */\nfunction URLAddParams(url, params) {\n    let search = parseObjToString(params)\n    return url.indexOf('?') == -1 ? `${url}?${search}` : `${url}&${search}`\n}\n```\n\n## 方法四：判断URL中是否有某个参数\n\n```js\n/**\n * @desc 判断URL中是否有某个参数\n * @param {string} url \n * @param {string} key \n * @returns {boolean}\n */\nstatic URLHasKey(url,key) {\n    if (!url) throw new Error('url参数错误');\n    let search = url.indexOf('?') ? url.split('?')[1] : url;\n    return new URLSearchParams(search).has(key);\n}\n\n```\n\n## 方法五：判断URL中是否有value值\n\n```js\n/**\n * @desc 判断URL中是否有value值\n * @param {string} url \n * @param {string} value \n * @returns {boolean}\n */\nstatic URLHasValue(url,value) {\n    if (!url) throw new Error('url参数错误');\n    let search = url.indexOf('?') ? url.split('?')[1] : url;\n    var params = new URLSearchParams(search);\n    for(var paramsValue of params.values()) {\n        if (paramsValue === value) {\n            return true;\n        }\n    }\n    return false;\n}\n\n```","source":"_posts/handle_url.md","raw":"---\ntitle: 解析URL\ndate: 2022-04-11 16:15:24\ncategories: javascript\ntags: [javascript]\ncomments: false\n---\n\n## URLSearchParams API\n- [URLSearchParams](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams)接口定义了一些实用的方法来处理URL\n- 但是```不会解析完整 URL```，需要传入类似location.search 但是如果字符串起始位置有 ? 的话会被去除。\n\n```js\nvar paramsString1 = \"http://example.com/search?query=%40\";\nvar searchParams1 = new URLSearchParams(paramsString1);\n\nsearchParams1.has(\"query\"); // false\nsearchParams1.has(\"http://example.com/search?query\"); // true\n\nsearchParams1.get(\"query\"); // null\nsearchParams1.get(\"http://example.com/search?query\"); // \"@\" (equivalent to decodeURIComponent('%40'))\n\nvar paramsString2 = \"?query=value\";\nvar searchParams2 = new URLSearchParams(paramsString2);\nsearchParams2.has(\"query\"); // true\n\nvar url = new URL(\"http://example.com/search?query=%40\");\nvar searchParams3 = new URLSearchParams(url.search);\nsearchParams3.has(\"query\") // true\n```\n\n----\n\n## 方法一：将URL参数解析成对象\n\n```js\n/**\n * @desc 将URL参数解析成对象\n * @param {string} url 1. url=https://www.baodu.com?nihao=111 2. ?nihao=111\n * @returns {object}\n */\nfunction parseURLToObj(url = '') {\n    if (!url) throw new Error('url参数错误');\n    let search = url.indexOf('?') ? url.split('?')[1] : url;\n    let params = {};\n    for (const [key, value] of new URLSearchParams(search)) {\n        params[key] = value;\n    }\n    return params;\n}\n```\n\n## 方法二：将对象解析成URL字符串\n\n```javascript\n/**\n * @desc 将对象解析成URL字符串\n * @param {object} params \n * @returns {string}\n */\nfunction parseObjToString(params = {}) {\n    let search = new URLSearchParams('');\n    Object.keys(params).forEach(key => {\n        search.append(key, params[key]);\n    })\n    return search.toString();\n}\n\n```\n\n<!--more-->\n\n## 方法三：向URL中添加某个参数\n\n```js\n/**\n * @desc 向URL中添加某个参数\n * @param {string} url \n * @param {object} params \n * @returns {string}\n */\nfunction URLAddParams(url, params) {\n    let search = parseObjToString(params)\n    return url.indexOf('?') == -1 ? `${url}?${search}` : `${url}&${search}`\n}\n```\n\n## 方法四：判断URL中是否有某个参数\n\n```js\n/**\n * @desc 判断URL中是否有某个参数\n * @param {string} url \n * @param {string} key \n * @returns {boolean}\n */\nstatic URLHasKey(url,key) {\n    if (!url) throw new Error('url参数错误');\n    let search = url.indexOf('?') ? url.split('?')[1] : url;\n    return new URLSearchParams(search).has(key);\n}\n\n```\n\n## 方法五：判断URL中是否有value值\n\n```js\n/**\n * @desc 判断URL中是否有value值\n * @param {string} url \n * @param {string} value \n * @returns {boolean}\n */\nstatic URLHasValue(url,value) {\n    if (!url) throw new Error('url参数错误');\n    let search = url.indexOf('?') ? url.split('?')[1] : url;\n    var params = new URLSearchParams(search);\n    for(var paramsValue of params.values()) {\n        if (paramsValue === value) {\n            return true;\n        }\n    }\n    return false;\n}\n\n```","slug":"handle-url","published":1,"updated":"2022-04-12T07:52:48.708Z","_id":"cl1vuhkzu000068vc5al174a2","layout":"post","photos":[],"link":"","content":"<h2 id=\"URLSearchParams-API\"><a href=\"#URLSearchParams-API\" class=\"headerlink\" title=\"URLSearchParams API\"></a>URLSearchParams API</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\">URLSearchParams</a>接口定义了一些实用的方法来处理URL</li>\n<li>但是<code>不会解析完整 URL</code>，需要传入类似location.search 但是如果字符串起始位置有 ? 的话会被去除。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> paramsString1 = <span class=\"string\">&quot;http://example.com/search?query=%40&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> searchParams1 = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(paramsString1);</span><br><span class=\"line\"></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;query&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;http://example.com/search?query&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;query&quot;</span>); <span class=\"comment\">// null</span></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;http://example.com/search?query&quot;</span>); <span class=\"comment\">// &quot;@&quot; (equivalent to decodeURIComponent(&#x27;%40&#x27;))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> paramsString2 = <span class=\"string\">&quot;?query=value&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> searchParams2 = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(paramsString2);</span><br><span class=\"line\">searchParams2.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;query&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(<span class=\"string\">&quot;http://example.com/search?query=%40&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> searchParams3 = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(url.<span class=\"property\">search</span>);</span><br><span class=\"line\">searchParams3.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;query&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"方法一：将URL参数解析成对象\"><a href=\"#方法一：将URL参数解析成对象\" class=\"headerlink\" title=\"方法一：将URL参数解析成对象\"></a>方法一：将URL参数解析成对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 将URL参数解析成对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url 1. url=https://www.baodu.com?nihao=111 2. ?nihao=111</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">object</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseURLToObj</span>(<span class=\"params\">url = <span class=\"string\">&#x27;&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;url参数错误&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) ? url.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;?&#x27;</span>)[<span class=\"number\">1</span>] : url;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> params = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(search)) &#123;</span><br><span class=\"line\">        params[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二：将对象解析成URL字符串\"><a href=\"#方法二：将对象解析成URL字符串\" class=\"headerlink\" title=\"方法二：将对象解析成URL字符串\"></a>方法二：将对象解析成URL字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 将对象解析成URL字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">object</span>&#125; params </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseObjToString</span>(<span class=\"params\">params = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(params).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        search.<span class=\"title function_\">append</span>(key, params[key]);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> search.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"方法三：向URL中添加某个参数\"><a href=\"#方法三：向URL中添加某个参数\" class=\"headerlink\" title=\"方法三：向URL中添加某个参数\"></a>方法三：向URL中添加某个参数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 向URL中添加某个参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">object</span>&#125; params </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">URLAddParams</span>(<span class=\"params\">url, params</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = <span class=\"title function_\">parseObjToString</span>(params)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) == -<span class=\"number\">1</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;search&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>&amp;<span class=\"subst\">$&#123;search&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法四：判断URL中是否有某个参数\"><a href=\"#方法四：判断URL中是否有某个参数\" class=\"headerlink\" title=\"方法四：判断URL中是否有某个参数\"></a>方法四：判断URL中是否有某个参数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 判断URL中是否有某个参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; key </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title class_\">URLHasKey</span>(url,key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;url参数错误&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) ? url.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;?&#x27;</span>)[<span class=\"number\">1</span>] : url;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(search).<span class=\"title function_\">has</span>(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法五：判断URL中是否有value值\"><a href=\"#方法五：判断URL中是否有value值\" class=\"headerlink\" title=\"方法五：判断URL中是否有value值\"></a>方法五：判断URL中是否有value值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 判断URL中是否有value值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; value </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title class_\">URLHasValue</span>(url,value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;url参数错误&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) ? url.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;?&#x27;</span>)[<span class=\"number\">1</span>] : url;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(search);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> paramsValue <span class=\"keyword\">of</span> params.<span class=\"title function_\">values</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paramsValue === value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"URLSearchParams-API\"><a href=\"#URLSearchParams-API\" class=\"headerlink\" title=\"URLSearchParams API\"></a>URLSearchParams API</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\">URLSearchParams</a>接口定义了一些实用的方法来处理URL</li>\n<li>但是<code>不会解析完整 URL</code>，需要传入类似location.search 但是如果字符串起始位置有 ? 的话会被去除。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> paramsString1 = <span class=\"string\">&quot;http://example.com/search?query=%40&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> searchParams1 = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(paramsString1);</span><br><span class=\"line\"></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;query&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;http://example.com/search?query&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;query&quot;</span>); <span class=\"comment\">// null</span></span><br><span class=\"line\">searchParams1.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;http://example.com/search?query&quot;</span>); <span class=\"comment\">// &quot;@&quot; (equivalent to decodeURIComponent(&#x27;%40&#x27;))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> paramsString2 = <span class=\"string\">&quot;?query=value&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> searchParams2 = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(paramsString2);</span><br><span class=\"line\">searchParams2.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;query&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(<span class=\"string\">&quot;http://example.com/search?query=%40&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> searchParams3 = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(url.<span class=\"property\">search</span>);</span><br><span class=\"line\">searchParams3.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;query&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"方法一：将URL参数解析成对象\"><a href=\"#方法一：将URL参数解析成对象\" class=\"headerlink\" title=\"方法一：将URL参数解析成对象\"></a>方法一：将URL参数解析成对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 将URL参数解析成对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url 1. url=https://www.baodu.com?nihao=111 2. ?nihao=111</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">object</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseURLToObj</span>(<span class=\"params\">url = <span class=\"string\">&#x27;&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;url参数错误&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) ? url.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;?&#x27;</span>)[<span class=\"number\">1</span>] : url;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> params = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(search)) &#123;</span><br><span class=\"line\">        params[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二：将对象解析成URL字符串\"><a href=\"#方法二：将对象解析成URL字符串\" class=\"headerlink\" title=\"方法二：将对象解析成URL字符串\"></a>方法二：将对象解析成URL字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 将对象解析成URL字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">object</span>&#125; params </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseObjToString</span>(<span class=\"params\">params = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(params).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        search.<span class=\"title function_\">append</span>(key, params[key]);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> search.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"方法三：向URL中添加某个参数\"><a href=\"#方法三：向URL中添加某个参数\" class=\"headerlink\" title=\"方法三：向URL中添加某个参数\"></a>方法三：向URL中添加某个参数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 向URL中添加某个参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">object</span>&#125; params </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">URLAddParams</span>(<span class=\"params\">url, params</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = <span class=\"title function_\">parseObjToString</span>(params)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) == -<span class=\"number\">1</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;search&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>&amp;<span class=\"subst\">$&#123;search&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法四：判断URL中是否有某个参数\"><a href=\"#方法四：判断URL中是否有某个参数\" class=\"headerlink\" title=\"方法四：判断URL中是否有某个参数\"></a>方法四：判断URL中是否有某个参数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 判断URL中是否有某个参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; key </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title class_\">URLHasKey</span>(url,key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;url参数错误&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) ? url.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;?&#x27;</span>)[<span class=\"number\">1</span>] : url;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(search).<span class=\"title function_\">has</span>(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法五：判断URL中是否有value值\"><a href=\"#方法五：判断URL中是否有value值\" class=\"headerlink\" title=\"方法五：判断URL中是否有value值\"></a>方法五：判断URL中是否有value值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 判断URL中是否有value值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; url </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; value </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title class_\">URLHasValue</span>(url,value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;url参数错误&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> search = url.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) ? url.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;?&#x27;</span>)[<span class=\"number\">1</span>] : url;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(search);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> paramsValue <span class=\"keyword\">of</span> params.<span class=\"title function_\">values</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (paramsValue === value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"react","date":"2019-01-25T08:15:24.000Z","comments":1,"_content":"\n","source":"_posts/react.md","raw":"---\ntitle: react\ndate: 2019-01-25 16:15:24\ncategories: react\ntags: [react]\ncomments: true\n---\n\n","slug":"react","published":1,"updated":"2022-04-11T07:04:28.979Z","layout":"post","photos":[],"link":"","_id":"cl1vuhkzy000368vcgb6c48ee","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"常用工具","date":"2020-11-16T06:30:24.000Z","comments":0,"_content":"\n# nvm常用命令\n---\n\n- 切换成默认版本 `nvm alias default v12.7.0`\n- 下载指定版本node `nvm install v12.7.0`\n\n- nvm install报错 `could not retrieve`\n```javascript\n// 解决办法\n// 找到nvm配置目录 、settings.text文件，添加如下配置\nnode_mirror:npm.taobao.org/mirrors/node/\nnpm_mirror:npm.taobao.org/mirrors/npm/\n```\n\n\n# cnpm安装\n```javascript\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n- 替换淘宝镜像\n```javascript\n// 命令\nnpm config set registry https://registry.npm.taobao.org\nnpm config set disturl https://npm.taobao.org/dist\n// 查看是否成功\nnpm config get registry\n```\n\n# yarn安装\n```js\n// 下载yarn\nnpm isntall yarn -g\n// 查看版本\nyarn --version\n// yarn 设置淘宝镜像\nyarn config set registry https://registry.npm.taobao.org/\nyarn config set disturl https://npm.taobao.org/dist\n```\n- yarn命令\n```js\n// 下载依赖\nyarn add 包名\n// 移除依赖\nyarn remove 包名\n```\n\n\n\n# vscode配置\n---\n- vscode下载\n- [VScode官方](https://code.visualstudio.com/)因为连接境外下载速度很慢，[解决方案](https://blog.csdn.net/m0_55548148/article/details/115587339)\n```javascript\n//外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n//内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n//替换连接：vscode.cdn.azure.cn\n```\n\n- mac笔记本\n1. 打开vscode\n2. `command + shift + p `打开命令面板\n3. 输入shell（选择\"install code command in PATH\"）<font color=\"green\">【如下图】</font>\n4. 打开终端输入命令：`code <dir> ` (dir - 对应的文件夹路径)\n\n<!-- more -->\n\n![](/images/vscode.png)\n------\n\n- window笔记本\n1. 打开vscode安装位置，进入bin文件夹，复制路径 eg：`E:\\Microsoft VS Code\\bin；`\n2. 回到桌面，右键我的电脑，高级系统设置 ，环境变量，编辑path值，在原来的path后面加上eg ;`E:\\Microsoft VS Code\\bin`(英文的分号+vscode的bin路径)\n3. 打开终端输入命令：`code <dir> ` (dir - 对应的文件夹路径)\n\n\n- vscode常用插件\n- Live Serve : 在浏览器中打开index.html，自动热更新\n- typeScript Auto Compiler : 自动转成js文件\n\n\n\n# node问题\n\n- npm ERR! cb() never called!","source":"_posts/tool.md","raw":"---\ntitle: 常用工具\ndate: 2020-11-16 14:30:24\ncategories: vscode\ntags: [vscode，nvm]\ncomments: false\n---\n\n# nvm常用命令\n---\n\n- 切换成默认版本 `nvm alias default v12.7.0`\n- 下载指定版本node `nvm install v12.7.0`\n\n- nvm install报错 `could not retrieve`\n```javascript\n// 解决办法\n// 找到nvm配置目录 、settings.text文件，添加如下配置\nnode_mirror:npm.taobao.org/mirrors/node/\nnpm_mirror:npm.taobao.org/mirrors/npm/\n```\n\n\n# cnpm安装\n```javascript\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n- 替换淘宝镜像\n```javascript\n// 命令\nnpm config set registry https://registry.npm.taobao.org\nnpm config set disturl https://npm.taobao.org/dist\n// 查看是否成功\nnpm config get registry\n```\n\n# yarn安装\n```js\n// 下载yarn\nnpm isntall yarn -g\n// 查看版本\nyarn --version\n// yarn 设置淘宝镜像\nyarn config set registry https://registry.npm.taobao.org/\nyarn config set disturl https://npm.taobao.org/dist\n```\n- yarn命令\n```js\n// 下载依赖\nyarn add 包名\n// 移除依赖\nyarn remove 包名\n```\n\n\n\n# vscode配置\n---\n- vscode下载\n- [VScode官方](https://code.visualstudio.com/)因为连接境外下载速度很慢，[解决方案](https://blog.csdn.net/m0_55548148/article/details/115587339)\n```javascript\n//外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n//内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip\n//替换连接：vscode.cdn.azure.cn\n```\n\n- mac笔记本\n1. 打开vscode\n2. `command + shift + p `打开命令面板\n3. 输入shell（选择\"install code command in PATH\"）<font color=\"green\">【如下图】</font>\n4. 打开终端输入命令：`code <dir> ` (dir - 对应的文件夹路径)\n\n<!-- more -->\n\n![](/images/vscode.png)\n------\n\n- window笔记本\n1. 打开vscode安装位置，进入bin文件夹，复制路径 eg：`E:\\Microsoft VS Code\\bin；`\n2. 回到桌面，右键我的电脑，高级系统设置 ，环境变量，编辑path值，在原来的path后面加上eg ;`E:\\Microsoft VS Code\\bin`(英文的分号+vscode的bin路径)\n3. 打开终端输入命令：`code <dir> ` (dir - 对应的文件夹路径)\n\n\n- vscode常用插件\n- Live Serve : 在浏览器中打开index.html，自动热更新\n- typeScript Auto Compiler : 自动转成js文件\n\n\n\n# node问题\n\n- npm ERR! cb() never called!","slug":"tool","published":1,"updated":"2022-04-21T08:45:55.326Z","_id":"cl1vuhkzy000468vc18iw71li","layout":"post","photos":[],"link":"","content":"<h1 id=\"nvm常用命令\"><a href=\"#nvm常用命令\" class=\"headerlink\" title=\"nvm常用命令\"></a>nvm常用命令</h1><hr>\n<ul>\n<li><p>切换成默认版本 <code>nvm alias default v12.7.0</code></p>\n</li>\n<li><p>下载指定版本node <code>nvm install v12.7.0</code></p>\n</li>\n<li><p>nvm install报错 <code>could not retrieve</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解决办法</span></span><br><span class=\"line\"><span class=\"comment\">// 找到nvm配置目录 、settings.text文件，添加如下配置</span></span><br><span class=\"line\"><span class=\"attr\">node_mirror</span>:npm.<span class=\"property\">taobao</span>.<span class=\"property\">org</span>/mirrors/node/</span><br><span class=\"line\"><span class=\"attr\">npm_mirror</span>:npm.<span class=\"property\">taobao</span>.<span class=\"property\">org</span>/mirrors/npm/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"cnpm安装\"><a href=\"#cnpm安装\" class=\"headerlink\" title=\"cnpm安装\"></a>cnpm安装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=<span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>替换淘宝镜像<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命令</span></span><br><span class=\"line\">npm config set registry <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\">npm config set disturl <span class=\"attr\">https</span>:<span class=\"comment\">//npm.taobao.org/dist</span></span><br><span class=\"line\"><span class=\"comment\">// 查看是否成功</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"yarn安装\"><a href=\"#yarn安装\" class=\"headerlink\" title=\"yarn安装\"></a>yarn安装</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载yarn</span></span><br><span class=\"line\">npm isntall yarn -g</span><br><span class=\"line\"><span class=\"comment\">// 查看版本</span></span><br><span class=\"line\">yarn --version</span><br><span class=\"line\"><span class=\"comment\">// yarn 设置淘宝镜像</span></span><br><span class=\"line\">yarn config set registry <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org/</span></span><br><span class=\"line\">yarn config set disturl <span class=\"attr\">https</span>:<span class=\"comment\">//npm.taobao.org/dist</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>yarn命令<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载依赖</span></span><br><span class=\"line\">yarn add 包名</span><br><span class=\"line\"><span class=\"comment\">// 移除依赖</span></span><br><span class=\"line\">yarn remove 包名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"vscode配置\"><a href=\"#vscode配置\" class=\"headerlink\" title=\"vscode配置\"></a>vscode配置</h1><hr>\n<ul>\n<li><p>vscode下载</p>\n</li>\n<li><p><a href=\"https://code.visualstudio.com/\">VScode官方</a>因为连接境外下载速度很慢，<a href=\"https://blog.csdn.net/m0_55548148/article/details/115587339\">解决方案</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span></span><br><span class=\"line\"><span class=\"comment\">//内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span></span><br><span class=\"line\"><span class=\"comment\">//替换连接：vscode.cdn.azure.cn</span></span><br></pre></td></tr></table></figure></li>\n<li><p>mac笔记本</p>\n</li>\n</ul>\n<ol>\n<li>打开vscode</li>\n<li><code>command + shift + p </code>打开命令面板</li>\n<li>输入shell（选择”install code command in PATH”）<font color=\"green\">【如下图】</font></li>\n<li>打开终端输入命令：<code>code &lt;dir&gt; </code> (dir - 对应的文件夹路径)</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/images/vscode.png\"></h2><ul>\n<li>window笔记本</li>\n</ul>\n<ol>\n<li>打开vscode安装位置，进入bin文件夹，复制路径 eg：<code>E:\\Microsoft VS Code\\bin；</code></li>\n<li>回到桌面，右键我的电脑，高级系统设置 ，环境变量，编辑path值，在原来的path后面加上eg ;<code>E:\\Microsoft VS Code\\bin</code>(英文的分号+vscode的bin路径)</li>\n<li>打开终端输入命令：<code>code &lt;dir&gt; </code> (dir - 对应的文件夹路径)</li>\n</ol>\n<ul>\n<li>vscode常用插件</li>\n<li>Live Serve : 在浏览器中打开index.html，自动热更新</li>\n<li>typeScript Auto Compiler : 自动转成js文件</li>\n</ul>\n<h1 id=\"node问题\"><a href=\"#node问题\" class=\"headerlink\" title=\"node问题\"></a>node问题</h1><ul>\n<li>npm ERR! cb() never called!</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"nvm常用命令\"><a href=\"#nvm常用命令\" class=\"headerlink\" title=\"nvm常用命令\"></a>nvm常用命令</h1><hr>\n<ul>\n<li><p>切换成默认版本 <code>nvm alias default v12.7.0</code></p>\n</li>\n<li><p>下载指定版本node <code>nvm install v12.7.0</code></p>\n</li>\n<li><p>nvm install报错 <code>could not retrieve</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解决办法</span></span><br><span class=\"line\"><span class=\"comment\">// 找到nvm配置目录 、settings.text文件，添加如下配置</span></span><br><span class=\"line\"><span class=\"attr\">node_mirror</span>:npm.<span class=\"property\">taobao</span>.<span class=\"property\">org</span>/mirrors/node/</span><br><span class=\"line\"><span class=\"attr\">npm_mirror</span>:npm.<span class=\"property\">taobao</span>.<span class=\"property\">org</span>/mirrors/npm/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"cnpm安装\"><a href=\"#cnpm安装\" class=\"headerlink\" title=\"cnpm安装\"></a>cnpm安装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=<span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>替换淘宝镜像<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命令</span></span><br><span class=\"line\">npm config set registry <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\">npm config set disturl <span class=\"attr\">https</span>:<span class=\"comment\">//npm.taobao.org/dist</span></span><br><span class=\"line\"><span class=\"comment\">// 查看是否成功</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"yarn安装\"><a href=\"#yarn安装\" class=\"headerlink\" title=\"yarn安装\"></a>yarn安装</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载yarn</span></span><br><span class=\"line\">npm isntall yarn -g</span><br><span class=\"line\"><span class=\"comment\">// 查看版本</span></span><br><span class=\"line\">yarn --version</span><br><span class=\"line\"><span class=\"comment\">// yarn 设置淘宝镜像</span></span><br><span class=\"line\">yarn config set registry <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org/</span></span><br><span class=\"line\">yarn config set disturl <span class=\"attr\">https</span>:<span class=\"comment\">//npm.taobao.org/dist</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>yarn命令<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载依赖</span></span><br><span class=\"line\">yarn add 包名</span><br><span class=\"line\"><span class=\"comment\">// 移除依赖</span></span><br><span class=\"line\">yarn remove 包名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"vscode配置\"><a href=\"#vscode配置\" class=\"headerlink\" title=\"vscode配置\"></a>vscode配置</h1><hr>\n<ul>\n<li><p>vscode下载</p>\n</li>\n<li><p><a href=\"https://code.visualstudio.com/\">VScode官方</a>因为连接境外下载速度很慢，<a href=\"https://blog.csdn.net/m0_55548148/article/details/115587339\">解决方案</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//外网地址：https://az764295.vo.msecnd.net/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span></span><br><span class=\"line\"><span class=\"comment\">//内网地址：https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCode-darwin-universal.zip</span></span><br><span class=\"line\"><span class=\"comment\">//替换连接：vscode.cdn.azure.cn</span></span><br></pre></td></tr></table></figure></li>\n<li><p>mac笔记本</p>\n</li>\n</ul>\n<ol>\n<li>打开vscode</li>\n<li><code>command + shift + p </code>打开命令面板</li>\n<li>输入shell（选择”install code command in PATH”）<font color=\"green\">【如下图】</font></li>\n<li>打开终端输入命令：<code>code &lt;dir&gt; </code> (dir - 对应的文件夹路径)</li>\n</ol>","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/images/vscode.png\"></h2><ul>\n<li>window笔记本</li>\n</ul>\n<ol>\n<li>打开vscode安装位置，进入bin文件夹，复制路径 eg：<code>E:\\Microsoft VS Code\\bin；</code></li>\n<li>回到桌面，右键我的电脑，高级系统设置 ，环境变量，编辑path值，在原来的path后面加上eg ;<code>E:\\Microsoft VS Code\\bin</code>(英文的分号+vscode的bin路径)</li>\n<li>打开终端输入命令：<code>code &lt;dir&gt; </code> (dir - 对应的文件夹路径)</li>\n</ol>\n<ul>\n<li>vscode常用插件</li>\n<li>Live Serve : 在浏览器中打开index.html，自动热更新</li>\n<li>typeScript Auto Compiler : 自动转成js文件</li>\n</ul>\n<h1 id=\"node问题\"><a href=\"#node问题\" class=\"headerlink\" title=\"node问题\"></a>node问题</h1><ul>\n<li>npm ERR! cb() never called!</li>\n</ul>"},{"title":"typescript笔记","date":"2022-04-24T06:30:24.000Z","comments":0,"_content":"\n## 基本数据类型\n\n- number数字类型\n```ts\n// js写法\nlet num = 20;\nnum = 23;\n// ts写法\nlet num: number = 25\n```\n\n- boolean布尔类型\n```ts\n// boolean\nlet isLogin:boolean = true;\n```\n\n- string字符串类型\n```ts\nlet name:string = 'Even'\n```\n\n- null undefined类型\n```ts\nlet a:null = null;\nlet b:undefined = undefined;\n```\n\n## 引用数据类型\n\n- 数组类型\n```ts\n// 三种书写方法\nlet names01:Array<String> = ['hello'];\nlet names02:String[] = ['hello'];\nlet name03:any[] = ['hello']\n\n// 元组 - 确切知道数组里每个值的类型\nlet colors: [String,Number] = ['hell',12];\n\n// 枚举\nenum Color {\n  number,\n  yellow,\n  red,\n}\nlet myColor:Color = Color.red; // 获取角标\nlet myColorVal:String = Color[myColor]; // 获取值\nconsole.log(myColor);\nconsole.log(myColorVal);\n```\n\n- 对象类型\n```ts\nlet dataObj:{age:number, name:String} = {\n  age: 12,\n  name: 'Even'\n}\ndataObj = {\n  age: 12,\n  name: 'levi'\n}\n\n```\n\n## 其他类型\n\n- ts其他类型 \n\n### never类型：`容错`\n```ts\n// never的应用，抛出异常\nlet y:number = 1;\ny = (()=>{throw new Error('errow')})()\n```\n\n### any、unknow\n```ts\n// any不会做语法检查\nlet name:any = {}\nname = 'Even'\n// unknow会做语法检查\nlet age:unknow = 23\n// let c = age.info 报错\n```\n\n### `泛型（Generics）`\n- 泛型：是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性 \n\n1. 泛型在`函数`中使用，我们在函数名后添加`<T>`\n```ts\nfunction createArray<T>(length: number, value: T): Array<T> {\n  let result: Array<T> = []\n  for (let i = 0; i < length; i++) {\n    result[i] = value\n  }\n  return result\n}\nlet result = createArray<string>(3, 'x')\nconsole.log(result) // ['x', 'x', 'x']\nlet result2 = createArray<number>(3, 3) // T 就相当于一个参数，传什么是什么\nconsole.log(result2) // [3, 3, 3]\n```\n\n2. 泛型在`类`中的使用\n```ts\nclass MyArray<T> {\n  private list: T[] = []\n  add(val: T) {\n    this.list.push(val)\n  }\n  getMax(): T {\n    let result: T = this.list[0]\n    for (let i = 0; i < this.list.length; i++) {\n      if (this.list[i] > result) {\n        result = this.list[i]\n      }\n    }\n    return result\n  }\n}\nlet arr = new MyArray<number>()\narr.add(1)\narr.add(2)\narr.add(3)\nlet result3 = arr.getMax()\nconsole.log(result3) // 3\n```\n\n\n## 函数中的应用\n\n- 基本函数\n```ts\n// 返回值类型为number\nfunction returnVal01():number {\n  return 1\n}\n// 无返回值\nfunction returnVal02():void {\n  console.log('hello')\n}\n// 定义函数传参类型\nfunction returnVal03(value1:number, value2:string,):string {\n  return value1 + value2\n}\n// 单独定义函数接口 类似于interface\nlet myFun:(a:number, b: string) => string;\nmyFun = returnVal03;\n```\n\n- 类函数\n```ts\n// 基本使用\nclass Person {\n  constructor(name:string, public username:string) {\n    this.name = name;\n    this.username = name;\n  }\n  // 都可以使用\n  public name: string;\n  // 被保护 当前类跟继承类可以使用\n  protected gender: string = '男';\n  // 私有的 当前类可以使用\n  private age: number = 27;\n  setGender(gender:string) {\n    this.gender = gender\n  }\n}\nlet person = new Person('Even', 'levi');\nperson.setGender('上海');\n// 类的继承\nclass Student extends Person {\n  constructor(name:string) {\n    super(name, name);\n  }\n}\n// class类get\\set\nclass Person2 {\n  private _name:string = 'Even'\n  constructor() {}\n  get getName() {\n    return this._name;\n  }\n  set setName(name:string) {\n    this._name = name\n  }\n}\nlet person2 = new Person2()\nperson2.setName = 'levi'\nconsole.log(person2.getName);\n```\n\n## 接口\n- interface\\type区别：`interface可继承， type不可以继承`\n- interface\n```ts\ninterface Person1 {\n  name:string, // : 必须要写\n  age:number,\n  gender?:string, // ?可选\n  readonly salary:number, // 只读属性\n  [propName: string]: any, // 任意类型\n  subValue:(val:number) => void,\n}\n```\n- type\n```ts\ntype Person2 = {}\nlet person:Person1 = {\n  name:'Even',\n  age: 28,\n  salary: 7000,\n  ids:[12,12,12],\n  id2:[12,12,12],\n  id3: 'shi',\n  subValue(val) {},\n}\n\n```\n\n- 接口实际应用\n```ts\n// 接口应用到对象中\ntype Person2 = {}\nlet person:Person1 = {\n  name:'Even',\n  age: 28,\n  salary: 7000,\n  ids:[12,12,12],\n  id2:[12,12,12],\n  id3: 'shi',\n  subValue(val) {},\n}\n// 接口应用到class中 implements\ninterface person3Interface1 {\n  id:number,\n  type: string,\n}\ninterface person3interface2 {\n  name: string,\n  age: number,\n}\nclass Person3 implements person3Interface1,person3interface2 {\n  public id:number = 12\n  public type:string = 'worker'\n  public name:string = 'levi'\n  public age:number = 28\n}\n// interface继承\ninterface person3interface3 extends person3interface2 {\n  gender:string\n}\nconst a1:person3interface3 = {\n  name: 'Even',\n  age: 12,\n  gender: 'man'\n}\n\n\n```","source":"_posts/typescript.md","raw":"---\ntitle: typescript笔记\ndate: 2022-04-24 14:30:24\ncategories: typescript\ntags: [typescript]\ncomments: false\n---\n\n## 基本数据类型\n\n- number数字类型\n```ts\n// js写法\nlet num = 20;\nnum = 23;\n// ts写法\nlet num: number = 25\n```\n\n- boolean布尔类型\n```ts\n// boolean\nlet isLogin:boolean = true;\n```\n\n- string字符串类型\n```ts\nlet name:string = 'Even'\n```\n\n- null undefined类型\n```ts\nlet a:null = null;\nlet b:undefined = undefined;\n```\n\n## 引用数据类型\n\n- 数组类型\n```ts\n// 三种书写方法\nlet names01:Array<String> = ['hello'];\nlet names02:String[] = ['hello'];\nlet name03:any[] = ['hello']\n\n// 元组 - 确切知道数组里每个值的类型\nlet colors: [String,Number] = ['hell',12];\n\n// 枚举\nenum Color {\n  number,\n  yellow,\n  red,\n}\nlet myColor:Color = Color.red; // 获取角标\nlet myColorVal:String = Color[myColor]; // 获取值\nconsole.log(myColor);\nconsole.log(myColorVal);\n```\n\n- 对象类型\n```ts\nlet dataObj:{age:number, name:String} = {\n  age: 12,\n  name: 'Even'\n}\ndataObj = {\n  age: 12,\n  name: 'levi'\n}\n\n```\n\n## 其他类型\n\n- ts其他类型 \n\n### never类型：`容错`\n```ts\n// never的应用，抛出异常\nlet y:number = 1;\ny = (()=>{throw new Error('errow')})()\n```\n\n### any、unknow\n```ts\n// any不会做语法检查\nlet name:any = {}\nname = 'Even'\n// unknow会做语法检查\nlet age:unknow = 23\n// let c = age.info 报错\n```\n\n### `泛型（Generics）`\n- 泛型：是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性 \n\n1. 泛型在`函数`中使用，我们在函数名后添加`<T>`\n```ts\nfunction createArray<T>(length: number, value: T): Array<T> {\n  let result: Array<T> = []\n  for (let i = 0; i < length; i++) {\n    result[i] = value\n  }\n  return result\n}\nlet result = createArray<string>(3, 'x')\nconsole.log(result) // ['x', 'x', 'x']\nlet result2 = createArray<number>(3, 3) // T 就相当于一个参数，传什么是什么\nconsole.log(result2) // [3, 3, 3]\n```\n\n2. 泛型在`类`中的使用\n```ts\nclass MyArray<T> {\n  private list: T[] = []\n  add(val: T) {\n    this.list.push(val)\n  }\n  getMax(): T {\n    let result: T = this.list[0]\n    for (let i = 0; i < this.list.length; i++) {\n      if (this.list[i] > result) {\n        result = this.list[i]\n      }\n    }\n    return result\n  }\n}\nlet arr = new MyArray<number>()\narr.add(1)\narr.add(2)\narr.add(3)\nlet result3 = arr.getMax()\nconsole.log(result3) // 3\n```\n\n\n## 函数中的应用\n\n- 基本函数\n```ts\n// 返回值类型为number\nfunction returnVal01():number {\n  return 1\n}\n// 无返回值\nfunction returnVal02():void {\n  console.log('hello')\n}\n// 定义函数传参类型\nfunction returnVal03(value1:number, value2:string,):string {\n  return value1 + value2\n}\n// 单独定义函数接口 类似于interface\nlet myFun:(a:number, b: string) => string;\nmyFun = returnVal03;\n```\n\n- 类函数\n```ts\n// 基本使用\nclass Person {\n  constructor(name:string, public username:string) {\n    this.name = name;\n    this.username = name;\n  }\n  // 都可以使用\n  public name: string;\n  // 被保护 当前类跟继承类可以使用\n  protected gender: string = '男';\n  // 私有的 当前类可以使用\n  private age: number = 27;\n  setGender(gender:string) {\n    this.gender = gender\n  }\n}\nlet person = new Person('Even', 'levi');\nperson.setGender('上海');\n// 类的继承\nclass Student extends Person {\n  constructor(name:string) {\n    super(name, name);\n  }\n}\n// class类get\\set\nclass Person2 {\n  private _name:string = 'Even'\n  constructor() {}\n  get getName() {\n    return this._name;\n  }\n  set setName(name:string) {\n    this._name = name\n  }\n}\nlet person2 = new Person2()\nperson2.setName = 'levi'\nconsole.log(person2.getName);\n```\n\n## 接口\n- interface\\type区别：`interface可继承， type不可以继承`\n- interface\n```ts\ninterface Person1 {\n  name:string, // : 必须要写\n  age:number,\n  gender?:string, // ?可选\n  readonly salary:number, // 只读属性\n  [propName: string]: any, // 任意类型\n  subValue:(val:number) => void,\n}\n```\n- type\n```ts\ntype Person2 = {}\nlet person:Person1 = {\n  name:'Even',\n  age: 28,\n  salary: 7000,\n  ids:[12,12,12],\n  id2:[12,12,12],\n  id3: 'shi',\n  subValue(val) {},\n}\n\n```\n\n- 接口实际应用\n```ts\n// 接口应用到对象中\ntype Person2 = {}\nlet person:Person1 = {\n  name:'Even',\n  age: 28,\n  salary: 7000,\n  ids:[12,12,12],\n  id2:[12,12,12],\n  id3: 'shi',\n  subValue(val) {},\n}\n// 接口应用到class中 implements\ninterface person3Interface1 {\n  id:number,\n  type: string,\n}\ninterface person3interface2 {\n  name: string,\n  age: number,\n}\nclass Person3 implements person3Interface1,person3interface2 {\n  public id:number = 12\n  public type:string = 'worker'\n  public name:string = 'levi'\n  public age:number = 28\n}\n// interface继承\ninterface person3interface3 extends person3interface2 {\n  gender:string\n}\nconst a1:person3interface3 = {\n  name: 'Even',\n  age: 12,\n  gender: 'man'\n}\n\n\n```","slug":"typescript","published":1,"updated":"2022-04-24T07:11:37.256Z","layout":"post","photos":[],"link":"","_id":"cl2cyicgr0000zwvc0b4shcw0","content":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><ul>\n<li><p>number数字类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\">num = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"comment\">// ts写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span> = <span class=\"number\">25</span></span><br></pre></td></tr></table></figure></li>\n<li><p>boolean布尔类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">isLogin</span>:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>string字符串类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Even&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>null undefined类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><ul>\n<li><p>数组类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三种书写方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names01</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">String</span>&gt; = [<span class=\"string\">&#x27;hello&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names02</span>:<span class=\"title class_\">String</span>[] = [<span class=\"string\">&#x27;hello&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name03</span>:<span class=\"built_in\">any</span>[] = [<span class=\"string\">&#x27;hello&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元组 - 确切知道数组里每个值的类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">colors</span>: [<span class=\"title class_\">String</span>,<span class=\"title class_\">Number</span>] = [<span class=\"string\">&#x27;hell&#x27;</span>,<span class=\"number\">12</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  yellow,</span><br><span class=\"line\">  red,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myColor</span>:<span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span>; <span class=\"comment\">// 获取角标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myColorVal</span>:<span class=\"title class_\">String</span> = <span class=\"title class_\">Color</span>[myColor]; <span class=\"comment\">// 获取值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myColor);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myColorVal);</span><br></pre></td></tr></table></figure></li>\n<li><p>对象类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dataObj</span>:&#123;<span class=\"attr\">age</span>:<span class=\"built_in\">number</span>, <span class=\"attr\">name</span>:<span class=\"title class_\">String</span>&#125; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Even&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dataObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;levi&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"其他类型\"><a href=\"#其他类型\" class=\"headerlink\" title=\"其他类型\"></a>其他类型</h2><ul>\n<li>ts其他类型 </li>\n</ul>\n<h3 id=\"never类型：容错\"><a href=\"#never类型：容错\" class=\"headerlink\" title=\"never类型：容错\"></a>never类型：<code>容错</code></h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// never的应用，抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">y</span>:<span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">y = (<span class=\"function\">()=&gt;</span>&#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;errow&#x27;</span>)&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"any、unknow\"><a href=\"#any、unknow\" class=\"headerlink\" title=\"any、unknow\"></a>any、unknow</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// any不会做语法检查</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name</span>:<span class=\"built_in\">any</span> = &#123;&#125;</span><br><span class=\"line\">name = <span class=\"string\">&#x27;Even&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// unknow会做语法检查</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">age</span>:unknow = <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"comment\">// let c = age.info 报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型（Generics）\"><a href=\"#泛型（Generics）\" class=\"headerlink\" title=\"泛型（Generics）\"></a><code>泛型（Generics）</code></h3><ul>\n<li>泛型：是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性 </li>\n</ul>\n<ol>\n<li><p>泛型在<code>函数</code>中使用，我们在函数名后添加<code>&lt;T&gt;</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: <span class=\"title class_\">Array</span>&lt;T&gt; = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    result[i] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = createArray&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">3</span>, <span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = createArray&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">3</span>) <span class=\"comment\">// T 就相当于一个参数，传什么是什么</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2) <span class=\"comment\">// [3, 3, 3]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>泛型在<code>类</code>中的使用</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyArray</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">list</span>: T[] = []</span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">val: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getMax</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: T = <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[i] &gt; result) &#123;</span><br><span class=\"line\">        result = <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[i]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">MyArray</span>&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">arr.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">arr.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">arr.<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = arr.<span class=\"title function_\">getMax</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result3) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"函数中的应用\"><a href=\"#函数中的应用\" class=\"headerlink\" title=\"函数中的应用\"></a>函数中的应用</h2><ul>\n<li><p>基本函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回值类型为number</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">returnVal01</span>(<span class=\"params\"></span>):<span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 无返回值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">returnVal02</span>(<span class=\"params\"></span>):<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义函数传参类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">returnVal03</span>(<span class=\"params\">value1:<span class=\"built_in\">number</span>, value2:<span class=\"built_in\">string</span>,</span>):<span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value1 + value2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 单独定义函数接口 类似于interface</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFun</span>:<span class=\"function\">(<span class=\"params\">a:<span class=\"built_in\">number</span>, b: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">myFun = returnVal03;</span><br></pre></td></tr></table></figure></li>\n<li><p>类函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本使用</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, <span class=\"keyword\">public</span> username:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">username</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 都可以使用</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 被保护 当前类跟继承类可以使用</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">gender</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 私有的 当前类可以使用</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> = <span class=\"number\">27</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setGender</span>(<span class=\"params\">gender:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">gender</span> = gender</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Even&#x27;</span>, <span class=\"string\">&#x27;levi&#x27;</span>);</span><br><span class=\"line\">person.<span class=\"title function_\">setGender</span>(<span class=\"string\">&#x27;上海&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 类的继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// class类get\\set</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">_name</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Even&#x27;</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">getName</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>()</span><br><span class=\"line\">person2.<span class=\"property\">setName</span> = <span class=\"string\">&#x27;levi&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person2.<span class=\"property\">getName</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li><p>interface\\type区别：<code>interface可继承， type不可以继承</code></p>\n</li>\n<li><p>interface</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person1</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>, <span class=\"comment\">// : 必须要写</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">  gender?:<span class=\"built_in\">string</span>, <span class=\"comment\">// ?可选</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">salary</span>:<span class=\"built_in\">number</span>, <span class=\"comment\">// 只读属性</span></span><br><span class=\"line\">  [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>, <span class=\"comment\">// 任意类型</span></span><br><span class=\"line\">  <span class=\"attr\">subValue</span>:<span class=\"function\">(<span class=\"params\">val:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>type</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person2</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">  <span class=\"attr\">salary</span>: <span class=\"number\">7000</span>,</span><br><span class=\"line\">  <span class=\"attr\">ids</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id2</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id3</span>: <span class=\"string\">&#x27;shi&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">subValue</span>(<span class=\"params\">val</span>) &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>接口实际应用</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口应用到对象中</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person2</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">  <span class=\"attr\">salary</span>: <span class=\"number\">7000</span>,</span><br><span class=\"line\">  <span class=\"attr\">ids</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id2</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id3</span>: <span class=\"string\">&#x27;shi&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">subValue</span>(<span class=\"params\">val</span>) &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口应用到class中 implements</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> person3Interface1 &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> person3interface2 &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person3</span> <span class=\"keyword\">implements</span> person3Interface1,person3interface2 &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">id</span>:<span class=\"built_in\">number</span> = <span class=\"number\">12</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">type</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;worker&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;levi&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">age</span>:<span class=\"built_in\">number</span> = <span class=\"number\">28</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// interface继承</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> person3interface3 <span class=\"keyword\">extends</span> person3interface2 &#123;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">a1</span>:person3interface3 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;man&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><ul>\n<li><p>number数字类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\">num = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"comment\">// ts写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span> = <span class=\"number\">25</span></span><br></pre></td></tr></table></figure></li>\n<li><p>boolean布尔类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">isLogin</span>:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>string字符串类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Even&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>null undefined类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><ul>\n<li><p>数组类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三种书写方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names01</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">String</span>&gt; = [<span class=\"string\">&#x27;hello&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">names02</span>:<span class=\"title class_\">String</span>[] = [<span class=\"string\">&#x27;hello&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name03</span>:<span class=\"built_in\">any</span>[] = [<span class=\"string\">&#x27;hello&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元组 - 确切知道数组里每个值的类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">colors</span>: [<span class=\"title class_\">String</span>,<span class=\"title class_\">Number</span>] = [<span class=\"string\">&#x27;hell&#x27;</span>,<span class=\"number\">12</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  yellow,</span><br><span class=\"line\">  red,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myColor</span>:<span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span>; <span class=\"comment\">// 获取角标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myColorVal</span>:<span class=\"title class_\">String</span> = <span class=\"title class_\">Color</span>[myColor]; <span class=\"comment\">// 获取值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myColor);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myColorVal);</span><br></pre></td></tr></table></figure></li>\n<li><p>对象类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">dataObj</span>:&#123;<span class=\"attr\">age</span>:<span class=\"built_in\">number</span>, <span class=\"attr\">name</span>:<span class=\"title class_\">String</span>&#125; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Even&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dataObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;levi&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"其他类型\"><a href=\"#其他类型\" class=\"headerlink\" title=\"其他类型\"></a>其他类型</h2><ul>\n<li>ts其他类型 </li>\n</ul>\n<h3 id=\"never类型：容错\"><a href=\"#never类型：容错\" class=\"headerlink\" title=\"never类型：容错\"></a>never类型：<code>容错</code></h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// never的应用，抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">y</span>:<span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">y = (<span class=\"function\">()=&gt;</span>&#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;errow&#x27;</span>)&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"any、unknow\"><a href=\"#any、unknow\" class=\"headerlink\" title=\"any、unknow\"></a>any、unknow</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// any不会做语法检查</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name</span>:<span class=\"built_in\">any</span> = &#123;&#125;</span><br><span class=\"line\">name = <span class=\"string\">&#x27;Even&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// unknow会做语法检查</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">age</span>:unknow = <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"comment\">// let c = age.info 报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型（Generics）\"><a href=\"#泛型（Generics）\" class=\"headerlink\" title=\"泛型（Generics）\"></a><code>泛型（Generics）</code></h3><ul>\n<li>泛型：是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性 </li>\n</ul>\n<ol>\n<li><p>泛型在<code>函数</code>中使用，我们在函数名后添加<code>&lt;T&gt;</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: <span class=\"title class_\">Array</span>&lt;T&gt; = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    result[i] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = createArray&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">3</span>, <span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = createArray&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">3</span>) <span class=\"comment\">// T 就相当于一个参数，传什么是什么</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2) <span class=\"comment\">// [3, 3, 3]</span></span><br></pre></td></tr></table></figure></li>\n<li><p>泛型在<code>类</code>中的使用</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyArray</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">list</span>: T[] = []</span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">val: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getMax</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: T = <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[i] &gt; result) &#123;</span><br><span class=\"line\">        result = <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[i]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">MyArray</span>&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">arr.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">arr.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">arr.<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = arr.<span class=\"title function_\">getMax</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result3) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"函数中的应用\"><a href=\"#函数中的应用\" class=\"headerlink\" title=\"函数中的应用\"></a>函数中的应用</h2><ul>\n<li><p>基本函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回值类型为number</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">returnVal01</span>(<span class=\"params\"></span>):<span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 无返回值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">returnVal02</span>(<span class=\"params\"></span>):<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义函数传参类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">returnVal03</span>(<span class=\"params\">value1:<span class=\"built_in\">number</span>, value2:<span class=\"built_in\">string</span>,</span>):<span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value1 + value2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 单独定义函数接口 类似于interface</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFun</span>:<span class=\"function\">(<span class=\"params\">a:<span class=\"built_in\">number</span>, b: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">myFun = returnVal03;</span><br></pre></td></tr></table></figure></li>\n<li><p>类函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本使用</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, <span class=\"keyword\">public</span> username:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">username</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 都可以使用</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 被保护 当前类跟继承类可以使用</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">gender</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 私有的 当前类可以使用</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> = <span class=\"number\">27</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setGender</span>(<span class=\"params\">gender:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">gender</span> = gender</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Even&#x27;</span>, <span class=\"string\">&#x27;levi&#x27;</span>);</span><br><span class=\"line\">person.<span class=\"title function_\">setGender</span>(<span class=\"string\">&#x27;上海&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 类的继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// class类get\\set</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">_name</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Even&#x27;</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">getName</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person2</span>()</span><br><span class=\"line\">person2.<span class=\"property\">setName</span> = <span class=\"string\">&#x27;levi&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person2.<span class=\"property\">getName</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li><p>interface\\type区别：<code>interface可继承， type不可以继承</code></p>\n</li>\n<li><p>interface</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person1</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>, <span class=\"comment\">// : 必须要写</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">  gender?:<span class=\"built_in\">string</span>, <span class=\"comment\">// ?可选</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">salary</span>:<span class=\"built_in\">number</span>, <span class=\"comment\">// 只读属性</span></span><br><span class=\"line\">  [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>, <span class=\"comment\">// 任意类型</span></span><br><span class=\"line\">  <span class=\"attr\">subValue</span>:<span class=\"function\">(<span class=\"params\">val:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>type</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person2</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">  <span class=\"attr\">salary</span>: <span class=\"number\">7000</span>,</span><br><span class=\"line\">  <span class=\"attr\">ids</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id2</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id3</span>: <span class=\"string\">&#x27;shi&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">subValue</span>(<span class=\"params\">val</span>) &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>接口实际应用</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口应用到对象中</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person2</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person1</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">  <span class=\"attr\">salary</span>: <span class=\"number\">7000</span>,</span><br><span class=\"line\">  <span class=\"attr\">ids</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id2</span>:[<span class=\"number\">12</span>,<span class=\"number\">12</span>,<span class=\"number\">12</span>],</span><br><span class=\"line\">  <span class=\"attr\">id3</span>: <span class=\"string\">&#x27;shi&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">subValue</span>(<span class=\"params\">val</span>) &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口应用到class中 implements</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> person3Interface1 &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> person3interface2 &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person3</span> <span class=\"keyword\">implements</span> person3Interface1,person3interface2 &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">id</span>:<span class=\"built_in\">number</span> = <span class=\"number\">12</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">type</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;worker&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;levi&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">age</span>:<span class=\"built_in\">number</span> = <span class=\"number\">28</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// interface继承</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> person3interface3 <span class=\"keyword\">extends</span> person3interface2 &#123;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">a1</span>:person3interface3 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Even&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;man&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0iw2rcz0001itoz903m28ox","category_id":"cl0iw2rd40004itozbg2z2rge","_id":"cl0iw2rdb000gitoz48hd03il"},{"post_id":"cl0iw2rd30003itozc9lth5p8","category_id":"cl0iw2rd9000bitoze7w356wf","_id":"cl0iw2rdh000oitozgpl46sj1"},{"post_id":"cl0iw2rda000fitozenh72gsr","category_id":"cl0iw2rd9000bitoze7w356wf","_id":"cl0iw2rdk000sitoz58drcr4b"},{"post_id":"cl0iw2rd60007itozauhz9go7","category_id":"cl0iw2rd9000bitoze7w356wf","_id":"cl0iw2rdl000vitoz3nov9vn9"},{"post_id":"cl0iw2rd70009itoza6q7cln3","category_id":"cl0iw2rd9000bitoze7w356wf","_id":"cl0iw2rdn0010itoz4qb8b2ot"},{"post_id":"cl0iw2rd8000aitozd0vlfw0q","category_id":"cl0iw2rdl000uitoz7doq7d9w","_id":"cl0iw2rdo0014itozfnrvgj7f"},{"post_id":"cl0iw2rda000eitoz5jof114t","category_id":"cl0iw2rdn0011itoz8zn1fmdz","_id":"cl0iw2rdo0018itoz6j6se0gm"},{"post_id":"cl0iw2rdd000jitoz16ifhg7v","category_id":"cl0iw2rdo0015itoz7mesged4","_id":"cl0iw2rdr001citoz7ywo9f74"},{"post_id":"cl0iw2rdf000litoz5bw88ul6","category_id":"cl0iw2rdo0019itoz9cm2gmyh","_id":"cl0iw2rds001fitoz8h329qut"},{"post_id":"cl0iw2rdk000titozadgb43o8","category_id":"cl0iw2rds001gitozfbd91g9d","_id":"cl0iw2rdv001oitoz1o7gb7r0"},{"post_id":"cl0iw2rdm000xitozfaq8ces3","category_id":"cl0iw2rds001litozbpb3dcm7","_id":"cl0iw2rdx001sitoz5s594s11"},{"post_id":"cl0iw2rdm000zitozhzkz3fjr","category_id":"cl0iw2rdw001pitoz3ool74o5","_id":"cl0iw2rdx001vitozh6pj3wt2"},{"post_id":"cl1vuhkzu000068vc5al174a2","category_id":"cl0iw2rd9000bitoze7w356wf","_id":"cl1vuhkzx000268vc0jvqe0h8"},{"post_id":"cl1vuhkzy000468vc18iw71li","category_id":"cl0iw2rdr001ditoz8y0l5z6j","_id":"cl1vuhl03000768vc46h0265k"},{"post_id":"cl1vuhkzy000368vcgb6c48ee","category_id":"cl1vuhkzz000568vchtczgayd","_id":"cl1vuhl04000a68vchg8haqh3"},{"post_id":"cl2cyicgr0000zwvc0b4shcw0","category_id":"cl0iw2rdo0019itoz9cm2gmyh","_id":"cl2cyicgu0002zwvchcp40r33"}],"PostTag":[{"post_id":"cl0iw2rcz0001itoz903m28ox","tag_id":"cl0iw2rd50005itoza3041vzs","_id":"cl0iw2rd9000ditoz6hk53y35"},{"post_id":"cl0iw2rd30003itozc9lth5p8","tag_id":"cl0iw2rd9000citoz8dgkgtwc","_id":"cl0iw2rde000kitoz742ea214"},{"post_id":"cl0iw2rda000fitozenh72gsr","tag_id":"cl0iw2rd9000citoz8dgkgtwc","_id":"cl0iw2rdh000mitoz8yt3akuw"},{"post_id":"cl0iw2rd60007itozauhz9go7","tag_id":"cl0iw2rd9000citoz8dgkgtwc","_id":"cl0iw2rdj000ritozcs3e4wi8"},{"post_id":"cl0iw2rd70009itoza6q7cln3","tag_id":"cl0iw2rd9000citoz8dgkgtwc","_id":"cl0iw2rdm000yitoz1bm2euqg"},{"post_id":"cl0iw2rd8000aitozd0vlfw0q","tag_id":"cl0iw2rdl000witozc2j1bxaw","_id":"cl0iw2rdo0013itozdcqjb3ps"},{"post_id":"cl0iw2rda000eitoz5jof114t","tag_id":"cl0iw2rdn0012itoz3520ciwn","_id":"cl0iw2rdo0017itozbhndeqbi"},{"post_id":"cl0iw2rdd000jitoz16ifhg7v","tag_id":"cl0iw2rdo0016itoz99kegh2c","_id":"cl0iw2rdr001bitozaola2524"},{"post_id":"cl0iw2rdf000litoz5bw88ul6","tag_id":"cl0iw2rdp001aitozckcdgu3u","_id":"cl0iw2rds001iitozcyb42ep2"},{"post_id":"cl0iw2rdf000litoz5bw88ul6","tag_id":"cl0iw2rdr001eitoz1usk850b","_id":"cl0iw2rds001jitoz5o39hetn"},{"post_id":"cl0iw2rdk000titozadgb43o8","tag_id":"cl0iw2rdt001mitozdgv82u69","_id":"cl0iw2rdw001ritoz82gqfbrf"},{"post_id":"cl0iw2rdm000xitozfaq8ces3","tag_id":"cl0iw2rdr001eitoz1usk850b","_id":"cl0iw2rdx001uitoz1cdxav13"},{"post_id":"cl0iw2rdm000zitozhzkz3fjr","tag_id":"cl0iw2rdx001titoz32ouhi34","_id":"cl0iw2rdx001witoz91q7cte7"},{"post_id":"cl1vuhkzu000068vc5al174a2","tag_id":"cl0iw2rd9000citoz8dgkgtwc","_id":"cl1vuhkzw000168vcar2vcqcf"},{"post_id":"cl1vuhkzy000368vcgb6c48ee","tag_id":"cl1vuhl01000668vc8pkteftr","_id":"cl1vuhl03000968vcby75gdqt"},{"post_id":"cl1vuhkzy000468vc18iw71li","tag_id":"cl1vuhl03000868vchojje8ys","_id":"cl1vuhl04000b68vc4mbg2h9w"},{"post_id":"cl2cyicgr0000zwvc0b4shcw0","tag_id":"cl0iw2rdp001aitozckcdgu3u","_id":"cl2cyicgu0001zwvc7m3l4kkf"}],"Tag":[{"name":"文档","_id":"cl0iw2rd50005itoza3041vzs"},{"name":"javascript","_id":"cl0iw2rd9000citoz8dgkgtwc"},{"name":"Mac","_id":"cl0iw2rdl000witozc2j1bxaw"},{"name":"md","_id":"cl0iw2rdn0012itoz3520ciwn"},{"name":"node","_id":"cl0iw2rdo0016itoz99kegh2c"},{"name":"typescript","_id":"cl0iw2rdp001aitozckcdgu3u"},{"name":"webpack","_id":"cl0iw2rdr001eitoz1usk850b"},{"name":"vscode","_id":"cl0iw2rds001hitozf16265n4"},{"name":"vue","_id":"cl0iw2rdt001mitozdgv82u69"},{"name":"canvas","_id":"cl0iw2rdx001titoz32ouhi34"},{"name":"react","_id":"cl1vuhl01000668vc8pkteftr"},{"name":"vscode，nvm","_id":"cl1vuhl03000868vchojje8ys"}]}}